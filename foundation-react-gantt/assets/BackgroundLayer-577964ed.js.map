{"version":3,"file":"BackgroundLayer-577964ed.js","sources":["../../../src/components/HighlightedInterval.js","../../../src/components/BackgroundLayer.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {convertDateToMoment} from '../utils/timeUtils';\n\n/**\n * @extends React.Component<HighlightedInterval.propTypes>\n */\nexport class HighlightedInterval extends React.Component {\n  static propTypes = {\n    /**\n     * Start of the highlighted interval, as date (numeric/millis or moment object, cf. `Timeline.props.useMoment`).\n     *\n     * @type { object | number }\n     */\n    start: PropTypes.oneOfType([PropTypes.object, PropTypes.number]).isRequired,\n\n    /**\n     * End of the highlighted interval, as date (numeric/millis or moment object, cf. `Timeline.props.useMoment`).\n     *\n     * @type { object | number}\n     */\n    end: PropTypes.oneOfType([PropTypes.object, PropTypes.number]).isRequired,\n\n    /**\n     * Class name used to render the interval.\n     *\n     * @type { string }\n     */\n    className: PropTypes.string,\n\n    /**\n     * Style used to render the interval.\n     *\n     * @type { object }\n     */\n    style: PropTypes.object,\n\n    /**\n     * Internal (passed by parent). The height of the highlighted interval.\n     *\n     * @type { number }\n     */\n    height: PropTypes.number,\n\n    /**\n     * Internal (passed by parent). `HighlightedInterval` uses absolute positioning, thus it needs the `top` property\n     * to set the top edge if the element.\n     *\n     * @type { number }\n     */\n    top: PropTypes.number,\n\n    /**\n     * Internal (passed by parent). This function allows the conversion of `start`/`end` (time) properties to pixels.\n     *\n     * @type { Function }\n     */\n    calculateHorizontalPosition: PropTypes.func.isRequired,\n\n    /**\n     * Internal (passed by parent). If true timeline will try to minimize re-renders (e.g: the displayed timeline interval changes).\n     *\n     * @type { boolean }\n     */\n    shouldUpdate: PropTypes.bool\n  };\n\n  static defaultProps = {\n    className: '',\n    style: {},\n    height: undefined,\n    top: undefined,\n    calculateHorizontalPosition: () => {},\n    shouldUpdate: false\n  };\n\n  shouldComponentUpdate(nextProps) {\n    if (\n      nextProps.shouldUpdate ||\n      this.props.height !== nextProps.height ||\n      this.props.top !== nextProps.top ||\n      !convertDateToMoment(this.props.start).isSame(convertDateToMoment(nextProps.start).valueOf()) ||\n      !convertDateToMoment(this.props.end).isSame(convertDateToMoment(nextProps.end))\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @returns { object } style\n   */\n  getStyle() {\n    const {left, width} = this.props.calculateHorizontalPosition(this.props.start, this.props.end);\n    return {\n      ...this.props.style,\n      left,\n      width,\n      top: this.props.top,\n      height: this.props.height,\n      display: left && width ? 'block' : 'none'\n    };\n  }\n\n  /**\n   * @returns { string } className\n   */\n  getClassName() {\n    return `rct9k-highlighted-interval ${this.props.className}`;\n  }\n\n  render() {\n    return <div className={this.getClassName()} style={this.getStyle()} />;\n  }\n}\n","import React, {Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport {convertDateToMoment} from '../utils/timeUtils';\nimport {Marker} from './Marker';\nimport {HighlightedInterval} from './HighlightedInterval';\nimport moment from 'moment';\n\n/**\n * @extends React.Component<BackgroundLayer.propTypes>\n */\nexport class BackgroundLayer extends React.Component {\n  static propTypes = {\n    /**\n     * If `true`, it highlights the weekends.\n     *\n     * @type { boolean }\n     */\n    highlightWeekends: PropTypes.bool,\n\n    /**\n     * Custom class name for highlighting the weekends.\n     *\n     * NOTE: No need to provide this; because it has a default class. If a custom class is provided, `!important` should be used to override properties from the default class.\n     *\n     * @type { string }\n     */\n    highlightWeekendsClassName: PropTypes.string,\n\n    /**\n     * Custom style for highlighting the weekends.\n     *\n     * NOTE: No need to provide this; because it has a default class.\n     *\n     * @type { object }\n     */\n    highlightWeekendsStyle: PropTypes.object,\n\n    /**\n     * If `true`, it draws a marker (vertical line) that indicates the current time.\n     *\n     * @type { boolean }\n     */\n    nowMarker: PropTypes.bool,\n\n    /**\n     * Custom class name for now marker.\n     *\n     * NOTE: No need to provide this; because it has a default class. If a custom class is provided, `!important` should be used to override properties from the default class.\n     *\n     * @type { string }\n     */\n    nowMarkerClassName: PropTypes.string,\n\n    /**\n     * Custom style for now marker.\n     *\n     * NOTE: No need to provide this; because it has a default class.\n     *\n     * @type { object }\n     */\n    nowMarkerStyle: PropTypes.object,\n\n    /**\n     * If `true`, it draws vertical lines, according to the intervals defined by the bottom `Timebar`.\n     *\n     * @type { boolean }\n     */\n    verticalGrid: PropTypes.bool,\n\n    /**\n     * Custom class name for vertical grid.\n     *\n     * NOTE: No need to provide this; because it has a default class. If a custom class is provided, `!important` should be used to override properties from the default class.\n     *\n     * @type { string }\n     */\n    verticalGridClassName: PropTypes.string,\n\n    /**\n     * Custom style for vertical grid.\n     *\n     * NOTE: No need to provide this; because it has a default class.\n     *\n     * @type { object }\n     */\n    verticalGridStyle: PropTypes.object,\n\n    /**\n     * @type { Array.<JSX.Element> }\n     */\n    markers: PropTypes.arrayOf(PropTypes.object),\n\n    /**\n     * @type { Array.<JSX.Element> }\n     */\n    highlightedIntervals: PropTypes.arrayOf(PropTypes.object),\n\n    /**\n     * Internal (passed by parent). Start of the timeline display interval, as date (moment object).\n     *\n     * @type { object }\n     */\n    startDateTimeline: PropTypes.object,\n\n    /**\n     * Internal (passed by parent). End of the timeline display interval, as date (moment object).\n     *\n     * @type { object }\n     */\n    endDateTimeline: PropTypes.object,\n\n    /**\n     * Internal (passed by parent). The height of the background layer.\n     *\n     * @type { number }\n     */\n    height: PropTypes.number,\n\n    /**\n     * Internal (passed by parent). The position of the top edge of background layer.\n     *\n     * @type { number }\n     */\n    topOffset: PropTypes.number,\n\n    /**\n     * Internal (passed by parent). Total width of the timeline.\n     *\n     * @type { number }\n     */\n    width: PropTypes.number,\n\n    /**\n     * Internal (passed by parent). The position of the left edge of background layer.\n     *\n     * @type { number }\n     */\n    leftOffset: PropTypes.number,\n\n    /**\n     * Internal (passed by parent). The vertical lines of the grid are already calculated by `Timerbar`.\n     *\n     * @type { Array.<object>}\n     */\n    verticalGridLines: PropTypes.arrayOf(PropTypes.object)\n  };\n\n  static defaultProps = {\n    highlightWeekends: false,\n    highlightWeekendsClassName: undefined,\n    highlightWeekendsStyle: undefined,\n    nowMarker: false,\n    nowMarkerClassName: undefined,\n    nowMarkerStyle: undefined,\n    verticalGrid: false,\n    verticalGridClassName: undefined,\n    verticalGridStyle: undefined,\n    verticalGridLines: [],\n    markers: [],\n    highlightedIntervals: [],\n    height: undefined,\n    topOffset: undefined,\n    width: undefined,\n    leftOffset: undefined,\n    startDateTimeline: undefined,\n    endDateTimeline: undefined\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {verticalLines: [], shouldUpdate: false, weekends: []};\n    this.calculateHorizontalPosition = this.calculateHorizontalPosition.bind(this);\n  }\n\n  componentDidMount() {\n    this.calculateHighlightedWeekends();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      this.props.height !== prevProps.height ||\n      this.props.width !== prevProps.width ||\n      !this.props.startDateTimeline.isSame(prevProps.startDateTimeline) ||\n      !this.props.endDateTimeline.isSame(prevProps.endDateTimeline)\n    ) {\n      this.calculateHighlightedWeekends();\n      this.setState({shouldUpdate: true});\n      return;\n    }\n    if (this.state.shouldUpdate) {\n      this.setState({shouldUpdate: false});\n    }\n  }\n\n  /**\n   * It calculates the horizontal position (left and width in pixels) of an element from the time positions (start, end).\n   * @param { object | number } start\n   * @param { object | number } end\n   * @returns { object } left position and width in pixels\n   */\n  calculateHorizontalPosition(start, end) {\n    const intervalMillis = this.props.endDateTimeline.diff(this.props.startDateTimeline, 'milliseconds');\n    const pixelsPerMillis = (this.props.width - this.props.leftOffset) / intervalMillis;\n    const startAsMoment = convertDateToMoment(start);\n    const endAsMoment = convertDateToMoment(end);\n    if (endAsMoment.isBefore(this.props.startDateTimeline) || startAsMoment.isAfter(this.props.endDateTimeline)) {\n      return {};\n    }\n\n    let offset = startAsMoment.diff(this.props.startDateTimeline, 'milliseconds');\n    let duration = (endAsMoment <= this.props.endDateTimeline ? endAsMoment : this.props.endDateTimeline).diff(\n      startAsMoment,\n      'milliseconds'\n    );\n    const left = this.props.leftOffset + offset * pixelsPerMillis;\n    let width = Math.round(duration * pixelsPerMillis);\n    return {left, width};\n  }\n\n  /**\n   * Calculates the weekend intervals for the timeline displayed interval (`startDateTimeline` - `endDateTimeline`).\n   */\n  calculateHighlightedWeekends() {\n    let weekends = [];\n    if (!this.props.highlightWeekends) {\n      return;\n    }\n\n    let weekendStartDate = this.props.startDateTimeline.clone().startOf('day');\n    let weekendEndDate = null;\n    // find first weekend day\n    while (weekendStartDate.isoWeekday() !== 6 && weekendStartDate.isoWeekday() !== 7) {\n      weekendStartDate = weekendStartDate.add(1, 'days');\n    }\n\n    // compute all the weekends in the interval\n    while (weekendStartDate < this.props.endDateTimeline) {\n      if (weekendStartDate.isoWeekday() === 7) {\n        weekendEndDate = weekendStartDate.clone().add(1, 'days');\n      } else {\n        weekendEndDate = weekendStartDate.clone().add(2, 'days');\n      }\n      weekends.push({\n        start: weekendStartDate,\n        end: weekendEndDate,\n        className: `rct9k-background-layer-highlight-weekends ${this.props.highlightWeekendsClassName}`\n      });\n\n      // go to the next weekend\n      weekendStartDate = weekendEndDate.clone().add(5, 'days');\n    }\n    this.setState({weekends: weekends});\n  }\n\n  renderHighlightedWeekends() {\n    return (\n      <Fragment>\n        {this.props.highlightWeekends &&\n          this.state.weekends.map((weekend, index) => {\n            return (\n              <HighlightedInterval\n                key={index}\n                start={weekend.start}\n                end={weekend.end}\n                className={weekend.className}\n                style={this.props.highlightWeekendsStyle}\n                top={this.props.topOffset}\n                height={this.props.height}\n                shouldUpdate={this.state.shouldUpdate}\n                calculateHorizontalPosition={this.calculateHorizontalPosition}\n              />\n            );\n          })}\n      </Fragment>\n    );\n  }\n\n  renderCustomComponents(components) {\n    return (\n      <Fragment>\n        {components.map((component, index) => {\n          return React.cloneElement(component, {\n            key: index,\n            height: this.props.height,\n            top: this.props.topOffset,\n            shouldUpdate: this.state.shouldUpdate,\n            calculateHorizontalPosition: this.calculateHorizontalPosition\n          });\n        })}\n      </Fragment>\n    );\n  }\n\n  renderVerticalGrid() {\n    const {verticalGrid, topOffset, height, leftOffset, width, verticalGridLines, verticalGridClassName} = this.props;\n    return (\n      <Fragment>\n        {verticalGrid && verticalGridLines && (\n          <div\n            className=\"rct9k-background-layer-vertical-grid\"\n            style={{top: topOffset, height: height, left: leftOffset, width: width - leftOffset}}>\n            {verticalGridLines.map((verticalLine, index) => {\n              return (\n                <span\n                  key={index}\n                  className={`rct9k-background-layer-vertical-line ${verticalGridClassName}`}\n                  style={{...this.props.verticalGridStyle, width: verticalLine.size}}\n                />\n              );\n            })}\n          </div>\n        )}\n      </Fragment>\n    );\n  }\n\n  renderNowMarker() {\n    const {nowMarker, height, topOffset, nowMarkerClassName} = this.props;\n    const currentDate = moment();\n    const overlappsDisplayedInterval =\n      this.props.startDateTimeline.isSameOrBefore(currentDate) && this.props.endDateTimeline.isSameOrAfter(currentDate);\n    return (\n      <Fragment>\n        {nowMarker && overlappsDisplayedInterval && (\n          <Marker\n            date={currentDate}\n            top={0}\n            height={height + topOffset}\n            shouldUpdate={this.state.shouldUpdate}\n            calculateHorizontalPosition={this.calculateHorizontalPosition}\n            className={`rct9k-background-layer-now-marker ${nowMarkerClassName}`}\n            style={this.props.nowMarkerStyle}\n          />\n        )}\n      </Fragment>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"rct9k-background-layer\">\n        {this.renderHighlightedWeekends()}\n        {this.renderCustomComponents(this.props.highlightedIntervals)}\n        {this.renderNowMarker()}\n        {this.renderCustomComponents(this.props.markers)}\n        {this.renderVerticalGrid()}\n      </div>\n    );\n  }\n}\n"],"names":["HighlightedInterval","React","nextProps","convertDateToMoment","left","width","jsx","PropTypes","BackgroundLayer","props","prevProps","start","end","intervalMillis","pixelsPerMillis","startAsMoment","endAsMoment","offset","duration","weekends","weekendStartDate","weekendEndDate","Fragment","weekend","index","components","component","verticalGrid","topOffset","height","leftOffset","verticalGridLines","verticalGridClassName","verticalLine","nowMarker","nowMarkerClassName","currentDate","moment","overlappsDisplayedInterval","Marker","jsxs"],"mappings":"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"}