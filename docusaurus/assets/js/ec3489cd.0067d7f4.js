(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[581],{57741:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>m,toc:()=>u});var r=n(85893),a=n(11151),s=n(93598);const o={text:"package com.crispico.leave_management.demoMode;\n\nimport com.crispico.foundation.testGoodies.DemoModeService;\nimport com.crispico.leave_management.BaseDbPopulator;\n\n/**\n * @author Cristian Spiescu\n */\n// #region demo-mode-class\npublic class DemoModeServiceLeaveManagement extends DemoModeService {\n\t\n\t@Override\n\tprotected void populateDbForDemo() {\n\t\t// TODO we need to move the code from BaseDbPopulator, here. I didn't do it now, because there are\n\t\t// a lot of branches that will report a conflict\n\t\tBaseDbPopulator populator = tg.create(BaseDbPopulator.class);\n\t\tpopulator.run();\n// #endregion\n\t}\n\n}\n",path:"leave-management/leave-management-server/src/test/java/com/crispico/leave_management/demoMode/DemoModeServiceLeaveManagement.java"};var i=n(37548);const c={text:"spring:\r\n    main:\r\n        # for beans such as nowService\r\n        allow-bean-definition-overriding: true\r\nfoundation:\r\n    security:\r\n        remember-me:\r\n            enabled: true\r\n\r\n    # need to have access to scheduled taks for DemoRunService client TAD test\r\n    scheduled-task-service:\r\n      organizations: DEFAULT\r\n\r\n#region demo-mode-yml\r\ntest-goodies:\r\n    demo-mode:\r\n        # if false, then the service + scheduler is not instantiated\r\n        enabled: true\r\n        # CRON expression; how often should the repopulation happen\r\n        cron-repopulate-db: 0 0 0 * * *\r\n        # users to create on repopulation; if they exist, the password is updated\r\n        users:\r\n            - username: admin\r\n              password: admin\r\n            - username: test\r\n              password: test\r\n#endregion",path:"foundation-jhg-server/src/main/resources/config-foundation/application-test.yml"},l={title:"Demo mode"},d=void 0,m={id:"foundation-server/demo-mode",title:"Demo mode",description:"Scenarios",source:"@site/docs/foundation-server/demo-mode.md",sourceDirName:"foundation-server",slug:"/foundation-server/demo-mode",permalink:"/docusaurus/docs/foundation-server/demo-mode",draft:!1,unlisted:!1,editUrl:"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/blob/master/docusaurus/docs/foundation-server/demo-mode.md",tags:[],version:"current",frontMatter:{title:"Demo mode"},sidebar:"tutorialSidebar",previous:{title:"Settings",permalink:"/docusaurus/docs/foundation-server/Settings"},next:{title:"tests-are-demo",permalink:"/docusaurus/docs/category/tests-are-demo"}},p={},u=[{value:"Scenarios",id:"scenarios",level:2},{value:"1/ WHEN the app starts, THEN the DB is repopulated",id:"1-when-the-app-starts-then-the-db-is-repopulated",level:3},{value:"1.1/ A method that we provide is called; it should create demo data",id:"11-a-method-that-we-provide-is-called-it-should-create-demo-data",level:4},{value:"1.2/ Demo users are created (or passwords updated)",id:"12-demo-users-are-created-or-passwords-updated",level:4},{value:"1.3/ The population doesn&#39;t happen during dev + test",id:"13-the-population-doesnt-happen-during-dev--test",level:4},{value:"WHEN the app starts, THEN a scheduled task is created. It repopulates the DB periodically",id:"when-the-app-starts-then-a-scheduled-task-is-created-it-repopulates-the-db-periodically",level:3},{value:"For devs",id:"for-devs",level:2}];function g(e){const t={admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",p:"p",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"scenarios",children:"Scenarios"}),"\n",(0,r.jsx)(t.h3,{id:"1-when-the-app-starts-then-the-db-is-repopulated",children:"1/ WHEN the app starts, THEN the DB is repopulated"}),"\n",(0,r.jsx)(t.h4,{id:"11-a-method-that-we-provide-is-called-it-should-create-demo-data",children:"1.1/ A method that we provide is called; it should create demo data"}),"\n",(0,r.jsx)(t.h4,{id:"12-demo-users-are-created-or-passwords-updated",children:"1.2/ Demo users are created (or passwords updated)"}),"\n",(0,r.jsx)(t.p,{children:"Being a demo server, the access is public. It means that anyone can freely connect and maybe mess the data, including the users. That's why, on repopulation, we want the demo users to reset as well. We don't need to provide custom code. Just a list of users + passwords."}),"\n",(0,r.jsx)(t.h4,{id:"13-the-population-doesnt-happen-during-dev--test",children:"1.3/ The population doesn't happen during dev + test"}),"\n",(0,r.jsx)(t.p,{children:"We want to save startup time, because when we launch the app in dev + test mode, we don't always need the DB populated. If we run tests that need DB, they will repopulate it anyway."}),"\n",(0,r.jsx)(t.h3,{id:"when-the-app-starts-then-a-scheduled-task-is-created-it-repopulates-the-db-periodically",children:"WHEN the app starts, THEN a scheduled task is created. It repopulates the DB periodically"}),"\n",(0,r.jsx)(t.p,{children:'We leverage the "Scheduled task" feature.'}),"\n",(0,r.jsx)(t.p,{children:"1/ It means that the DB will be periodically repopulated. Idem cf. above: maybe the user messes a lot the demo data; so a periodic cleaning is good."}),"\n",(0,r.jsx)(t.p,{children:"2/ We remind that there is an UI that shows all the scheduled tasks. It might be interesting for us to manually trigger the repopulation."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(44351).Z+"",width:"710",height:"212"})}),"\n",(0,r.jsx)(t.h2,{id:"for-devs",children:"For devs"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(s.h8,{s:"1"})," We create a class that extends ",(0,r.jsx)(t.code,{children:"DemoModeService"}),". It has only one method. It is called on app startup and via scheduler. It's purpose: to (re)populate the DB w/ demo data."]}),"\n",(0,r.jsx)(s.Tm,{src:o,region:"demo-mode-class"}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["Probably your users are ... users, not devs. We recommend to have data that looks good to them. E.g. instead ",(0,r.jsx)(t.em,{children:"User1"}),", ",(0,r.jsx)(t.em,{children:"User2"}),", ",(0,r.jsx)(t.em,{children:"MyUser"})," you might prefer ",(0,r.jsx)(t.em,{children:"John Doe"}),", ",(0,r.jsx)(t.em,{children:"Alex Doyle"}),", etc."]})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(s.h8,{s:"2"})," Instantiate the bean"]}),"\n",(0,r.jsx)(s.Tm,{src:i.Z,region:"demo-mode-bean"}),"\n",(0,r.jsx)(t.admonition,{type:"danger",children:(0,r.jsx)(t.p,{children:"The class should be instantiated ONLY for the demo profile. Don't forget this."})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(s.h8,{s:"3"})," Optional, modify config params"]}),"\n",(0,r.jsx)(t.p,{children:"Below are the available params, together w/ their default config:"}),"\n",(0,r.jsx)(s.sS,{language:"yml",src:c,region:"demo-mode-yml"}),"\n",(0,r.jsx)(t.p,{children:"We consider the above params as being reasonable defaults. But feel free to adjust them. That's why they are configurable \ud83d\ude0a."})]})}function h(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},93598:(e,t,n)=>{"use strict";n.d(t,{sS:()=>m,Tm:()=>p,Fb:()=>u,lj:()=>l,h8:()=>d});n(67294);class r{static now(){return new Date}static consoleLogJson(e,t){void 0===t&&(t=!0);const n=JSON.stringify(e,(()=>{const e=new WeakSet;return(t,n)=>{if(!t.startsWith("__react")){if("object"==typeof n&&null!==n){if(e.has(n))return;e.add(n)}return n}}})(),2);return t&&console.log(n),n}static substringAfter(e,t,n){const r=n?e.lastIndexOf(t):e.indexOf(t);return r<0?e:e.substring(r+t.length)}static setTimeoutPromise(e,t){return new Promise((n=>setTimeout((()=>{const t=e?.();n(t)}),t)))}}var a=n(9286),s=n(25142),o=n(89078),i=n(91262),c=n(85893);const l=e=>{return(0,c.jsx)(c.Fragment,{children:(0,c.jsxs)("a",{target:"_blank",href:(t=e.children,"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/tree/master/"+t+(e.lineNumbers?.[0]?`#L${e.lineNumbers[0]}`:"")+(e.lineNumbers?.[1]?`-L${e.lineNumbers[1]}`:"")),children:[r.substringAfter(e.children,"/",!0),e.region&&(0,c.jsxs)("small",{children:["\xa0",(0,c.jsxs)("i",{children:["(region ",e.region,", between lines [",e.lineNumbers[0],", ",e.lineNumbers[1],"])"]})]})]})});var t},d=e=>(0,c.jsx)(s.Z,{circular:!0,color:"blue",children:e.s}),m=e=>{let{src:{text:t,path:n},region:r,...s}=e;const o=new RegExp(`#region\\s*${r}\\r?\\n(.*?)#endregion`,"s").exec(t);if(!o)throw new Error(`In file = ${n}, cannot find region = ${r}, i.e. a portion like:\n\n#region ${r}\n...\n#endregion`);let i,d=o[1],m=1,p=-1;for(i=0;i<o.index+o[0].length;i++)"\n"===t[i]&&m++,-1===p&&i>=o.index&&(p=m);p++,m--,d="\n"+d;const u=d.match(/\n(\s)*\S/);let g;if(u&&(g=u[1])){const e=new RegExp(`\\n(${g}*)\\S`,"g");let t,n=-1;for(;null!==(t=e.exec(d));)(n<0||n>t[1].length)&&(n=t[1].length);const r=g.repeat(n);d=d.replace(new RegExp("\\n"+r,"g"),"\n")}return d=d.substring(1),(0,c.jsx)(c.Fragment,{children:(0,c.jsx)(a.Z,{title:(0,c.jsxs)(c.Fragment,{children:["Snippet extracted from ",(0,c.jsx)(l,{region:r,lineNumbers:[p,m],children:n})]}),...s,children:d})})},p=e=>(0,c.jsx)(m,{language:"java",...e}),u=e=>(0,c.jsx)(i.Z,{children:()=>(0,c.jsx)(o.J6,{recordedTestsUrl:"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/raw/master/leave-management/leave-management-react/public/recordedTests/recordedTest.json",includeCredentialsInJsonRequestRegex:/https:\/\/gitlab\.xops-online\.com\/*/,...e})})},44351:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"assets/images/demo-mode.md-ScheduledTask-49d31ee3058e6cc42419032b621e04d4.png"},37548:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r={text:'package com.crispico.leave_management;\n\nimport java.net.UnknownHostException;\n\nimport javax.inject.Inject;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.DependsOn;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.core.env.Environment;\n\nimport com.crispico.foundation.server.ServerUtils;\nimport com.crispico.foundation.server.distributedTracing.DependenciesFinder;\nimport com.crispico.foundation.server.jhipster.generated.JhipsterRuntimeApp;\nimport com.crispico.foundation.server.jhipster.lib.config.JHipsterConstants;\nimport com.crispico.foundation.server.service.IServerFeatureParamsEntityService;\nimport com.crispico.foundation.server.service.settingsEntityService.SettingsCache;\nimport com.crispico.foundation.server.spring.FoundationServerApp;\nimport com.crispico.leave_management.demoMode.DemoModeServiceLeaveManagement;\nimport com.crispico.leave_management.feature_params.LeaveCustomCodeTest;\nimport com.crispico.leave_management.feature_params.LeaveFeatureParamsTest;\nimport com.crispico.leave_management.feature_params.LeaveNewCustomCodeTest;\nimport com.crispico.leave_management.feature_params.LeaveNewFeatureParamsTest;\nimport com.crispico.leave_management.performance_logging.PerformanceLoggingAspect;\nimport com.crispico.leave_management.service.EmployeeService.Color;\nimport com.crispico.leave_management.service.EmployeeService.EmployeeServiceDemoReportSettings;\nimport com.crispico.leave_management.service.EmployeeService.EmployeeServiceHeaderSettings;\nimport com.crispico.leave_management.service.TaskService;\n\nimport brave.Tracer;\nimport graphql.schema.GraphQLSchema;\nimport graphql.schema.idl.SchemaPrinter;\n/**\n * @author Cristian Spiescu\n */\n@FoundationServerApp\n@Import(LeaveManagementScheduledTaskConfig.class)\npublic class LeaveManagementApp extends JhipsterRuntimeApp {\n\t\n\tprotected static class AfterStartup {\n\t\t@Inject\n\t\tprotected IServerFeatureParamsEntityService featureParamsService;\n\n\t\t@Inject\n\t\tprotected LeaveCustomCodeTest leaveCustomCodeTest;\n\n\t\t@Inject\n\t\tprotected LeaveNewCustomCodeTest leaveNewCustomCodeTest;\n\t\t\n\t\t@Inject\n\t\tprotected Environment environment;\n\n\t\t@Inject\n\t\tprotected void postCreate(GraphQLSchema schema) {\n\t\t\tfeatureParamsService.addFeatureParam(LeaveFeatureParamsTest.class);\n\t\t\tfeatureParamsService.addCustomCode(leaveCustomCodeTest);\n\n\t\t\tfeatureParamsService.addFeatureParam(LeaveNewFeatureParamsTest.class);\n\t\t\tfeatureParamsService.addCustomCode(leaveNewCustomCodeTest);\n\n\t\t\t\n\t        SchemaPrinter schemaPrinter = new SchemaPrinter(SchemaPrinter.Options.defaultOptions());\n\t        System.out.println(schemaPrinter.print(schema));\n\t        System.out.println();\n\t\t}\n\t}\n\t\n\t@Autowired\n\tTracer tracer;\n\n\tpublic LeaveManagementApp(Environment env) {\n\t\tsuper(env);\n\t}\n\n\tpublic static void main(String[] args) throws UnknownHostException {\n\t\tJhipsterRuntimeApp.main(LeaveManagementApp.class, args);\n\t}\n\n\t@Bean\n\tprotected AfterStartup afterStartup() {\n\t\treturn new AfterStartup();\n\t}\n\n\t@Bean\n\t@DependsOn("performanceLoggingParameters")\n\t@ConditionalOnProperty(name = "foundation.performance-log.disable-default-aspect", havingValue = "true")\n\tpublic PerformanceLoggingAspect performanceLoggingAspect() {\n\t\tPerformanceLoggingAspect result = new PerformanceLoggingAspect();\n\t\treturn result;\n\t}\n\t\n\t@Bean\n\tpublic SettingsCache<TaskService.CreateDailyTasksSettings> createDailyTasksSettings() {\n\t\tTaskService.CreateDailyTasksSettings defaultValue = new TaskService.CreateDailyTasksSettings();\n\t\tdefaultValue.createInWeekend = false;\n\t\treturn new SettingsCache<>(defaultValue);\n\t}\n\n\t@Bean\n\tpublic SettingsCache<TaskService.TaskSalarySettings> taskSalarySettings() {\n\t\treturn new SettingsCache<>(new TaskService.TaskSalarySettings());\n\t}\n\t\n\t@Bean\n\tpublic SettingsCache<EmployeeServiceDemoReportSettings> employeeServiceDemoReportSettings() {\n\t\treturn new SettingsCache<>(new EmployeeServiceDemoReportSettings());\n\t}\n\t\n\t// #region settings1-bean\n\t@Bean\n\tpublic SettingsCache<EmployeeServiceHeaderSettings> employeeServiceHeaderSettings() {\n\t\treturn new SettingsCache<>(ServerUtils.jsonLike(new EmployeeServiceHeaderSettings(), s -> {\n\t\t\ts.showBasicSettingsButton = false;\n\t\t\ts.settingsButtonColor = Color.blue;\n\t\t\ts.postItMessage = "";\n\t\t}));\n\t}\n\t// #endregion\n\t\n\t@Bean\n\tpublic DependenciesFinder dependenciesFinder() {\n\t\treturn new DependenciesFinder();\n\t}\n\n// CS: am dezactivat zipkin pentru ca aveam multa poluare in consola; @see pom.xml\t\n\t\n//\t@Bean\n//\tpublic Sampler defaultSampler() {\n//\t\treturn Sampler.ALWAYS_SAMPLE;\n//\t}\n//\n//\t@Bean\n//\tpublic JdbcEventListener jdbcEventListner() {\n//\t\treturn new JdbcEventListener() {\n//\n//\t\t\tpublic Map<String, String> result = new TreeMap<>();\n//\t\t\tpublic List<Map<String, String>> results = new ArrayList<Map<String, String>>();\n//\n//\t\t\t@Override\n//\t\t\tpublic void onAfterResultSetGet(ResultSetInformation resultSetInformation, String columnLabel, Object value, SQLException e) {\n//\t\t\t\ttry {\n//\t\t\t\t\tString tableName = resultSetInformation.getResultSet().getMetaData().getTableName(1);\n//\t\t\t\t\tif (!result.containsKey("tableName")) {\n//\t\t\t\t\t\tresult.put("tableName", tableName);\n//\t\t\t\t\t}\n//\t\t\t\t} catch (SQLException e1) {\n//\t\t\t\t\te1.printStackTrace();\n//\t\t\t\t}\n//\t\t\t\tresult.put(convertColumnLabelToColumnName(columnLabel, resultSetInformation), value != null ? value.toString() : null);\n//\t\t\t}\n//\n//\t\t\t@Override\n//\t\t\tpublic void onAfterResultSetNext(ResultSetInformation resultSetInformation, long timeElapsedNanos, boolean hasNext, SQLException e) {\n//\t\t\t\tif (!result.isEmpty()) {\n//\t\t\t\t\tMap<String, String> resultCopy = new TreeMap<String, String>();\n//\t\t\t\t\tresultCopy.putAll(result);\n//\t\t\t\t\tresults.add(resultCopy);\n//\t\t\t\t\tresult.clear();\n//\t\t\t\t}\n//\t\t\t}\n//\n//\t\t\t@Override\n//\t\t\tpublic void onAfterCommit(ConnectionInformation connectionInformation, long timeElapsedNanos, SQLException e) {\n//\t\t\t\tSpan newSpan = tracer.currentSpan();\n//\t\t\t\ttry (Tracer.SpanInScope ws = tracer.withSpanInScope(newSpan.start())) {\n//\t\t\t\t\tnewSpan.tag("Query results", processResults(results));\n//\t\t\t\t} finally {\n//\t\t\t\t\tnewSpan.finish();\n//\t\t\t\t}\n//\t\t\t\tSystem.out.println("Query results: " + processResults(results));\n//\t\t\t\tresults.clear();\n//\t\t\t}\n//\n//\t\t\tpublic String processResults(List<Map<String, String>> results) {\n//\t\t\t\tString tableName = null, resultAsString = "";\n//\t\t\t\tif (results.size() == 0) {\n//\t\t\t\t\treturn "[]";\n//\t\t\t\t}\n//\n//\t\t\t\tCollections.sort(results, new Comparator<Map<String, String>>() {\n//\t\t\t\t\t@Override\n//\t\t\t\t\tpublic int compare(Map<String, String> result1, Map<String, String> result2) {\n//\t\t\t\t\t\tString tableName1 = result1.get("tableName");\n//\t\t\t\t\t\tif (tableName1 == null) {\n//\t\t\t\t\t\t\t// CS: I don\'t know this code; but sometimes it enters here and would give a NPE\n//\t\t\t\t\t\t\t// I think the issue is deeper; because when this happens, the error persist; so\n//\t\t\t\t\t\t\t// the system is in a dubious state. To be investigated.\n//\t\t\t\t\t\t\treturn -1;\n//\t\t\t\t\t\t}\n//\t\t\t\t\t\treturn tableName1.compareTo(result2.get("tableName"));\n//\t\t\t\t\t}\n//\t\t\t\t});\n//\n//\t\t\t\tfor (int i = 0; i < results.size(); i++) {\n//\t\t\t\t\tMap<String, String> result = results.get(i);\n//\n//\t\t\t\t\tString currentTableName = result.get("tableName");\n//\t\t\t\t\tif (currentTableName != "") {\n//\t\t\t\t\t\t// currentTableName can be empty when the query looks like "SELECT COUNT..."\n//\t\t\t\t\t\t// in this case, the table name can not be retrieved from ResultSetMetaData, but this query and its result can be seen on zipkin\n//\t\t\t\t\t\tif (currentTableName != tableName) {\n//\t\t\t\t\t\t\ttableName = currentTableName;\n//\t\t\t\t\t\t\tresultAsString += (i != 0 ? "\\n" : "") + "// " + currentTableName + "\\n " + "[";\n//\t\t\t\t\t\t}\n//\t\t\t\t\t\tresultAsString += result.toString() + (i == results.size() - 1 || (i + 1 < results.size() && results.get(i + 1).get("tableName") != currentTableName) ? "]" : ", \\n");\n//\t\t\t\t\t}\n//\t\t\t\t}\n//\t\t\t\treturn resultAsString;\n//\t\t\t}\n//\n//\t\t\tpublic String convertColumnLabelToColumnName(String columnLabel, ResultSetInformation resultSetInformation) {\n//\t\t\t\ttry {\n//\t\t\t\t\tResultSetMetaData metaData = resultSetInformation.getResultSet().getMetaData();\n//\t\t\t\t\tfor (int i = 1; i <= metaData.getColumnCount(); i++) {\n//\t\t\t\t\t\tif (metaData.getColumnLabel(i).toUpperCase().equals(columnLabel.toUpperCase())) {\n//\t\t\t\t\t\t\treturn metaData.getColumnName(i).toLowerCase();\n//\t\t\t\t\t\t}\n//\t\t\t\t\t}\n//\t\t\t\t} catch (SQLException e) {\n//\t\t\t\t\te.printStackTrace();\n//\t\t\t\t}\n//\t\t\t\treturn columnLabel;\n//\t\t\t}\n//\t\t};\n//\t}\n\t\n// TODO CS/UCS: cand va merge treaba, sa incercam ceva de genul:\n// deci ea ar crea bean-uri dinamic; \n//\t@Bean\n//\tpublic SettingsService settingsService() {\n//\t\treturn new SettingsService(CreateDailyTasksSettings.class, ...);\n//\t}\n\t\n\t// #region demo-mode-bean\n\t@Bean\n\t@Profile(JHipsterConstants.SPRING_PROFILE_TEST)\n\tpublic DemoModeServiceLeaveManagement demoModeService() {\n\t\treturn new DemoModeServiceLeaveManagement();\n\t}\n\t// #endregion\n}\n',path:"leave-management/leave-management-server/src/main/java/com/crispico/leave_management/LeaveManagementApp.java"}},24654:()=>{}}]);