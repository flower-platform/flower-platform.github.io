"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3412],{39234:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>n,metadata:()=>s,toc:()=>d});var a=i(85893),r=i(11151);const n={},o="[WIP] Expression needed for action or test is ugly? Consider refactoring for improved testability",s={id:"featurebook/recipes-wip/refactor-for-testability",title:"[WIP] Expression needed for action or test is ugly? Consider refactoring for improved testability",description:"Indemn ca atunci cand e greu de scris o linie, sa se faca gandire/discutie daca nu merita modificat componentul testat pt ameliorare testabilitate",source:"@site/docs/featurebook/recipes-wip/refactor-for-testability.md",sourceDirName:"featurebook/recipes-wip",slug:"/featurebook/recipes-wip/refactor-for-testability",permalink:"/docusaurus/docs/featurebook/recipes-wip/refactor-for-testability",draft:!1,unlisted:!1,editUrl:"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/blob/master/docusaurus/docs/featurebook/recipes-wip/refactor-for-testability.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:'[WIP / waiting a concrete case] "Locking" test data',permalink:"/docusaurus/docs/featurebook/recipes-wip/locking-test-data"},next:{title:"[Waiting to mature] Referencing steps",permalink:"/docusaurus/docs/featurebook/recipes-wip/referencing-steps"}},c={},d=[];function l(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"wip-expression-needed-for-action-or-test-is-ugly-consider-refactoring-for-improved-testability",children:"[WIP] Expression needed for action or test is ugly? Consider refactoring for improved testability"}),"\n",(0,a.jsx)(t.p,{children:"Indemn ca atunci cand e greu de scris o linie, sa se faca gandire/discutie daca nu merita modificat componentul testat pt ameliorare testabilitate"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'await tad.assertWaitable.notInclude(Array.from(await (await tad.withinCapturing(organizationTreeLeftBarContainer).findByTestId("tree")).children).map(item => item.textContent!).sort((a, b) => a.localeCompare(b)).join(", "), "Tree_item_" + NO_ORGANIZATION.key);\n'})}),"\n",(0,a.jsx)(t.p,{children:'Poate daca am fi facut in tree o functie care sa returneze deja sortat (sau alte chestii). Or in other cases insert additional "data-testid"s, etc.'}),"\n",(0,a.jsx)(t.p,{children:"UPDATE: for the above case & similar, we manage to simplify the testing code w/o needing API from the components:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'await tad.assertWaitable.notIncludeOrderedMembers((await tad.screenCapturing.findAllByTestId(/Tree_item_.*/)).map(item => item.textContent), ["Tree_item_" + NO_ORGANIZATION.key]);\n// additionally removed another one long & ugly line\n\nawait tad.assertWaitable.sameMembers((await tad.screenCapturing.findAllByTestId(/Tree_item_.*/)).map(item => item.textContent), treeOrgs);\n// additionally removed another 2 long & ugly lines; so an even bigger victory!\n'})}),"\n",(0,a.jsx)(t.p,{children:"However, I feel that there may be cases where a small change will be needed in the components, in order to improve testability a lot. We stand by and wait for such cases."})]})}function u(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},11151:(e,t,i)=>{i.d(t,{Z:()=>s,a:()=>o});var a=i(67294);const r={},n=a.createContext(r);function o(e){const t=a.useContext(n);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(n.Provider,{value:t},e.children)}}}]);