(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2645],{64381:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>C,contentTitle:()=>A,default:()=>H,frontMatter:()=>N,metadata:()=>I,toc:()=>W});var s=n(85893),i=n(11151),o=n(93598),r=n(67294),a=n(86010),l=n(12466),d=n(16550),c=n(20469),h=n(91980),u=n(67392),m=n(50012);function p(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function g(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return p(e).map((e=>{let{props:{value:t,label:n,attributes:s,default:i}}=e;return{value:t,label:n,attributes:s,default:i}}))}(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function x(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const s=(0,d.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,h._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(s.location.search);t.set(i,e),s.replace({...s.location,search:t.toString()})}),[i,s])]}function j(e){const{defaultValue:t,queryString:n=!1,groupId:s}=e,i=g(e),[o,a]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!x({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const s=n.find((e=>e.default))??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:t,tabValues:i}))),[l,d]=f({queryString:n,groupId:s}),[h,u]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[s,i]=(0,m.Nk)(n);return[s,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:s}),p=(()=>{const e=l??h;return x({value:e,tabValues:i})?e:null})();(0,c.Z)((()=>{p&&a(p)}),[p]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!x({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);a(e),d(e),u(e)}),[d,u,i]),tabValues:i}}var b=n(72389);const w={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function T(e){let{className:t,block:n,selectedValue:i,selectValue:o,tabValues:r}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),h=e=>{const t=e.currentTarget,n=d.indexOf(t),s=r[n].value;s!==i&&(c(t),o(s))},u=e=>{let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return(0,s.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},t),children:r.map((e=>{let{value:t,label:n,attributes:o}=e;return(0,s.jsx)("li",{role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,ref:e=>d.push(e),onKeyDown:u,onClick:h,...o,className:(0,a.Z)("tabs__item",w.tabItem,o?.className,{"tabs__item--active":i===t}),children:n??t},t)}))})}function y(e){let{lazy:t,children:n,selectedValue:i}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===i));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,s.jsx)("div",{className:"margin-top--md",children:o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==i})))})}function v(e){const t=j(e);return(0,s.jsxs)("div",{className:(0,a.Z)("tabs-container",w.tabList),children:[(0,s.jsx)(T,{...e,...t}),(0,s.jsx)(y,{...e,...t})]})}function k(e){const t=(0,b.Z)();return(0,s.jsx)(v,{...e,children:p(e.children)},String(t))}const D={tabItem:"tabItem_Ymn6"};function E(e){let{children:t,hidden:n,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.Z)(D.tabItem,i),hidden:n,children:t})}const N={description:"The recommended workflow for using Tests Are Demo",sidebar_position:20},A="Tutorial",I={id:"tests-are-demo/old/tutorial",title:"Tutorial",description:"The recommended workflow for using Tests Are Demo",source:"@site/docs/tests-are-demo/old/tutorial.md",sourceDirName:"tests-are-demo/old",slug:"/tests-are-demo/old/tutorial",permalink:"/docusaurus/docs/tests-are-demo/old/tutorial",draft:!1,unlisted:!1,editUrl:"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/blob/master/docusaurus/docs/tests-are-demo/old/tutorial.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{description:"The recommended workflow for using Tests Are Demo",sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"Demo",permalink:"/docusaurus/docs/tests-are-demo/demo"},next:{title:'"Cheating", a reasonable compromise for hard to test cases',permalink:"/docusaurus/docs/tests-are-demo/old/cheat"}},C={},W=[{value:"Demo project",id:"demo-project",level:2},{value:"Create and run an empty scenario (test)",id:"create-and-run-an-empty-scenario-test",level:2},{value:"Create ...TestsAreDemo.tsx",id:"create-testsaredemotsx",level:3},{value:"Add (register) ...TestsAreDemo.tsx",id:"add-register-testsaredemotsx",level:3},{value:"Run",id:"run",level:3},{value:"Define the scenarios",id:"define-the-scenarios",level:2},{value:"Implement the first scenario",id:"implement-the-first-scenario",level:2},{value:"BDD style",id:"bdd-style",level:3},{value:"Flow: select, perform action, select, verify result",id:"flow-select-perform-action-select-verify-result",level:3},{value:"Add <code>data-testid</code> (if not existing)",id:"add-data-testid-if-not-existing",level:3},{value:"Select DOM element + perform action (copy/paste/adapt code snippet)",id:"select-dom-element--perform-action-copypasteadapt-code-snippet",level:3},{value:"Run. The &quot;demo&quot; mode works by intercepting function calls",id:"run-the-demo-mode-works-by-intercepting-function-calls",level:3},{value:"Select DOM element + verify (again, via snippet)",id:"select-dom-element--verify-again-via-snippet",level:3},{value:"Repeat until scenario is finished",id:"repeat-until-scenario-is-finished",level:3},{value:"Polish the demo for the end user",id:"polish-the-demo-for-the-end-user",level:3},{value:"Tips for implementing the remaining scenarios",id:"tips-for-implementing-the-remaining-scenarios",level:2},{value:"Linking scenarios",id:"linking-scenarios",level:3}];function S(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"tutorial",children:"Tutorial"}),"\n",(0,s.jsx)(t.h2,{id:"demo-project",children:"Demo project"}),"\n",(0,s.jsx)(t.p,{children:"For this tutorial, we developed:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(o.lj,{children:"foundation-react/packages/tests-are-demo/src/app/todos/Todos.tsx"}),", a component that is managing things to do. Quite a classical pattern for demo apps \ud83d\ude42."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(o.lj,{children:"foundation-react/packages/tests-are-demo/src/app/todos/TodosTestsAreDemo.tsx"}),", which contains the corresponding tests, using the Tests Are Demo library."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"Todos.tsx"})," looks like this:"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(43717).Z+"",width:"760",height:"611"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"TodosTestsAreDemo.tsx"}),' (rather the "demo" part from TestsAre',(0,s.jsx)(t.strong,{children:"Demo"}),") looks like this:"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(89998).Z+"",width:"804",height:"872"})}),"\n",(0,s.jsx)(t.h2,{id:"create-and-run-an-empty-scenario-test",children:"Create and run an empty scenario (test)"}),"\n",(0,s.jsx)(t.h3,{id:"create-testsaredemotsx",children:"Create ...TestsAreDemo.tsx"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="TodosTestsAreDemo.tsx"',children:'import { render } from "@famiprog-foundation/tests-are-demo";\nimport { tad } from "@famiprog-foundation/tests-are-demo";\n\nexport class TodosTestsAreDemo {\n\n    async before() {\n        render(<Todos />);\n        await tad.waitForCommunicationFinished();\n    }\n\n    @Scenario("Hello world")\n    async helloWorld() {\n        console.log("Hello world");\n    }\n}\n'})}),"\n",(0,s.jsxs)(t.admonition,{title:"Naming convention",type:"tip",children:[(0,s.jsxs)(t.p,{children:["For file ",(0,s.jsx)(t.code,{children:"MyComponent.tsx"}),","]}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["containing: ",(0,s.jsx)(t.code,{children:"class MyComponent { ... }"})]}),"\n",(0,s.jsxs)(t.li,{children:["or: ",(0,s.jsx)(t.code,{children:"export const MyComponent = (...) => { ... }"})]}),"\n",(0,s.jsx)(t.li,{children:"and: maybe other secondary/internal components"}),"\n"]}),(0,s.jsxs)(t.p,{children:["=> ",(0,s.jsx)(t.code,{children:"MyComponentTestsAreDemo.tsx"}),"."]})]}),"\n",(0,s.jsx)(t.admonition,{title:"temp",type:"caution",children:(0,s.jsxs)(t.p,{children:["We currently use the ",(0,s.jsx)(t.code,{children:"render()"})," exported by Tests Are Demo. We will find a way to let people use the original ",(0,s.jsx)(t.code,{children:"render()"}),", or one customized by themselves."]})}),"\n",(0,s.jsx)(t.h3,{id:"add-register-testsaredemotsx",children:"Add (register) ...TestsAreDemo.tsx"}),"\n",(0,s.jsxs)(t.p,{children:["Let the lib know about it, in ",(0,s.jsx)(o.lj,{children:"foundation-react/packages/tests-are-demo/src/app/appTests.ts"}),". E.g.:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="appTests.ts"',children:"tad.addTests(\n    // EmployeeDashboardTestsAreDemo,\n    // EmployeeDashboardNoDecoratorsTestsAreDemo,\n    TodosTestsAreDemo\n);\n"})}),"\n",(0,s.jsx)(t.admonition,{title:"Temp",type:"caution",children:(0,s.jsxs)(t.p,{children:["The UI doesn't allow yet selecting only one test. Comment the other tests, while working on ",(0,s.jsx)(t.code,{children:"TodosTestsAreDemo"}),". Don't forget to uncomment before commit."]})}),"\n",(0,s.jsx)(t.h3,{id:"run",children:"Run"}),"\n",(0,s.jsxs)(t.p,{children:["Go to your usual URL, e.g. ",(0,s.jsx)(t.a,{href:"http://localhost:3000?TestsAreDemo",children:"http://localhost:3000?TestsAreDemo"}),". Notice the ",(0,s.jsx)(t.code,{children:"?TestsAreDemo"}),". The ",(0,s.jsx)(t.code,{children:"Todos"})," component should render, and you should see in the console ",(0,s.jsx)(t.em,{children:"Hello world"})," printed."]}),"\n",(0,s.jsx)(t.h2,{id:"define-the-scenarios",children:"Define the scenarios"}),"\n",(0,s.jsxs)(t.p,{children:["A very good intellectual exercise is to define the scenarios that we want to implement, ",(0,s.jsx)(t.strong,{children:"before"})," doing the actual implementation. This adds structure to our thinking, and defines clearly our development road map."]}),"\n",(0,s.jsx)(t.p,{children:"At this stage, the scenarios are empty functions. A scenario == a test == a feature."}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:['We noticed in practice that this technique: "think about the scenarios before writing the code" has as side effect the creation of a mental structure of the code. This may also include quite soon, the identification of the sub components to use. E.g. check / uncheck a Todo => checkboxes => we need a renderer for each Todo => let\'s name it ',(0,s.jsx)(t.code,{children:"TodoItem"}),"."]})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="TodosTestsAreDemo.tsx"',children:'export class TodosTestsAreDemo {\n    ...\n    @Comment("Todos (func comp)")\n    @Scenario("SCREEN Todos")\n    async screenTodos() {\n    }\n\n    @Scenario("WHEN click on Add, THEN the form opens")\n    async whenAddThenForm() {\n    }\n\n    ...\n    \n    // highlight-start\n    @Comment("TodoItem (func comp)")\n    @Scenario("WHEN click on checkbox or label, THEN toggle \'done\'")\n    async whenCheckbox() {\n    }\n    // highlight-end\n    \n    ...\n    \n    @Scenario("WHEN click on DELETE, THEN confirm, AND WHEN \'yes\', THEN the Todo is removed")\n    async whenDelete() {\n        // highlight-start\n        // DRAFT: click on del, verify alert open, click no, verify record still there, \n        // click again on del, click yes, verify the record is not there\n        // highlight-end\n    }\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Explanation (",(0,s.jsx)(t.em,{children:"click on tabs"}),"):"]}),"\n",(0,s.jsxs)(k,{children:[(0,s.jsxs)(E,{value:"scen",label:"@Scenario",default:!0,children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'export class TodosTestsAreDemo {\n    ...\n    @Comment("TodoItem (func comp)")\n    // highlight-start\n    @Scenario("WHEN click on checkbox or label, THEN toggle \'done\'")\n    async whenCheckbox() {\n    // highlight-end\n    }\n    ...\n}\n'})}),(0,s.jsxs)(t.p,{children:["Adding the ",(0,s.jsx)(t.code,{children:"@Scenario"}),' annotation, makes the function being a "runnable test". It\'s the equivalent of:']}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'    it("WHEN click ...", () => { ... } )\n'})}),(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.em,{children:"title"})," of the scenario (i.e. the ",(0,s.jsx)(t.code,{children:"..."})," from ",(0,s.jsx)(t.code,{children:"@Scenario(...)"}),') uses the BDD "syntax". The ',(0,s.jsx)(t.em,{children:"function name"})," is kind of abbreviation (but very short) of the scenario title."]})]}),(0,s.jsxs)(E,{value:"draft",label:"Draft content (for some scenarios)",children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"export class TodosTestsAreDemo {\n\n    ...\n\n    @Scenario(\"WHEN click on DELETE, THEN confirm, AND WHEN 'yes', THEN the Todo is removed\")\n    async whenDelete() {\n        // highlight-start\n        // DRAFT: click on del, verify alert open, click no, verify record still there, \n        // click again on del, click yes, verify the record is not there\n        // highlight-end\n    }\n\n    ...\n}\n"})}),(0,s.jsx)(t.p,{children:"For a lot of scenarios, the title (almost) fully describes the feature. But there are scenarios that contain\nsmall (and important) details. In this case, we write them down in a comment/draft, to avoid forgetting them. Once we do the\nimplementation + test, we'll delete this comment/draft, because the small (and important) details will be visible in the test."}),(0,s.jsxs)(t.p,{children:["Let's look at the example above. We have a confirmation/alert of type \"Do you really want to delete?\". It's obvious that if we click on no,\nnothing should happen, and the alert should close. So we ",(0,s.jsx)(t.strong,{children:"don't want to pollute"})," the scenario title with such a detail. But ",(0,s.jsx)(t.strong,{children:"testing"})," (and implementing)\nthe detail is important."]}),(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["One would be amazed how often we saw regressions related to (more or less) similar things. And believe us, an user will get really mad if e.g. he/she spends say 15 minutes\nin an editor, and then hits by mistake ",(0,s.jsx)(t.code,{children:"F5"})," or ",(0,s.jsx)(t.code,{children:"Back"}),', and the dev forgot to implement a "leave page" handler + alert.']})})]}),(0,s.jsxs)(E,{value:"comment",label:"@Comment",children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'export class TodosTestsAreDemo {\n\n    ...\n    \n    // highlight-next-line\n    @Comment("Todos (func comp)")\n    @Scenario("SCREEN Todos")\n    async screenTodos() {\n    }\n\n    ...\n    \n    // highlight-next-line\n    @Comment("TodoItem (func comp)")\n    @Scenario("WHEN click on checkbox or label, THEN toggle \'done\'")\n    async whenCheckbox() {\n    }\n\n    ...\n}\n'})}),(0,s.jsxs)(t.p,{children:["Use ",(0,s.jsx)(t.code,{children:"@Comment(...)"})," for comments that you want to ",(0,s.jsx)(t.strong,{children:"see in the UI"}),". For example we used them here to kind of group the scenarios per component. Don't forget that JS supports multi line comments w/ backticks: ",(0,s.jsx)(t.code,{children:"`...`"}),"."]}),(0,s.jsxs)(t.p,{children:["One of the next pages ",(0,s.jsx)(t.strong,{children:"[TODO: add the link when we add the page]"}),' discusses the "strategic" importance of this annotation, especially during the transition (within an existing project) between the "old" mode and the "new" / Tests Are Demo mode.']})]})]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"implement-the-first-scenario",children:"Implement the first scenario"}),"\n",(0,s.jsx)(t.h3,{id:"bdd-style",children:"BDD style"}),"\n",(0,s.jsxs)(t.p,{children:["We like ",(0,s.jsx)(t.strong,{children:"BDD"})," (behavior driven development) which is a type of TDD (test driven development) or TFD (test first development). BDD and the ",(0,s.jsx)("span",{style:{color:"red"},children:"RED"}),"/",(0,s.jsx)("span",{style:{color:"green"},children:"GREEN"})," practice (cf.  Cucumber doc) is quite good for developing server code. E.g.: we write all the tests first (skeleton + implementation), we run test #1 => it fails (it's ",(0,s.jsx)("span",{style:{color:"red"},children:"RED"}),"), we implement, we run => test passes (it's ",(0,s.jsx)("span",{style:{color:"green"},children:"GREEN"}),"). And we iterate w/ test #2, #3 and so on. When all is ",(0,s.jsx)("span",{style:{color:"green"},children:"GREEN"})," => the job is done."]}),"\n",(0,s.jsx)(t.p,{children:"However we find that:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"This approach is not reasonable for UI development."}),"\n",(0,s.jsx)(t.li,{children:"A good compromise is: the fact that we define the scenarios (only skeleton; no impl) before the code, and then for each scenario => we implement + test."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Back to our tutorial: so the scenarios were defined, and now we take them one by one and we implement + test them, cf. below."}),"\n",(0,s.jsx)(t.p,{children:'We\'ll focus on the "delete" scenario. The implementation is straight forward: a "Delete" button on each line/todo. On click => an alert asking for confirmation. On confirm => the corresponding element is removed from the list.'}),"\n",(0,s.jsx)(t.h3,{id:"flow-select-perform-action-select-verify-result",children:"Flow: select, perform action, select, verify result"}),"\n",(0,s.jsx)(t.p,{children:"A test is basically a repetition of these operations:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Step 1, ",(0,s.jsx)(t.strong,{children:"select a DOM element"}),". We use ",(0,s.jsx)(t.a,{href:"https://testing-library.com/docs/react-testing-library/intro",children:"React Testing Library"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Step 2, ",(0,s.jsx)(t.strong,{children:"perform an action"})," (on it). We use  ",(0,s.jsx)(t.a,{href:"https://testing-library.com/docs/user-event/intro",children:"user-event"})," (related to React Testing Library)."]}),"\n",(0,s.jsxs)(t.li,{children:["Step 3, ",(0,s.jsx)(t.strong,{children:"select another DOM element"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Step 4, ",(0,s.jsx)(t.strong,{children:"verify something"})," (on it)."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["We use ",(0,s.jsx)(t.a,{href:"https://mochajs.org/",children:"Mocha"})," as the underlying framework. At the time of writing it's the only runner that has an implementation for the browser, which we need for the ",(0,s.jsx)(t.em,{children:"demo"})," part."]}),"\n",(0,s.jsxs)(t.p,{children:["For the ",(0,s.jsx)(t.em,{children:"demo"}),' part, Tests Are Demo intercepts/wraps the 3 categories of functions (select DOM element, perform action, verify). When selecting a DOM element, Tests Are Demo captures/remembers it. When performing an action or verification, Tests Are Demo will show a spotlight and a popup (focused around the captured element) and will wait for the user clicking on "Next" step.']}),"\n",(0,s.jsxs)(t.h3,{id:"add-data-testid-if-not-existing",children:["Add ",(0,s.jsx)(t.code,{children:"data-testid"})," (if not existing)"]}),"\n",(0,s.jsxs)(t.p,{children:["There are multiple ways to select a DOM element. We recommend adding ",(0,s.jsx)(t.code,{children:"data-testid"}),"s to components, and use them as selection criteria."]}),"\n",(0,s.jsxs)(t.p,{children:["React Testing Library currently recommends avoiding to (over)use the ",(0,s.jsx)(t.code,{children:"data-testid"})," attribute for selecting DOM elements. Our experience has taught us the contrary."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",metastring:'title="Todos.tsx"',children:'export const todosTestids = createTestids("Todos", {\n    ...\n    // highlight-next-line\n    todoItem: "", todoItemCheckbox: "", todoItemCheckboxLabel: "",\n    ...\n    // TodoItem\n    // highlight-start\n    up: "", down: "", edit: "", delete: "",\n    deleteYes: "", deleteNo: "",\n    // highlight-end\n    ...\n});\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",metastring:'title="Todos.tsx"',children:'const TodoItem = ({ todo, ...props }: TodoItemProps) => {\n    ...\n    // highlight-next-line\n    return (<Segment data-testid={todosTestids.todoItem + "_" + props.index} onDoubleClick={props.onEdit} ...>\n        ...\n        <div>\n            ...\n            // highlight-next-line\n            <Button data-testid={todosTestids.delete} onClick={() => setModalOpen(true)} basic icon="delete" color="red" content="Delete" />\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["At runtime, ",(0,s.jsx)(t.code,{children:"todosTestids.delete"})," == ",(0,s.jsx)(t.code,{children:'"Todos_delete"'}),". We use ",(0,s.jsx)(t.code,{children:"todosTestids.delete"}),", to have type checking and autocomplete. This way:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["we cannot misspell (e.g. ",(0,s.jsx)(t.code,{children:"Todos_delete"})," vs ",(0,s.jsx)(t.code,{children:"Todos_delte"}),"); misspelling would be eventually discovered anyway (because the test wouldn't pass), but w/ additional cost;"]}),"\n",(0,s.jsx)(t.li,{children:"we have traceability from the implementation <-> test (via CTRL + click). This is a helpful feature \ud83d\ude09."}),"\n"]}),"\n",(0,s.jsx)(t.admonition,{title:"For uniformity",type:"caution",children:(0,s.jsxs)(t.p,{children:["Always keep ",(0,s.jsx)(t.code,{children:"data-testid"})," as the first property of a component. And BTW, did you notice that, for ",(0,s.jsx)(t.code,{children:"todosTestids"}),", we grouped (+ commented) the testids by component? And arranged the fields in sort of a space saving manner?"]})}),"\n",(0,s.jsx)(t.h3,{id:"select-dom-element--perform-action-copypasteadapt-code-snippet",children:"Select DOM element + perform action (copy/paste/adapt code snippet)"}),"\n",(0,s.jsxs)(t.p,{children:["Now that the ",(0,s.jsx)(t.code,{children:"data-testid"}),"s are there, we need to write code that uses them. Tests Are Demo UI has a handy helper feature: the ",(0,s.jsx)(t.code,{children:"Inspect testid"})," button:"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(31024).Z+"",width:"1382",height:"260"})}),"\n",(0,s.jsx)(t.p,{children:"And then:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(70382).Z+"",width:"1255",height:"219"})}),"\n",(0,s.jsx)(t.p,{children:"The snippet is in the clipboard and we paste it within the test."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="TodosTestsAreDemo.tsx"',children:'@Scenario("WHEN click on DELETE, THEN confirm, AND WHEN \'yes\', THEN the Todo is removed")\nasync whenDelete() {\n    let item = tad.screenCapturing.getByTestId(testids.todoItem + "_0");\n    await tad.userEventWaitable.click(tad.withinCapturing(item).getByTestId(testids.delete));\n'})}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:'In this case, we used the pasted the code snippet "as is". No modifications/adaptations were needed, which is rather rare. Normally a bit of adaptation is needed to the pasted snippet. So please consider this copy/paste workflow as an aid, not a bullet proof mechanism!'})}),"\n",(0,s.jsxs)(t.admonition,{type:"info",children:[(0,s.jsxs)(t.p,{children:["1/ in ",(0,s.jsx)(t.code,{children:"Todos.tsx"})," we have ",(0,s.jsx)(t.code,{children:"todosTestids"}),". 2/ here, in ",(0,s.jsx)(t.code,{children:"TodosTestsAreDemo.tsx"})," we have ",(0,s.jsx)(t.code,{children:"testids"}),". Hence we rename the import:"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="TestsAreDemo.tsx"',children:'import { ..., todosTestids as testids } from "./Todos";\n'})}),(0,s.jsx)(t.p,{children:'1/ is so, so that we don\'t pollute the content assist (e.g. type "testids" => tons of proposals). 2/ is so, for easier snippet genaration.'})]}),"\n",(0,s.jsx)(t.h3,{id:"run-the-demo-mode-works-by-intercepting-function-calls",children:'Run. The "demo" mode works by intercepting function calls'}),"\n",(0,s.jsxs)(t.p,{children:["After running the test (w/ the option ",(0,s.jsx)(t.strong,{children:'"Step by step" = ON'})," [default]), we have this result:"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(79967).Z+"",width:"801",height:"210"})}),"\n",(0,s.jsx)(t.p,{children:'Let\'s explain what is happening. We compare Tests Are Demo code with "plain" React Testing Library code. For the selection of the DOM element:'}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'// 1/ Tests Are Demo code\nlet item = tad.screenCapturing.getByTestId(testids.todoItem + "_0");\n// 2/ normal React Testing Library code\nlet item = screen.getByTestId(testids.todoItem + "_0");\n'})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"tad.screenCapturing().getByTestId()"})," (from 1/) is a wrapper around ",(0,s.jsx)(t.code,{children:"screen.getByTestId()"}),' (from 2/). 1/ calls 2/. All the wrapped functions behave identically, except that they capture and remember the DOM element that was selected. Hence the suffix "Capturing". We grouped all TAD functions into ',(0,s.jsx)(t.code,{children:"tad"}),', to make our lib "content assist" friendly. I.e. type ',(0,s.jsx)(t.code,{children:"tad."})," and see what are the available functions, w/o needing to go to the doc."]}),"\n",(0,s.jsxs)(t.p,{children:["To perform an action, ",(0,s.jsx)(t.code,{children:"tad.userEventWaitable()"})," (from 3/) is also a wrapper:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"// 3/ Tests Are Demo code\nawait tad.userEventWaitable.click(tad.withinCapturing(item).getByTestId(testids.delete));\n// 4/ normal React Testing Library code\nuserEvent.click(within(item).getByTestId(testids.delete));\n"})}),"\n",(0,s.jsxs)(t.p,{children:["3/ captures the action that will be performed (the function name, e.g. ",(0,s.jsx)(t.code,{children:"click"}),'), it displays a "spotlight" around the last captured element (e.g. the "Delete" button), it shows a popup saying "Will perform click", and then waits. When the user does something, e.g. click on "Next", then 4/ is called, and the test continues. Hence the suffix "Waitable" and the function being async. We chose this suffix so that people can remember that they also need to use ',(0,s.jsx)(t.code,{children:"await"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"select-dom-element--verify-again-via-snippet",children:"Select DOM element + verify (again, via snippet)"}),"\n",(0,s.jsx)(t.p,{children:"We apply the same process to obtain a snippet for verification:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="TodosTestsAreDemo.tsx"',children:'@Scenario("WHEN click on DELETE, THEN confirm, AND WHEN \'yes\', THEN the Todo is removed")\nasync whenDelete() {\n    let item = tad.screenCapturing.getByTestId(testids.todoItem + "_0");\n    await tad.userEventWaitable.click(tad.withinCapturing(item).getByTestId(testids.delete));\n\n    // highlight-start\n    await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.deleteNo));\n    tad.cc("The Todo wasn\'t deleted");\n    await tad.assertWaitable.equal(tad.withinCapturing(item).getByTestId(testids.todoItemCheckboxLabel).textContent, someTodos[0].text);\n    // highlight-end\n'})}),"\n",(0,s.jsx)(t.p,{children:"We have the result:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(25483).Z+"",width:"441",height:"275"})}),"\n",(0,s.jsxs)(t.p,{children:['We added a new "perform action" line, simulating clicking on "No" (in the alert that\'s opened after clicking on "Delete"). And then a ',(0,s.jsx)(t.strong,{children:'"verification"'})," line. Here we have the same interception mechanism, but applied this time to ",(0,s.jsx)(t.code,{children:"assert"})," from ",(0,s.jsx)(t.a,{href:"https://www.chaijs.com/",children:"Chai Assertion Library"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["If the first lines were quite readable, this particular verification line is not straight forward. Meaning that just by reading it, it's not clear what we want to achieve actually. Hence the need for a ",(0,s.jsx)(t.strong,{children:"comment"}),", i.e. ",(0,s.jsx)(t.code,{children:"tad.cc()"})," which is an alias for ",(0,s.jsx)(t.code,{children:"tad.currentComment()"}),". We use comments this way (instead of ",(0,s.jsx)(t.code,{children:"// this way"}),"), so that they can be displayed in the UI."]}),"\n",(0,s.jsx)(t.h3,{id:"repeat-until-scenario-is-finished",children:"Repeat until scenario is finished"}),"\n",(0,s.jsx)(t.p,{children:"To finish the test/scenario, we repeat the steps above. Let's recap them:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["add ",(0,s.jsx)(t.code,{children:"data-testid"})," (if needed),"]}),"\n",(0,s.jsxs)(t.li,{children:["copy/paste/adapt code for ",(0,s.jsx)(t.strong,{children:"performing actions"}),","]}),"\n",(0,s.jsxs)(t.li,{children:["copy/paste/adapt code for ",(0,s.jsx)(t.strong,{children:"verification"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:['We recommend keeping "Auto run after page load" = true (default). Probably you are running Tests Are Demo inside a toolchain (such as ',(0,s.jsx)(t.a,{href:"https://vitejs.dev/",children:"Vite"})," or ",(0,s.jsx)(t.a,{href:"https://create-react-app.dev/",children:"Create React App"}),") that has auto-refresh or hot module reload (HMR) enabled. Hence when you save, the browser will refresh and the test will run again. This is convenient."]})}),"\n",(0,s.jsx)(t.h3,{id:"polish-the-demo-for-the-end-user",children:"Polish the demo for the end user"}),"\n",(0,s.jsx)(t.p,{children:'The "slide show"/visual test steps are practically a demo of our component or app. They are meaningful for a dev that looks at the demo. And they are also (almost) meaningful for an end user. However, when presenting the demo to and user, a bit of additional polishing may be needed.'}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="TodosTest.tsx"',children:'@Scenario("WHEN click on DELETE, THEN confirm, AND WHEN \'yes\', THEN the Todo is removed")\nasync whenDelete() {\n    // highlight-next-line\n    tad.cc("A Todo may be deleted");\n\n    // highlight-next-line\n    tad.demoForEndUserHide();\n    let item = tad.screenCapturing.getByTestId(testids.todoItem + "_0");\n    await tad.userEventWaitable.click(tad.withinCapturing(item).getByTestId(testids.delete));\n\n    await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.deleteNo));\n    tad.cc("The Todo wasn\'t deleted");\n    await tad.assertWaitable.equal(tad.withinCapturing(item).getByTestId(testids.todoItemCheckboxLabel).textContent, someTodos[0].text);\n    // highlight-next-line\n    tad.demoForEndUserShow();\n\n    await tad.userEventWaitable.click(tad.withinCapturing(item).getByTestId(testids.delete));\n    await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.deleteYes));\n    // highlight-next-line\n    tad.cc("The Todo was deleted. So the second element (index 1) became element the first element (index 0)");\n    item = tad.screenCapturing.getByTestId(testids.todoItem + "_0");\n    await tad.assertWaitable.include(tad.withinCapturing(item).getByTestId(testids.todoItemCheckboxLabel).textContent, someTodos[1].text); // include instead of equals, because we appended something in a step above\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Some ways to polish:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"by adding additional comments. Such as providing some context or intro at the beginning of the scenario, or adding text to mark the transition from the previous scenario."}),"\n",(0,s.jsx)(t.li,{children:'by hiding steps which would bore the end user. E.g. here we don\'t want to show that we test clicking on the "No" button of the "Do you want to delete?" dialog.'}),"\n",(0,s.jsx)(t.li,{children:'by rephrasing a comment using a language suitable for the end user. E.g. here we used both "first element" (in "user language") and "index 0" (in dev language).'}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"tips-for-implementing-the-remaining-scenarios",children:"Tips for implementing the remaining scenarios"}),"\n",(0,s.jsxs)(t.admonition,{title:"temp",type:"caution",children:[(0,s.jsx)(t.p,{children:'We already explained that the UI doesn\'t allow selecting a "current" file. Hence during dev, we need to comment the other files.'}),(0,s.jsxs)(t.p,{children:["Regarding individual scenarios (tests), we have the ",(0,s.jsx)(t.code,{children:"@Only"})," annotation. If we annotate a certain function with it, in principle, only that scenario will run. This is inspired from Mocha's ",(0,s.jsx)(t.code,{children:"it.only(...)"}),"."]})]}),"\n",(0,s.jsx)(t.h3,{id:"linking-scenarios",children:"Linking scenarios"}),"\n",(0,s.jsx)(t.p,{children:"Let's look at this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",metastring:'title="TodosTestsAreDemo.tsx"',children:'@Scenario("WHEN click on Add, THEN the form opens")\n@ScenarioOptions({ linkWithNextScenario: true })\nasync whenAddThenForm() {\n    tad.cc("Let\'s add a new Todo");\n    await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.add));\n}\n\n@Scenario("FORM for a Todo; test #1")\nasync formTodo1() {\n    tad.cc("Please observe that this text field is already focused. So you can directly start typing, w/o needing to click here first");\n    const textbox = tad.withinCapturing(tad.screenCapturing.getByTestId(testids.inputText)).getByRole(\'textbox\');\n    ...\n'})}),"\n",(0,s.jsx)(t.p,{children:"Linking scenarios helps us write less code:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"whenAddThenForm()"})," doesn't have a verification part. The verification is practically done in the next scenario. If the form wouldn't open, the next scenario would fail while finding ",(0,s.jsx)(t.code,{children:"testids.inputText"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"formTodo1()"})," doesn't have a part that opens the form. Because this is done by the previous scenario."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:'The two scenarios are linked/dependent, and they "help" each other. And we wrote less code, compared to the case where the two scenarios are independent. Less code to achieve the same result is always good, but in particular in the "test business", where test clutter is a constant threat.'}),"\n",(0,s.jsxs)(t.p,{children:["When one scenario is ran individually (e.g. via ",(0,s.jsx)(t.code,{children:"@Only"})," or via UI), then the other is ran as well. Chaining more than 2 scenarios is also possible."]})]})}function H(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(S,{...e})}):S(e)}},93598:(e,t,n)=>{"use strict";n.d(t,{sS:()=>h,Tm:()=>u,M_:()=>m,Fb:()=>p,JR:()=>g,lj:()=>d,h8:()=>c});n(67294);class s{static now(){return new Date}static consoleLogJson(e,t){void 0===t&&(t=!0);const n=JSON.stringify(e,(()=>{const e=new WeakSet;return(t,n)=>{if(!t.startsWith("__react")){if("object"==typeof n&&null!==n){if(e.has(n))return;e.add(n)}return n}}})(),2);return t&&console.log(n),n}static substringAfter(e,t,n){const s=n?e.lastIndexOf(t):e.indexOf(t);return s<0?e:e.substring(s+t.length)}static setTimeoutPromise(e,t){return new Promise((n=>setTimeout((()=>{const t=e?.();n(t)}),t)))}}var i=n(9286),o=n(25142),r=n(73981),a=n(91262),l=n(85893);const d=e=>{return(0,l.jsx)(l.Fragment,{children:(0,l.jsxs)("a",{target:"_blank",href:(t=e.children,(t.startsWith("foundation/")?"https://gitlab.xops-online.com/foundation/foundation/-/tree/main/"+s.substringAfter(t,"foundation/"):"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/tree/master/"+t)+(e.lineNumbers?.[0]?`#L${e.lineNumbers[0]}`:"")+(e.lineNumbers?.[1]?`-L${e.lineNumbers[1]}`:"")),children:[s.substringAfter(e.children,"/",!0),e.region&&(0,l.jsxs)("small",{children:["\xa0",(0,l.jsxs)("i",{children:["(region ",e.region,",\xa0",e.lineNumbers[0]===e.lineNumbers[1]?(0,l.jsxs)(l.Fragment,{children:["at line ",e.lineNumbers[0]]}):(0,l.jsxs)(l.Fragment,{children:["between lines [",e.lineNumbers[0],", ",e.lineNumbers[1],"])"]})]})]})]})});var t},c=e=>(0,l.jsx)(o.Z,{circular:!0,color:"blue",children:e.s}),h=e=>{let{src:{text:t,path:n},region:s,...o}=e;const r=new RegExp(`#region\\s*${s}[^\\r\\n]*\\r?\\n(.*?)#endregion`,"s").exec(t);if(!r)throw new Error(`In file = ${n}, cannot find region = ${s}, i.e. a portion like:\n\n#region ${s}\n...\n#endregion`);let a,c=1,h=-1;for(a=0;a<r.index+r[0].length;a++)"\n"===t[a]&&c++,-1===h&&a>=r.index&&(h=c);h++,c--;let u=r[1];u=/(.*)(\r?\n.*?$)/gs.exec(u)[1],u="\n"+u;const m=u.match(/\n(\s)*\S/);let p;if(m&&(p=m[1])){const e=new RegExp(`\\n(${p}*)\\S`,"g");let t,n=-1;for(;null!==(t=e.exec(u));)(n<0||n>t[1].length)&&(n=t[1].length);const s=p.repeat(n);u=u.replace(new RegExp("\\n"+s,"g"),"\n")}return u=u.substring(1),(0,l.jsx)(l.Fragment,{children:(0,l.jsx)(i.Z,{title:(0,l.jsxs)(l.Fragment,{children:["Snippet extracted from ",(0,l.jsx)(d,{region:s,lineNumbers:[h,c],children:n})]}),...o,children:u})})},u=e=>(0,l.jsx)(h,{language:"java",...e}),m=e=>(0,l.jsx)(h,{language:"ts",...e}),p=e=>(0,l.jsx)(a.Z,{children:()=>(0,l.jsx)(r.J6,{recordedTestsUrl:"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/raw/master/leave-management/leave-management-react/public/recordedTests/recordedTest.json",includeCredentialsInJsonRequestRegex:/https:\/\/gitlab\.xops-online\.com\/*/,...e})}),g=e=>(0,l.jsx)(a.Z,{children:()=>(0,l.jsx)(r.J6,{recordedTestsUrl:"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/raw/master/leave-management/leave-management-react/public/recordedTestsServer/recordedTest.json",includeCredentialsInJsonRequestRegex:/https:\/\/gitlab\.xops-online\.com\/*/,...e})})},13411:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=13411,e.exports=t},89998:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});const s=n.p+"assets/images/anim-33b0f8dbbf4baf5127f85f483e40919f.gif"},79967:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});const s=n.p+"assets/images/del-click-d682acfbbc970ba43142ad1f03679b41.png"},31024:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});const s=n.p+"assets/images/inspect1-32edd4de97c7230dc4a1f62ae82abcbc.png"},70382:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});const s=n.p+"assets/images/inspect2-cc522bf72c254864b6599424562ef35d.png"},43717:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});const s=n.p+"assets/images/todos-16317d6bf7316ff60eb768bc8f67ee0e.png"},25483:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});const s=n.p+"assets/images/verify-not-deleted-8ed05663ea8ae42c3db53e158e5f3560.png"},24654:()=>{},62183:()=>{},13024:()=>{},62715:()=>{},13611:()=>{},28353:()=>{},1210:()=>{},43454:()=>{}}]);