"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[567],{14976:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var s=n(85893),r=n(11151);const o={sidebar_position:30},i="Writing scenarios",a={id:"feature-book/writing-scenarios",title:"Writing scenarios",description:"We used extensively Cucumber, and what they call Behavior-Driven-Development (BDD). I guess that what we are trying to do, is to achieve the goals that they are evangelizing, but with less work and more lever on various tools.",source:"@site/docs/feature-book/writing-scenarios.md",sourceDirName:"feature-book",slug:"/feature-book/writing-scenarios",permalink:"/docusaurus/docs/feature-book/writing-scenarios",draft:!1,unlisted:!1,editUrl:"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/blob/master/docusaurus/docs/feature-book/writing-scenarios.md",tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30},sidebar:"tutorialSidebar",previous:{title:"Use cases",permalink:"/docusaurus/docs/feature-book/use-cases"},next:{title:"[old] Tests Are Demo",permalink:"/docusaurus/docs/category/old-tests-are-demo"}},c={},d=[{value:"Shorthands",id:"shorthands",level:2},{value:"Difference to Cucumber",id:"difference-to-cucumber",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"writing-scenarios",children:"Writing scenarios"}),"\n",(0,s.jsxs)(t.p,{children:["We used extensively ",(0,s.jsx)(t.a,{href:"https://cucumber.io/",children:"Cucumber"}),", and what they call Behavior-Driven-Development (BDD). I guess that what we are trying to do, is to achieve the goals that they are evangelizing, but with less work and more lever on various tools."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'// In BDD, a scenario is a sequence of such statements:\nGIVEN some existing context/state, WHEN I perform action ..., THEN we should have the result/state ...\n\n// Rule of thumb to decide between GIVEN and WHEN:\n// GIVEN -> the code for this step will prepare some data (via mocking\n// or via copy into BD), in order to recreate a state that happens in practice\n// WHEN -> the code for this step will simulate an user action\n// NOTE: In many cases we have only WHEN + THEN; or sometimes also GIVEN + THEN\nGIVEN a paid invoice, THEN a green sticker labeled "PAID" appears in the top right corner\nWHEN click on UP, THEN the Todo slides up\n\n// We may use AND\nWHEN click on Delete, AND click on "yes, I confirm", THEN ...\n// Purists will say that tests should be super small. But in practice sometimes it\'s \n// easier to understand "the big picture" with 1 longer test (w/o exagerating), \n// compared to having 2 or more smaller ones. \nWHEN click on Delete, THEN alert appears, AND WHEN click on "yes, I confirm", THEN ...\n'})}),"\n",(0,s.jsx)(t.h2,{id:"shorthands",children:"Shorthands"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'// Shorthand for something like:\n// GIVEN a Todo w/ fields: name = "Buy bread", priority = "Urgent", index = "3",\n// WHEN the screen renders,\n// THEN the label for name = "Buy bread", priority = "Urgent" and colored in red, ...\n\n// We notice that it\'s awkward to use GIVEN, WHEN, THEN in this case. But this is a feature\n// which needs to be tested as well. Hence we introduce such new key words/shorthands.\n\n// It\'s subjective for what (and if at all!) we use RENDERER.\n// A RENDERER is usually linked to a model element (e.g. "bigger", like an entity/DB table, or \n// "smaller", like something used client side only). \nRENDERER for a Todo\n\n// Similar to RENDERER. But bigger. In fact so big that it takes an entire screen / route :)\n// Usually such scenarios have a drawing/wire frame attached. We shouldn\'t try to write in words\n// what is on the drawing. They will normally appear any way in the Tests Are Demo test.\nSCREEN for a dashboard of Todos\n\n// Similar to RENDERER, but each field can also be edited\nFORM for a Todo\n\n// Useful when our deliverable is a component and the user is a dev. The associated Tests Are Demo \n// test will show the various behaviors of this property. Often we talk about one or two WHEN/THENs.\n// But there are cases when there are more, and in various locations. E.g. WHEN render ..., WHEN create new ...,\n// GIVEN user has permission ..., WHEN ..., etc.\nPROPERTY showWeekends\n'})}),"\n",(0,s.jsx)(t.admonition,{title:"Convention for uniformity and readability",type:"caution",children:(0,s.jsxs)(t.p,{children:["Please respect the casing (e.g. ",(0,s.jsx)(t.code,{children:"WHEN"})," and not ",(0,s.jsx)(t.code,{children:"When"})," or ",(0,s.jsx)(t.code,{children:"when"}),"), and the comma (",(0,s.jsx)(t.code,{children:","}),") before the key words (e.g. ",(0,s.jsx)(t.code,{children:"... something, THEN something else"}),")."]})}),"\n",(0,s.jsx)(t.h2,{id:"difference-to-cucumber",children:"Difference to Cucumber"}),"\n",(0,s.jsx)(t.p,{children:"We still have hundreds of Cucumber files. Some examples:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'Feature: \n  Scenario: editContact(): Navigation to form\n    Given the renderer is given a Contact with id = 2\n    When the user clicks the edit contact button\n    Then navigation is attempted to "/properties_form/{id}" with id = "2"\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"Feature: \n  Scenario: onReveal(): Get all contacts\n    Given the DB contains the contacts\n      | name  | age | married | city      |\n      | john  |  30 | true    | Bucuresti |\n      | mary  |  16 | false   | Brasov    |\n      | johan |  20 | false   | Bucuresti |\n    And a mocked, mirroring ContactSorterComponent\n    And a mocked, mirroring SearcherComponent \n    When ContactListPage is revealed\n    Then the list has ContactRenderers displaying the following names\n      | john | mary | johan |\n    And the telescopic invocations were OK for ContactSorter and Searcher components\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The disadvantage is that there is a ",(0,s.jsx)(t.strong,{children:"lot of text"}),". And often it's copied/pasted between scenarios/steps w/ small modifications. The ",(0,s.jsx)(t.strong,{children:"attention span"})," of the reader is consumed after a couple of scenarios. And if there are errors hidden in the text, they are super easy to miss."]}),"\n",(0,s.jsx)(t.p,{children:"Feature Book offers a dual view: overview + detail. It splits a scenario in:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"the overview = the scenario title;"}),"\n",(0,s.jsx)(t.li,{children:"the detail = the Tests Are Demo test."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"In other words:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{}),(0,s.jsx)(t.th,{children:"Feature Book"}),(0,s.jsx)(t.th,{children:"Cucumber"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Size of a scenario"}),(0,s.jsx)(t.td,{children:"One line. We recommend not to overcome (maybe w/ exceptions) the width of a screen"}),(0,s.jsx)(t.td,{children:"Several / many lines"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"How detailed?"}),(0,s.jsx)(t.td,{children:'We are not precise. We express in a general way; e.g. "WHEN we create a Todo"'}),(0,s.jsx)(t.td,{children:'We need to be specific, e.g. "WHEN we create a Todo w/ name = Buy bread, priority = Urgent, ..."'})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"How exhaustive?"}),(0,s.jsx)(t.td,{children:"Our text doesn't cover all the details"}),(0,s.jsx)(t.td,{children:"Each scenario specifies/tests all the details"})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>i});var s=n(67294);const r={},o=s.createContext(r);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);