"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7501],{32495:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>u,toc:()=>l});var r=n(85893),i=n(11151);const o={text:'package com.crispico.foundation.server.spring;\r\n\r\nimport java.util.Optional;\r\n\r\nimport javax.inject.Inject;\r\n\r\nimport org.apache.commons.lang.BooleanUtils;\r\nimport org.apache.commons.lang.StringUtils;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\r\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\r\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\r\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\r\nimport org.springframework.context.ApplicationContext;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.core.annotation.Order;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r\nimport org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;\r\nimport org.springframework.security.web.header.writers.StaticHeadersWriter;\r\nimport org.springframework.security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter;\r\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\r\n\r\nimport com.crispico.foundation.server.FoundationProperties;\r\nimport com.crispico.foundation.server.ServerUtils;\r\nimport com.crispico.foundation.server.service.scheduledTaskService.IScheduledTaskBean;\r\nimport com.crispico.foundation.server.service.scheduledTaskService.ScheduledTaskBackendService;\r\nimport com.crispico.foundation.server.service.scheduledTaskService.ScheduledTaskBackendService.ScheduledTaskConfig;\r\nimport com.crispico.foundation.server.service.scheduledTaskService.ScheduledTaskBackendService.ScheduledTaskSettings;\r\nimport com.crispico.foundation.server.service.scheduledTaskService.ScheduledTaskBackendService.TriggerType;\r\nimport com.crispico.foundation.server.service.settingsEntityService.SettingsCache;\r\nimport com.crispico.foundation.server.service.userService.AuthService;\r\nimport com.crispico.foundation.server.service.userService.UserService;\r\nimport com.crispico.foundation.server.service.userService.auth.UsernameAuthenticationProvider;\r\nimport com.crispico.foundation.server.service.userService.auth.ldap.LdapAuthenticationChecker;\r\nimport com.crispico.foundation.server.service.userService.auth.ldap.LdapAuthenticationProvider;\r\nimport com.crispico.foundation.server.service.userService.auth.ldap.LdapServersProperties;\r\nimport com.crispico.foundation.server.service.userService.jwt.JWTConfigurer;\r\nimport com.crispico.foundation.server.service.userService.jwt.TokenProvider;\r\nimport com.crispico.gwt.server.rpc.IServiceProvider;\r\nimport com.crispico.gwt.server.rpc.RPCDispatcher;\r\nimport com.crispico.server.service.IUserConverter;\r\nimport com.crispico.shared.SharedGlobals;\r\nimport com.crispico.shared.SharedUtils;\r\n\r\n/**\r\n * Same as {@link AppConfigurer}, but for stuff more web related.\r\n * \r\n * @see AppConfigurer\r\n * \r\n * @author Cristian Spiescu\r\n */\r\n// TODO RM35922 de scos @Order; nu cred ca mai sta in picioare explicatia; caci va fi doar 1 instanta a ac clasei; \r\n// nu mai multe, ca inainte\r\n// i.e. the superclass already defines 100, which is occupied by the default SecurityConfiguration from JHipster\r\n// however the default SecurityConfiguration is not used any more, but let\'s keep it for a while\r\n@Order(200)\r\n// conf. name convention (https://docs.spring.io/spring-framework/docs/4.3.12.RELEASE/spring-framework-reference/htmlsingle/#beans-beanname)\r\n// the bean name start with lower case letter\r\n// #region class\r\n@Configuration\r\n@ConditionalOnMissingBean(name = "securityConfiguration")\r\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\r\n// #endregion\r\n    \r\n\tpublic static final String FOUNDATION_SECURITY_ENABLED_PROPERTY_NAME = "foundation.security.enabled";\r\n\tpublic static final String FOUNDATION_SECURITY_DISABLE_PERMISSION_CHECK = "foundation.security.permission-check.disabled";\r\n\tpublic static final String FOUNDATION_SECURITY_ENABLE_ONLY_LOGGEDIN = "foundation.security.only-loggedin";\r\n\tpublic static final String FOUNDATION_SECURITY_LDAP_PROPERTY_NAME = "foundation.security.ldap";\r\n\tpublic static final String FOUNDATION_SECURITY_LDAP_ENABLED_PROPERTY_NAME = FOUNDATION_SECURITY_LDAP_PROPERTY_NAME + ".enabled";\r\n\tpublic static final String FOUNDATION_SECURITY_LDAP_DEFAULT_ROLE_PROPERTY_NAME = FOUNDATION_SECURITY_LDAP_PROPERTY_NAME + ".default-role";\r\n\tpublic static final String OKTA_CLIENT_ID = "spring.security.oauth2.client.registration.okta.client-id";\r\n\tprotected static final String SCHEDULED_TASK_LOCK_OLD_USERS = "lockOldUsersTask";\r\n\t\r\n\t@Inject\r\n    private ApplicationContext applicationContext;\r\n    \r\n    @Value("${spring.application.name}")\r\n    private String appName;\r\n    \r\n    @Inject\r\n    private Optional<TokenProvider> tokenProvider;\r\n    \r\n    @Inject\r\n    private Optional<OktaAuthenticationSuccessHandler> oktaAuthenticationSuccessHandler;\r\n    \r\n    @Inject\r\n\tprotected FoundationProperties foundationProperties;\r\n    \r\n    @Inject\r\n\tprotected SettingsCache<ScheduledTaskSettings> scheduledTaskSettingsCache;\r\n    \r\n    @Inject\r\n\tpublic void init() {\r\n\t\tscheduledTaskSettingsCache.updateDefaultValue(defaultValue -> {\r\n\t\t\tdefaultValue.entries.add(ServerUtils.jsonLike(new ScheduledTaskConfig(), config -> {\r\n\t\t\t\tconfig.task = SCHEDULED_TASK_LOCK_OLD_USERS;\r\n\t\t\t\tconfig.setUid(config.task);\r\n\t\t\t\tconfig.triggerExpression = "0 0 1 * * *";\r\n\t\t\t\tconfig.triggerType = TriggerType.CRON;\r\n\t\t\t}));\r\n\t\t});\r\n\t}\r\n    \r\n\tpublic String getRpcServletPath() {\r\n    \tString rootArtifactId = StringUtils.substringBeforeLast(appName, "-server");\r\n    \treturn "/" + SharedUtils.convertSpinalCaseToCamelCase(rootArtifactId, true) + "/" + SharedGlobals.GWT_RPC_PATH;\r\n    }\r\n\r\n\t@Override\r\n\tprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\r\n\t\tif (BooleanUtils.isTrue(foundationProperties.getSecurity().isEnabled())) {\r\n\t\t\tauth.authenticationProvider(usernameAuthenticationProvider());\r\n\t\t\tif (BooleanUtils.isTrue(foundationProperties.getSecurity().getLdap().isEnabled())) {\r\n\t\t\t\tauth.authenticationProvider(ldapAuthenticationProvider());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t@ConditionalOnProperty(name=SecurityConfiguration.FOUNDATION_SECURITY_ENABLED_PROPERTY_NAME, havingValue="true")\r\n\t// #region bean-def\r\n\t@Bean\r\n\tpublic AuthService authService() throws Exception {\r\n\t\treturn new AuthService();\r\n\t}\r\n\t// #endregion\r\n\t\r\n\t@Bean\r\n\t@ConditionalOnProperty(name=SecurityConfiguration.FOUNDATION_SECURITY_ENABLED_PROPERTY_NAME, havingValue="true")\r\n\tpublic IUserConverter iUserConverter() throws Exception {\r\n\t\treturn new AuthService.UserConverter();\r\n\t}\r\n\t\r\n\t@Bean\r\n\t@ConditionalOnProperty(name=OKTA_CLIENT_ID)\r\n\tpublic OktaAuthenticationSuccessHandler oktaAuthenticationSuccessHandler() throws Exception {\r\n\t\treturn new OktaAuthenticationSuccessHandler();\r\n\t}\r\n\t\r\n\t@Bean\r\n\t// TODO RM35922 Avand in vedere noua tehnica de override, nu mai avem nevoie de asta.\r\n\t// Am cautat si nu par a mai fi si in alta parte. Nu modific eu, caci totusi tr probabat ca nu crapa dupa aia nimic\r\n\t@ConditionalOnMissingBean\r\n\t@Override\r\n\tpublic AuthenticationManager authenticationManagerBean() throws Exception {\r\n \t\treturn super.authenticationManagerBean();\r\n\t}\r\n\t\r\n\t@Bean\r\n    public ServletRegistrationBean servletRegistrationBean() {\r\n\t\treturn new ServletRegistrationBean(\r\n    \t\t\tnew RPCDispatcher(new IServiceProvider() {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic <T> T provide(Class<T> clazz) {\r\n\t\t\t\t\t\treturn applicationContext.getBean(clazz);\r\n\t\t\t\t\t}\r\n\t\t\t\t}), getRpcServletPath()\r\n    \t);\r\n    }\r\n\t\r\n\t@Override\r\n\tprotected void configure(HttpSecurity http) throws Exception {\r\n\t\tXFrameOptionsHeaderWriter.XFrameOptionsMode mode = null;\r\n\t\tString allowedFromUrls = null;\r\n\t\tif (foundationProperties.getxFrameOptions() != null) {\r\n\t\t\tmode = foundationProperties.getxFrameOptions().getMode();\r\n\t\t\tallowedFromUrls = foundationProperties.getxFrameOptions().getAllowedFromUrls();\r\n\t\t}\r\n\t\t\r\n\t\thttp\r\n\t\t\t.csrf()\r\n\t\t\t\t.disable();\r\n\t\t\r\n\t\tif (mode != null && (mode.equals(XFrameOptionsHeaderWriter.XFrameOptionsMode.DENY) ||\r\n\t\t\t\tmode.equals(XFrameOptionsHeaderWriter.XFrameOptionsMode.SAMEORIGIN))) {\r\n\t\t\thttp\r\n\t\t\t\t.headers()\r\n\t\t\t\t\t.addHeaderWriter(new XFrameOptionsHeaderWriter(mode));\r\n\t\t} else if (mode != null && mode.equals(XFrameOptionsHeaderWriter.XFrameOptionsMode.ALLOW_FROM) && allowedFromUrls != null) {\r\n\t\t\thttp\r\n\t\t\t\t// Without following disable, header will contain also DENY\r\n\t\t\t    .headers().frameOptions().disable()\r\n\t\t\t    \t.addHeaderWriter((new StaticHeadersWriter(\r\n\t\t\t\t        "Content-Security-Policy",\r\n\t\t\t\t        "frame-ancestors \'self\' " + allowedFromUrls)));\r\n\t\t}\r\n\t\t\r\n\t\thttp\r\n\t\t\t.authorizeRequests()\r\n\t\t\t\t.antMatchers(getRpcServletPath()).permitAll()\r\n\t\t\t\t// authenticate /actuator/ paths (e.g. /actuator/prometheus)\r\n\t\t\t\t// since we don\'t want everybody to see what\'s here\r\n\t\t\t\t.antMatchers("/actuator/**").fullyAuthenticated();\r\n\t\t\r\n\t\t\r\n\t\tif (tokenProvider.isPresent()) {\r\n\t\t\thttp.apply(new JWTConfigurer(tokenProvider.get()));\r\n\t\t}\r\n\t\t\r\n\t\tif (oktaAuthenticationSuccessHandler.isPresent()) {\r\n\t\t\thttp.cors().and().oauth2Login().successHandler(oktaAuthenticationSuccessHandler.get())\r\n\t\t\t\t/*\r\n\t\t\t\t *  If there is an exception, e.g. we are not logged in and we receive 401 code. \r\n\t\t\t\t *  In order not to limit users to login with okta, we use basic authentication, so a default html5 will appear for authentication.\r\n\t\t\t\t */\r\n\t\t\t\t\t.and().exceptionHandling().defaultAuthenticationEntryPointFor(new BasicAuthenticationEntryPoint(), new AntPathRequestMatcher("**"));\r\n\t\t}\r\n\t}\r\n    \r\n\t@Bean\r\n\t@ConditionalOnProperty(name = SecurityConfiguration.FOUNDATION_SECURITY_LDAP_ENABLED_PROPERTY_NAME, havingValue = "true")\r\n\tpublic LdapServersProperties ldapServersProperties() {\r\n\t\treturn new LdapServersProperties();\r\n\t}\r\n\t\r\n\t@Bean\r\n\t@ConditionalOnProperty(name = SecurityConfiguration.FOUNDATION_SECURITY_LDAP_ENABLED_PROPERTY_NAME, havingValue = "true")\r\n\tpublic LdapAuthenticationChecker ldapAuthenticationChecker(LdapServersProperties ldapServersProperties) throws Exception {\r\n\t\treturn new LdapAuthenticationChecker(ldapServersProperties);\r\n\t}\r\n\r\n\t@Bean\r\n\t@ConditionalOnProperty(name=SecurityConfiguration.FOUNDATION_SECURITY_ENABLED_PROPERTY_NAME, havingValue="true")\r\n\tpublic UsernameAuthenticationProvider usernameAuthenticationProvider() throws Exception {\r\n\t\treturn new UsernameAuthenticationProvider();\r\n\t}\r\n\t\r\n\t@Bean\r\n\t@ConditionalOnProperty(name=SecurityConfiguration.FOUNDATION_SECURITY_LDAP_ENABLED_PROPERTY_NAME, havingValue = "true")\r\n\tpublic LdapAuthenticationProvider ldapAuthenticationProvider() throws Exception {\r\n\t\treturn new LdapAuthenticationProvider();\r\n\t}\r\n\t\r\n\t@Bean(SCHEDULED_TASK_LOCK_OLD_USERS)\r\n\t@ConditionalOnProperty(name = ScheduledTaskBackendService.SCHEDULED_TASK_ORGANIZATIONS_PROPERTY)\r\n\t@ConditionalOnClass(name = { "com.crispico.foundation.server.domain.User", "com.crispico.foundation.server.domain.SettingsEntity", })\r\n\tpublic IScheduledTaskBean<?> fromUserService01(UserService userService) {\r\n\t\treturn (param) -> {\r\n\t\t\tuserService.lockOldUsers();\r\n\t\t};\r\n\t}\r\n}\r\n',path:"foundation-jhg-server/src/main/java/com/crispico/foundation/server/spring/SecurityConfiguration.java"};var a=n(93598);const s={},c=void 0,u={id:"foundation-server/Overrding beans in a FBA",title:"Overrding beans in a FBA",description:"The Spring lib is meant to be used in an app. The app would declare beans in classes annotated with @Configuration and everybody is happy.",source:"@site/docs/foundation-server/Overrding beans in a FBA.md",sourceDirName:"foundation-server",slug:"/foundation-server/Overrding beans in a FBA",permalink:"/docusaurus/docs/foundation-server/Overrding beans in a FBA",draft:!1,unlisted:!1,editUrl:"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/blob/master/docusaurus/docs/foundation-server/Overrding beans in a FBA.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"IEntityWithOrganization",permalink:"/docusaurus/docs/foundation-server/IEntityWithOrganization"},next:{title:"Settings _not finished; showcase for CodeBlockRegion_",permalink:"/docusaurus/docs/foundation-server/Settings _not finished; showcase for CodeBlockRegion_"}},d={},l=[{value:"Replace a bean w/ a custom implementation",id:"replace-a-bean-w-a-custom-implementation",level:2},{value:"Disable a bean",id:"disable-a-bean",level:2},{value:"Disable the whole configuration class / all the beans",id:"disable-the-whole-configuration-class--all-the-beans",level:2}];function p(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["The Spring lib is meant to be used in an app. The app would declare beans in classes annotated with ",(0,r.jsx)(t.code,{children:"@Configuration"})," and everybody is happy."]}),"\n",(0,r.jsxs)(t.p,{children:["But an FBA uses Foundation which uses Spring. Foundation has classes annotated with ",(0,r.jsx)(t.code,{children:"@Configuration"})," (that declare beans). The FBA has these beans without moving a finger. Super! \ud83e\udd73"]}),"\n",(0,r.jsxs)(t.p,{children:["But there are cases where a bean defined in Foundation needs to be overridden (",(0,r.jsx)(t.strong,{children:"the OOP way"}),"). All classes annotated with ",(0,r.jsx)(t.code,{children:"@Configuration"})," from Foundation allow overriding. They look like this:"]}),"\n",(0,r.jsx)(a.Tm,{src:o,region:"class"}),"\n",(0,r.jsx)(a.Tm,{src:o,region:"bean-def"}),"\n",(0,r.jsx)(t.p,{children:"Some scenarios doable in a FBA:"}),"\n",(0,r.jsx)(t.h2,{id:"replace-a-bean-w-a-custom-implementation",children:"Replace a bean w/ a custom implementation"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// Same simple class name. Which means it will be instantiated as a bean e.g. `securityConfiguration`. \n// Because of this, the original class from Foundation won't be instantiated any more (cf. `ConditionalOnMissingBean`).\n// The new class extends the one from Foundation.\n@Configuration\npublic class SecurityConfiguration extends com.crispico.foundation.server.spring.SecurityConfiguration {\n    ...\n    @Bean\n    public AuthService authService() throws Exception {\n        // MyAuthService extends AuthService\n        return new MyAuthService();\n    }\n"})}),"\n",(0,r.jsx)(t.h2,{id:"disable-a-bean",children:"Disable a bean"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// Notice the lack of `@Bean`. Because of this, the method won't be invoked.\npublic AuthService authService() throws Exception {\n    throw new UnspportedOperationException();\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"disable-the-whole-configuration-class--all-the-beans",children:"Disable the whole configuration class / all the beans"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// Again same simple class name.\n// Note however that it doesn't extend the original class. So no beans will be instatiated by this config class.\n@Configuration\npublic class SecurityConfiguration {\n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},93598:(e,t,n)=>{n.d(t,{sS:()=>l,Tm:()=>p,M_:()=>h,Fb:()=>g,JR:()=>m,lj:()=>u,h8:()=>d});n(67294);class r{static now(){return new Date}static consoleLogJson(e,t){void 0===t&&(t=!0);const n=JSON.stringify(e,(()=>{const e=new WeakSet;return(t,n)=>{if(!t.startsWith("__react")){if("object"==typeof n&&null!==n){if(e.has(n))return;e.add(n)}return n}}})(),2);return t&&console.log(n),n}static substringAfter(e,t,n){const r=n?e.lastIndexOf(t):e.indexOf(t);return r<0?e:e.substring(r+t.length)}static setTimeoutPromise(e,t){return new Promise((n=>setTimeout((()=>{const t=e?.();n(t)}),t)))}}var i=n(9286),o=n(25142),a=n(73981),s=n(91262),c=n(85893);const u=e=>{return(0,c.jsx)(c.Fragment,{children:(0,c.jsxs)("a",{target:"_blank",href:(t=e.children,(t.startsWith("foundation/")?"https://gitlab.xops-online.com/foundation/foundation/-/tree/main/"+r.substringAfter(t,"foundation/"):"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/tree/master/"+t)+(e.lineNumbers?.[0]?`#L${e.lineNumbers[0]}`:"")+(e.lineNumbers?.[1]?`-L${e.lineNumbers[1]}`:"")),children:[r.substringAfter(e.children,"/",!0),e.region&&(0,c.jsxs)("small",{children:["\xa0",(0,c.jsxs)("i",{children:["(region ",e.region,",\xa0",e.lineNumbers[0]===e.lineNumbers[1]?(0,c.jsxs)(c.Fragment,{children:["at line ",e.lineNumbers[0]]}):(0,c.jsxs)(c.Fragment,{children:["between lines [",e.lineNumbers[0],", ",e.lineNumbers[1],"])"]})]})]})]})});var t},d=e=>(0,c.jsx)(o.Z,{circular:!0,color:"blue",children:e.s}),l=e=>{let{src:{text:t,path:n},region:r,...o}=e;const a=new RegExp(`#region\\s*${r}[^\\r\\n]*\\r?\\n(.*?)#endregion`,"s").exec(t);if(!a)throw new Error(`In file = ${n}, cannot find region = ${r}, i.e. a portion like:\n\n#region ${r}\n...\n#endregion`);let s,d=1,l=-1;for(s=0;s<a.index+a[0].length;s++)"\n"===t[s]&&d++,-1===l&&s>=a.index&&(l=d);l++,d--;let p=a[1];p=/(.*)(\r?\n.*?$)/gs.exec(p)[1],p="\n"+p;const h=p.match(/\n(\s)*\S/);let g;if(h&&(g=h[1])){const e=new RegExp(`\\n(${g}*)\\S`,"g");let t,n=-1;for(;null!==(t=e.exec(p));)(n<0||n>t[1].length)&&(n=t[1].length);const r=g.repeat(n);p=p.replace(new RegExp("\\n"+r,"g"),"\n")}return p=p.substring(1),(0,c.jsx)(c.Fragment,{children:(0,c.jsx)(i.Z,{title:(0,c.jsxs)(c.Fragment,{children:["Snippet extracted from ",(0,c.jsx)(u,{region:r,lineNumbers:[l,d],children:n})]}),...o,children:p})})},p=e=>(0,c.jsx)(l,{language:"java",...e}),h=e=>(0,c.jsx)(l,{language:"ts",...e}),g=e=>(0,c.jsx)(s.Z,{children:()=>(0,c.jsx)(a.J6,{recordedTestsUrl:"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/raw/master/leave-management/leave-management-react/public/recordedTests/recordedTest.json",includeCredentialsInJsonRequestRegex:/https:\/\/gitlab\.xops-online\.com\/*/,...e})}),m=e=>(0,c.jsx)(s.Z,{children:()=>(0,c.jsx)(a.J6,{recordedTestsUrl:"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/raw/master/leave-management/leave-management-react/public/recordedTestsServer/recordedTest.json",includeCredentialsInJsonRequestRegex:/https:\/\/gitlab\.xops-online\.com\/*/,...e})})}}]);