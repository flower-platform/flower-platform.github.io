(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[698],{40469:(t,e,n)=>{"use strict";n.r(e),n.d(e,{assets:()=>g,contentTitle:()=>m,default:()=>S,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var r=n(85893),i=n(11151);const o={text:'package com.crispico.leave_management.service;\n\nimport java.text.ParseException;\nimport java.util.List;\n\nimport javax.inject.Inject;\n\nimport org.apache.commons.lang3.time.FastDateFormat;\n\nimport com.crispico.foundation.annotation.definition.FoundationService;\nimport com.crispico.foundation.server.crud.IHasPopulateNewDb;\nimport com.crispico.foundation.server.crud.ValidationException;\nimport com.crispico.foundation.server.service.settingsEntityService.AbstractSettings;\nimport com.crispico.foundation.server.service.settingsEntityService.SettingsCache;\nimport com.crispico.foundation.server.service.userService.FoundationPermissions;\nimport com.crispico.foundation.server.service.userService.NeedsPermission;\nimport com.crispico.foundation.shared.date.DateTimeUtils;\nimport com.crispico.leave_management.domain.Employee;\nimport com.fasterxml.jackson.annotation.JsonTypeName;\n\nimport io.leangen.graphql.annotations.GraphQLQuery;\nimport io.leangen.graphql.spqr.spring.annotations.GraphQLApi;\n\n@GraphQLApi\n@FoundationService\npublic class EmployeeService extends EmployeeServiceGen implements IHasPopulateNewDb {\n\t\n\tpublic enum Color {\n\t\tred, yellow, blue\n\t}\n\n\t// #region settings1-class\n\t@JsonTypeName("EmployeeServiceHeaderSettings")\n\tpublic static class EmployeeServiceHeaderSettings extends AbstractSettings {\n\t\tpublic Boolean showBasicSettingsButton;\n\t\tpublic Color settingsButtonColor;\n\t\tpublic String postItMessage;\n\t\tpublic String logo;\n\t}\n\t// #endregion\n\t\n\t@JsonTypeName("EmployeeServiceDemoReportSettings")\n\tpublic static class EmployeeServiceDemoReportSettings extends AbstractSettings {\n\t\tpublic List<EmployeeServiceDemoReport> reports;\n\t}\n\n\t@JsonTypeName("EmployeServiceDemoReport")\n\tpublic static class EmployeeServiceDemoReport extends AbstractSettings {\n\t\tpublic String title;\n\t\tpublic Integer maxCountPerCategory;\n\t\tpublic List<EmployeeServiceDemoReportCategory> categories;\n\t}\n\t\n\t@JsonTypeName("EmployeeServiceDemoReportCategory")\n\tpublic static class EmployeeServiceDemoReportCategory extends AbstractSettings {\n\t\tpublic String name;\n\t\tpublic String bulletSymbol = "*";\n\t}\n\t\n\t// #region settings1-field\n\t@Inject\n\tprotected SettingsCache<EmployeeServiceHeaderSettings> employeeServiceHeaderSettings;\n\t// #endregion\n\t\n\t@Inject\n\tprotected SettingsCache<EmployeeServiceDemoReportSettings> employeeServiceDemoReportSettings;\n\t\n\t/**\n\t * Public for test.\n\t */\n\tpublic SettingsCache<EmployeeServiceHeaderSettings> getEmployeeServiceHeaderSettings() {\n\t\treturn employeeServiceHeaderSettings;\n\t}\n\n\t/**\n\t * Public for test.\n\t */\n\tpublic SettingsCache<EmployeeServiceDemoReportSettings> getEmployeeServiceDemoReportSettings() {\n\t\treturn employeeServiceDemoReportSettings;\n\t}\n\n\t@Override\n\tpublic void populateNewDb() {\n\t\ttry {\n\t\t\tEmployee e = new Employee();\n\t\t\tFastDateFormat fdf = FastDateFormat.getInstance(DateTimeUtils.PATTERN_D);\n\n\t\t\te.setFirstName("John");\n\t\t\te.setName("Deere");\n\t\t\te.setBirthDate(fdf.parse("01/02/1980"));\n\t\t\te.setStillEmployed(true);\n\t\t\trepository.save(e);\n\n\t\t\te = new Employee();\n\t\t\te.setFirstName("John");\n\t\t\te.setName("Doe");\n\t\t\te.setBirthDate(fdf.parse("21/10/1991"));\n\t\t\te.setStillEmployed(false);\n\t\t\trepository.save(e);\n\n\t\t\te = new Employee();\n\t\t\te.setFirstName("Jane");\n\t\t\te.setName("Sullivan");\n\t\t\te.setBirthDate(fdf.parse("3/07/2003"));\n\t\t\te.setStillEmployed(true);\n\t\t\trepository.save(e);\n\n\t\t\tfor (int i = 0; i < 200; i++) {\n\t\t\t\te = new Employee();\n\t\t\t\te.setFirstName("First " + i);\n\t\t\t\te.setName("Last " + i);\n\t\t\t\te.setStillEmployed(i % 2 == 0 ? true : false);\n\t\t\t\trepository.save(e);\n\t\t\t}\n\n\t\t} catch (ParseException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\t\n\t@GraphQLQuery\n\tpublic void methodThatThrowsRuntimeException() {\n\t\tthrow new RuntimeException("Some message");\n\t}\n\t\n\t@GraphQLQuery\n\tpublic void methodThatThrowsValidationException() {\n\t\tthrow new ValidationException();\n\t}\n\t\n\t@GraphQLQuery\n\t@NeedsPermission(FoundationPermissions.NONE)\n\tpublic void methodThatTakesVeryLong() throws InterruptedException {\n\t\tThread.sleep(5000);\n\t}\n\n}\n',path:"leave-management/leave-management-server/src/main/java/com/crispico/leave_management/service/EmployeeService.java"};var s=n(37548);const a={text:'package com.crispico.foundation.server.service.settingsEntityService;\r\n\r\nimport static com.crispico.foundation.server.ServerUtils.jsonLike;\r\n\r\nimport java.util.Arrays;\r\n\r\nimport javax.inject.Inject;\r\n\r\nimport org.junit.Test;\r\nimport org.unitils.reflectionassert.ReflectionAssert;\r\n\r\nimport com.crispico.foundation.server.ServerUtils;\r\nimport com.crispico.foundation.server.domain.SettingsEntity;\r\nimport com.crispico.foundation.server.service.userService.PrivilegedExecutionService;\r\nimport com.crispico.leave_management.BaseTest;\r\nimport com.crispico.leave_management.service.EmployeeService;\r\nimport com.crispico.leave_management.service.EmployeeService.Color;\r\nimport com.crispico.leave_management.service.EmployeeService.EmployeeServiceDemoReport;\r\nimport com.crispico.leave_management.service.EmployeeService.EmployeeServiceDemoReportCategory;\r\nimport com.crispico.leave_management.service.EmployeeService.EmployeeServiceDemoReportSettings;\r\nimport com.crispico.leave_management.service.EmployeeService.EmployeeServiceHeaderSettings;\r\nimport com.crispico.shared.util.Pair;\r\nimport com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\r\nimport com.fasterxml.jackson.annotation.PropertyAccessor;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\n/**\r\n * @author Cristian Spiescu\r\n */\r\npublic class SettingsEntityServiceTest extends BaseTest {\r\n\r\n\t@Inject\r\n\tprotected SettingsEntityService settingsService;\r\n\t\r\n\t@Inject\r\n\tprotected EmployeeService employeeService;\r\n\t\r\n\t@Inject\r\n\tprotected PrivilegedExecutionService privilegedExecutionService;\r\n\t\r\n\t@Test\r\n\tpublic void testMergeOnRootObject() {\r\n\t\tprivilegedExecutionService.doPriviledged(() -> {\r\n\t\t\t// when\r\n\t\t\tsettingsService.createOrUpdate(null, jsonLike(new EmployeeServiceHeaderSettings(), s -> {\r\n\t\t\t\ts.showBasicSettingsButton = true;\r\n\t\t\t\ts.postItMessage = "Hello!";\r\n\t\t\t\ts.logo = "house";\r\n\t\t\t}));\r\n\t\t\tsettingsService.createOrUpdate(null, 9, jsonLike(new EmployeeServiceHeaderSettings(), s -> {\r\n\t\t\t\t// new entity for same org = null/global; but w/ higher importance\r\n\t\t\t\ts.logo = "shouldn\'t appear";\r\n\t\t\t}));\r\n\t\t\tsettingsService.createOrUpdate(null, 10, jsonLike(new EmployeeServiceHeaderSettings(), s -> {\r\n\t\t\t\t// new entity for same org = null/global; but w/ even higher importance\r\n\t\t\t\ts.logo = "building";\r\n\t\t\t}));\r\n\r\n\t\t\tsettingsService.createOrUpdate("company1", jsonLike(new EmployeeServiceHeaderSettings(), s -> {\r\n\t\t\t\ts.postItMessage = "Hello from company1";\r\n\t\t\t\ts.logo = "car";\r\n\t\t\t}));\r\n\t\t\tsettingsService.createOrUpdate("company1.munich", jsonLike(new EmployeeServiceHeaderSettings(), s -> {\r\n\t\t\t\ts.settingsButtonColor = Color.red;\r\n\t\t\t}));\t\r\n\t\t\tsettingsService.createOrUpdate("company1.munich", 5, jsonLike(new EmployeeServiceHeaderSettings(), s -> {\r\n\t\t\t\t// new entity for same org; but w/ higher importance; but lower than the global one, which shouldn\'t count\r\n\t\t\t\ts.logo = "truck";\r\n\t\t\t}));\r\n\t\t\t\r\n\t\t\t// then\r\n\t\t\tEmployeeServiceHeaderSettings expected = jsonLike(new EmployeeServiceHeaderSettings(), s -> {\r\n\t\t\t\ts.showBasicSettingsButton = true; // overridden at global level\r\n\t\t\t\ts.settingsButtonColor = Color.blue; // programmatic default\r\n\t\t\t\ts.postItMessage = "Hello!"; // overridden at global level\r\n\t\t\t\ts.logo = "building"; // overriden by the record w/ importance = 10\r\n\t\t\t});\r\n\t\t\t{\r\n\t\t\t\t// for global\r\n\t\t\t\tReflectionAssert.assertLenientEquals(expected, employeeService.getEmployeeServiceHeaderSettings().get(null));\r\n\t\t\t\t// company2 doesn\'t have overrides; so we expect the global setting\r\n\t\t\t\tReflectionAssert.assertLenientEquals(expected, employeeService.getEmployeeServiceHeaderSettings().get("company2"));\r\n\t\t\t}\r\n\t\r\n\t\t\t// overridden at "company1"\r\n\t\t\texpected.postItMessage = "Hello from company1";\r\n\t\t\texpected.logo = "car";\r\n\t\t\t{\r\n\t\t\t\t// for company1\r\n\t\t\t\tReflectionAssert.assertLenientEquals(expected, employeeService.getEmployeeServiceHeaderSettings().get("company1"));\r\n\t\t\t\t// for company1.paris: same as above, because we don\'t define overrides for it\r\n\t\t\t\tReflectionAssert.assertLenientEquals(expected, employeeService.getEmployeeServiceHeaderSettings().get("company1.paris"));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// overriden at "company1.munich"\r\n\t\t\texpected.settingsButtonColor = Color.red; \r\n\t\t\texpected.logo = "truck";\r\n\t\t\t{\r\n\t\t\t\tReflectionAssert.assertLenientEquals(expected, employeeService.getEmployeeServiceHeaderSettings().get("company1.munich"));\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t@Test\r\n\tpublic void mergeForLists() {\r\n\t\tprivilegedExecutionService.doPriviledged(() -> {\r\n\t\t\t// given\r\n\t\t\t// I want it to use fields instead of getters, to avoid calling getUid() which would\r\n\t\t\t// generate new uids\r\n\t\t\tObjectMapper mapper = new ObjectMapper();    \r\n\t\t\tmapper.setVisibility(PropertyAccessor.ALL, Visibility.NONE);\r\n\t\t\tmapper.setVisibility(PropertyAccessor.FIELD, Visibility.ANY);\r\n\t\t\t\r\n\t\t\t// when\r\n\t\t\tEmployeeServiceDemoReportSettings expectedWithUids = jsonLike(new EmployeeServiceDemoReportSettings(), s -> {\r\n\t\t\t\ts.reports = Arrays.asList(jsonLike(new EmployeeServiceDemoReport(), r -> {\r\n\t\t\t\t\tr.title = "Employees by age";\r\n\t\t\t\t\tr.maxCountPerCategory = 5;\r\n\t\t\t\t\tr.categories = Arrays.asList(jsonLike(new EmployeeServiceDemoReportCategory(), cat -> {\r\n\t\t\t\t\t\tcat.name = "20 - 30";\r\n\t\t\t\t\t\tcat.bulletSymbol = "*";\r\n\t\t\t\t\t}), jsonLike(new EmployeeServiceDemoReportCategory(), cat -> {\r\n\t\t\t\t\t\tcat.name = "30 - 40";\r\n\t\t\t\t\t\tcat.bulletSymbol = ":)";\r\n\t\t\t\t\t}), jsonLike(new EmployeeServiceDemoReportCategory(), cat -> {\r\n\t\t\t\t\t\tcat.name = "40 - 50";\r\n\t\t\t\t\t\tcat.bulletSymbol = "*";\r\n\t\t\t\t\t}));\r\n\t\t\t\t}), jsonLike(new EmployeeServiceDemoReport(), r -> {\r\n\t\t\t\t\tr.title = "Employees by position";\r\n\t\t\t\t\tr.maxCountPerCategory = 5;\r\n\t\t\t\t\tr.categories = Arrays.asList(jsonLike(new EmployeeServiceDemoReportCategory(), cat -> {\r\n\t\t\t\t\t\tcat.name = "Developer";\r\n\t\t\t\t\t\tcat.bulletSymbol = "*";\r\n\t\t\t\t\t}), jsonLike(new EmployeeServiceDemoReportCategory(), cat -> {\r\n\t\t\t\t\t\tcat.name = "QA Engineer";\r\n\t\t\t\t\t\tcat.bulletSymbol = "*";\r\n\t\t\t\t\t}), jsonLike(new EmployeeServiceDemoReportCategory(), cat -> {\r\n\t\t\t\t\t\tcat.name = "Manager";\r\n\t\t\t\t\t\tcat.bulletSymbol = "*";\r\n\t\t\t\t\t}));\r\n\t\t\t\t}), jsonLike(new EmployeeServiceDemoReport(), r -> {\r\n\t\t\t\t\tr.title = "Employees by tasks realized last week";\r\n\t\t\t\t\tr.maxCountPerCategory = 5;\r\n\t\t\t\t\tr.categories = Arrays.asList(jsonLike(new EmployeeServiceDemoReportCategory(), cat -> {\r\n\t\t\t\t\t\tcat.name = "0 - 5";\r\n\t\t\t\t\t\tcat.bulletSymbol = "-";\r\n\t\t\t\t\t}), jsonLike(new EmployeeServiceDemoReportCategory(), cat -> {\r\n\t\t\t\t\t\tcat.name = "5 - 10";\r\n\t\t\t\t\t\tcat.bulletSymbol = "--";\r\n\t\t\t\t\t}), jsonLike(new EmployeeServiceDemoReportCategory(), cat -> {\r\n\t\t\t\t\t\tcat.name = "10 - 15";\r\n\t\t\t\t\t\tcat.bulletSymbol = "---";\r\n\t\t\t\t\t}));\r\n\t\t\t\t}));\r\n\t\t\t});\r\n\t\t\tEmployeeServiceDemoReportSettings expectedWoUids = ServerUtils.cloneViaJson(mapper, expectedWithUids); // clone now, because after the next instruction uids will be filled\r\n\t\t\tsettingsService.createOrUpdate(null, expectedWithUids);\r\n\t\t\t\r\n\t\t\t// then\r\n\t\t\t{\r\n\t\t\t\t// for global\r\n\t\t\t\tReflectionAssert.assertLenientEquals(expectedWoUids, employeeService.getEmployeeServiceDemoReportSettings().get(null));\r\n\t\t\t\t// company2 doesn\'t have overrides; so we expect the global setting\r\n\t\t\t\tReflectionAssert.assertLenientEquals(expectedWoUids, employeeService.getEmployeeServiceDemoReportSettings().get("company2"));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// and when\r\n\t\t\tEmployeeServiceDemoReport employeesByAge = expectedWithUids.reports.get(0);\r\n\t\t\tEmployeeServiceDemoReportSettings override1 = jsonLike(new EmployeeServiceDemoReportSettings(), s -> {\r\n\t\t\t\ts.reports = Arrays.asList(jsonLike(new EmployeeServiceDemoReport(), r -> {\r\n\t\t\t\t\tr.setOverriddenUid(employeesByAge.getUid());\r\n\t\t\t\t\tr.maxCountPerCategory = 10;\r\n\t\t\t\t\t\r\n\t\t\t\t\tr.categories = Arrays.asList(jsonLike(new EmployeeServiceDemoReportCategory(), cat -> {\r\n\t\t\t\t\t\tcat.setOverriddenUid(employeesByAge.categories.get(0).getUid()); // 20 - 30\r\n\t\t\t\t\t\tcat.bulletSymbol = "***";\r\n\t\t\t\t\t}), jsonLike(new EmployeeServiceDemoReportCategory(), cat -> {\r\n\t\t\t\t\t\tcat.setOverriddenUid(employeesByAge.categories.get(1).getUid()); // 30 - 40\r\n\t\t\t\t\t\tcat.setOverriddenUidRemoved(true);\r\n\t\t\t\t\t}), jsonLike(new EmployeeServiceDemoReportCategory(), cat -> {\r\n\t\t\t\t\t\tcat.setOverriddenUid(employeesByAge.categories.get(2).getUid()); // 40 - 50\r\n\t\t\t\t\t\tcat.setOverriddenUidRemoved(true);\r\n\t\t\t\t\t}), jsonLike(new EmployeeServiceDemoReportCategory(), cat -> {\r\n\t\t\t\t\t\tcat.name = "80 - 90";\r\n\t\t\t\t\t}), jsonLike(new EmployeeServiceDemoReportCategory(), cat -> {\r\n\t\t\t\t\t\tcat.name = "90 - 100";\r\n\t\t\t\t\t}));\r\n\t\t\t\t\t\r\n\t\t\t\t}));\r\n\t\t\t});\r\n\t\t\tsettingsService.createOrUpdate("company1", override1);\r\n\t\t\t// same level, but higher importance\r\n\t\t\tsettingsService.createOrUpdate("company1", 10, jsonLike(new EmployeeServiceDemoReportSettings(), s -> {\r\n\t\t\t\ts.reports = Arrays.asList(jsonLike(new EmployeeServiceDemoReport(), r -> {\r\n\t\t\t\t\tr.setOverriddenUid(employeesByAge.getUid());\r\n\t\t\t\t\tr.title = "Employees by age (including retired)";\r\n\t\t\t\t\tr.categories = Arrays.asList(\r\n\t\t\t\t\t// this doesn\'t work, cf. the comment in SettingsCache.merge()\r\n//\t\t\t\t\t\tjsonLike(new EmployeeServiceDemoReportCategory(), cat -> {\r\n//\t\t\t\t\t\t// here we cancel a deletion\r\n//\t\t\t\t\t\tcat.setOverriddenUid(employeesByAge.categories.get(1).getUid()); // 30 - 40\r\n//\t\t\t\t\t\tcat.name = "30 - 40 deletion cancelled";\r\n//\t\t\t\t\t}), \r\n\t\t\t\t\t\tjsonLike(new EmployeeServiceDemoReportCategory(), cat -> { // 90 - 100\r\n\t\t\t\t\t\t// here we delete an addition\r\n\t\t\t\t\t\tcat.setOverriddenUid(override1.reports.get(0).categories.get(4).getUid()); // 40 - 50\r\n\t\t\t\t\t\tcat.setOverriddenUidRemoved(true);\r\n\t\t\t\t\t}));\r\n\t\t\t\t}));\r\n\t\t\t}));\r\n\t\t\t\r\n\t\t\t// then\r\n\t\t\tEmployeeServiceDemoReport employeesByAgeExpected = expectedWoUids.reports.get(0); \r\n\t\t\temployeesByAgeExpected.maxCountPerCategory = 10;\r\n\t\t\temployeesByAgeExpected.categories.get(0).bulletSymbol = "***";\r\n\t\t\temployeesByAgeExpected.categories.remove(2);\r\n\t\t\temployeesByAgeExpected.categories.remove(1);\r\n\t\t\temployeesByAgeExpected.categories.add(jsonLike(new EmployeeServiceDemoReportCategory(), cat -> {\r\n\t\t\t\tcat.name = "80 - 90";\r\n\t\t\t}));\r\n\t\t\t// modifs from the one w/ higher importance\r\n\t\t\temployeesByAgeExpected.title = "Employees by age (including retired)";\r\n\t\t\t// and 90 - 100 was deleted, so shouldn\'t be here\r\n\t\t\t\r\n\t\t\t// for company1\r\n\t\t\tReflectionAssert.assertLenientEquals(expectedWoUids, employeeService.getEmployeeServiceDemoReportSettings().get("company1"));\r\n\t\t});\r\n\t}\r\n\t\r\n\t@Test\r\n\tpublic void deleteSettings() {\r\n\t\tprivilegedExecutionService.doPriviledged(() -> {\r\n\t\t\t// given\r\n\t\t\tPair<EmployeeServiceHeaderSettings, SettingsEntity> result = settingsService.createOrUpdate(null, jsonLike(new EmployeeServiceHeaderSettings(), s -> {\r\n\t\t\t\ts.showBasicSettingsButton = true;\r\n\t\t\t\ts.postItMessage = "Hello!";\r\n\t\t\t}));\r\n\t\t\t\r\n\t\t\tEmployeeServiceHeaderSettings expectedForGlobal = jsonLike(new EmployeeServiceHeaderSettings(), s -> {\r\n\t\t\t\ts.showBasicSettingsButton = true; // overridden at global level\r\n\t\t\t\ts.settingsButtonColor = Color.blue; // default\r\n\t\t\t\ts.postItMessage = "Hello!"; // overridden at global level\r\n\t\t\t});\r\n\r\n\t\t\tsettingsService.createOrUpdate("company1", jsonLike(new EmployeeServiceHeaderSettings(), s -> {\r\n\t\t\t\ts.postItMessage = "Hello from company1";\r\n\t\t\t}));\r\n\t\t\t\r\n\t\t\tEmployeeServiceHeaderSettings expectedForCompany1 = jsonLike(new EmployeeServiceHeaderSettings(), s -> {\r\n\t\t\t\ts.showBasicSettingsButton = true; // inherited from global\r\n\t\t\t\ts.settingsButtonColor = Color.blue; // default\r\n\t\t\t\ts.postItMessage = "Hello from company1"; // overridden for organization\r\n\t\t\t});\r\n\r\n\t\t\t{\r\n\t\t\t\t// #region settings1-temp-usage\r\n\t\t\t\t// for global\r\n\t\t\t\tReflectionAssert.assertLenientEquals(expectedForGlobal, employeeService.getEmployeeServiceHeaderSettings().get(null));\r\n\t\t\t\t// for company1\r\n\t\t\t\tReflectionAssert.assertLenientEquals(expectedForCompany1, employeeService.getEmployeeServiceHeaderSettings().get("company1"));\r\n\t\t\t\t// #endregion\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// when\r\n\t\t\tsettingsService.delete(result.b.getId());\r\n\t\t\t\r\n\t\t\t// then\r\n\t\t\t{\r\n\t\t\t\t// for global\r\n\t\t\t\t// default settings taken from the cache initialization in LeaveManagementApp.employeeServiceHeaderSettings()\r\n\t\t\t\tEmployeeServiceHeaderSettings defaultSettings = jsonLike(new EmployeeServiceHeaderSettings(), s -> {\r\n\t\t\t\t\ts.showBasicSettingsButton = false;\r\n\t\t\t\t\ts.settingsButtonColor = Color.blue;\r\n\t\t\t\t\ts.postItMessage = "";\r\n\t\t\t\t});\r\n\t\t\t\t// her was check with expected = null: `ReflectionAssert.assertLenientEquals(null, employeeService.getEmployeeServiceHeaderSettings().get("company1"))`,\r\n\t\t\t\t// which seemed to pass for almost anything, for example `ReflectionAssert.assertLenientEquals(null, Integer.parseInt("123"))`\r\n\t\t\t\tReflectionAssert.assertLenientEquals(defaultSettings, employeeService.getEmployeeServiceHeaderSettings().get(null));\r\n\t\t\t\t// for company1\r\n\t\t\t\texpectedForCompany1.showBasicSettingsButton = false; // now using the default value as the settings for default were deleted\r\n\t\t\t\tReflectionAssert.assertLenientEquals(expectedForCompany1, employeeService.getEmployeeServiceHeaderSettings().get("company1"));\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n',path:"leave-management/leave-management-server/src/test/java/com/crispico/foundation/server/service/settingsEntityService/SettingsEntityServiceTest.java"};n(9286);var c=n(93598);const l={},m=void 0,p={id:"foundation-server/Settings",title:"Settings",description:"This page is to demo/showcase the rough structure of a feature documentation.",source:"@site/docs/foundation-server/Settings.md",sourceDirName:"foundation-server",slug:"/foundation-server/Settings",permalink:"/docusaurus/docs/foundation-server/Settings",draft:!1,unlisted:!1,editUrl:"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/blob/master/docusaurus/docs/foundation-server/Settings.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Instructions for devs",permalink:"/docusaurus/docs/foundation-server/Demo mode/Instructions for devs"},next:{title:"tests-are-demo",permalink:"/docusaurus/docs/category/tests-are-demo"}},g={},d=[{value:"For devs",id:"for-devs",level:2},{value:"For users",id:"for-users",level:2}];function u(t){const e={admonition:"admonition",code:"code",h2:"h2",img:"img",p:"p",strong:"strong",...(0,i.a)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.admonition,{type:"info",children:[(0,r.jsxs)(e.p,{children:["This page is to ",(0,r.jsx)(e.strong,{children:"demo/showcase"})," the rough structure of a ",(0,r.jsx)(e.strong,{children:"feature documentation"}),"."]}),(0,r.jsx)(e.p,{children:"It's not (yet) the full doc for Settings. We'll update when its time will come."})]}),"\n",(0,r.jsx)(e.h2,{id:"for-devs",children:"For devs"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(c.h8,{s:"1"})," We create a class with the settings that we need. This will be editable from the UI."]}),"\n",(0,r.jsx)(c.Tm,{src:o,region:"settings1-class"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(c.h8,{s:"2"})," In order to access it, we use a bean of type ",(0,r.jsx)(e.code,{children:"SettingsCache"}),". So we define the bean in one of the classes annotated w/ ",(0,r.jsx)(e.code,{children:"@Configuration"}),". With this occasion, we also define the default value:"]}),"\n",(0,r.jsx)(c.Tm,{src:s.Z,region:"settings1-bean"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(c.h8,{s:"3"})," Inject this bean there where you need it:"]}),"\n",(0,r.jsx)(c.Tm,{src:o,region:"settings1-field"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(c.h8,{s:"4"})," And use it:"]}),"\n",(0,r.jsx)(c.Tm,{src:a,region:"settings1-temp-usage"}),"\n",(0,r.jsx)(e.h2,{id:"for-users",children:"For users"}),"\n",(0,r.jsxs)(e.p,{children:["This feature is thought for power users / admins. They can add/edit a ",(0,r.jsx)(e.code,{children:"EmployeeServiceHeaderSettings"})," from here:"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:n(74033).Z+"",width:"2058",height:"1197"})}),"\n",(0,r.jsx)(e.p,{children:"This screen is dynamically generated, so you don't need to write code for it."}),"\n",(0,r.jsx)(e.p,{children:"All the settings can be seen here:"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:n(73639).Z+"",width:"718",height:"280"})})]})}function S(t={}){const{wrapper:e}={...(0,i.a)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(u,{...t})}):u(t)}},93598:(t,e,n)=>{"use strict";n.d(e,{sS:()=>p,Tm:()=>g,Fb:()=>d,JR:()=>u,lj:()=>l,h8:()=>m});n(67294);class r{static now(){return new Date}static consoleLogJson(t,e){void 0===e&&(e=!0);const n=JSON.stringify(t,(()=>{const t=new WeakSet;return(e,n)=>{if(!e.startsWith("__react")){if("object"==typeof n&&null!==n){if(t.has(n))return;t.add(n)}return n}}})(),2);return e&&console.log(n),n}static substringAfter(t,e,n){const r=n?t.lastIndexOf(e):t.indexOf(e);return r<0?t:t.substring(r+e.length)}static setTimeoutPromise(t,e){return new Promise((n=>setTimeout((()=>{const e=t?.();n(e)}),e)))}}var i=n(9286),o=n(25142),s=n(28014),a=n(91262),c=n(85893);const l=t=>{return(0,c.jsx)(c.Fragment,{children:(0,c.jsxs)("a",{target:"_blank",href:(e=t.children,"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/tree/master/"+e+(t.lineNumbers?.[0]?`#L${t.lineNumbers[0]}`:"")+(t.lineNumbers?.[1]?`-L${t.lineNumbers[1]}`:"")),children:[r.substringAfter(t.children,"/",!0),t.region&&(0,c.jsxs)("small",{children:["\xa0",(0,c.jsxs)("i",{children:["(region ",t.region,", between lines [",t.lineNumbers[0],", ",t.lineNumbers[1],"])"]})]})]})});var e},m=t=>(0,c.jsx)(o.Z,{circular:!0,color:"blue",children:t.s}),p=t=>{let{src:{text:e,path:n},region:r,...o}=t;const s=new RegExp(`#region\\s*${r}\\r?\\n(.*?)#endregion`,"s").exec(e);if(!s)throw new Error(`In file = ${n}, cannot find region = ${r}, i.e. a portion like:\n\n#region ${r}\n...\n#endregion`);let a,m=s[1],p=1,g=-1;for(a=0;a<s.index+s[0].length;a++)"\n"===e[a]&&p++,-1===g&&a>=s.index&&(g=p);g++,p--,m="\n"+m;const d=m.match(/\n(\s)*\S/);let u;if(d&&(u=d[1])){const t=new RegExp(`\\n(${u}*)\\S`,"g");let e,n=-1;for(;null!==(e=t.exec(m));)(n<0||n>e[1].length)&&(n=e[1].length);const r=u.repeat(n);m=m.replace(new RegExp("\\n"+r,"g"),"\n")}return m=m.substring(1),(0,c.jsx)(c.Fragment,{children:(0,c.jsx)(i.Z,{title:(0,c.jsxs)(c.Fragment,{children:["Snippet extracted from ",(0,c.jsx)(l,{region:r,lineNumbers:[g,p],children:n})]}),...o,children:m})})},g=t=>(0,c.jsx)(p,{language:"java",...t}),d=t=>(0,c.jsx)(a.Z,{children:()=>(0,c.jsx)(s.J6,{recordedTestsUrl:"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/raw/master/leave-management/leave-management-react/public/recordedTests/recordedTest.json",includeCredentialsInJsonRequestRegex:/https:\/\/gitlab\.xops-online\.com\/*/,...t})}),u=t=>(0,c.jsx)(a.Z,{children:()=>(0,c.jsx)(s.J6,{recordedTestsUrl:"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/raw/master/leave-management/leave-management-react/public/recordedTestsServer/recordedTest.json",includeCredentialsInJsonRequestRegex:/https:\/\/gitlab\.xops-online\.com\/*/,...t})})},13411:t=>{function e(t){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}e.keys=()=>[],e.resolve=e,e.id=13411,t.exports=e},74033:(t,e,n)=>{"use strict";n.d(e,{Z:()=>r});const r=n.p+"assets/images/Settings.md-1-ac95ab2d1e4615dd7b913d365f5a9c79.png"},73639:(t,e,n)=>{"use strict";n.d(e,{Z:()=>r});const r=n.p+"assets/images/Settings.md-2-3bd1f4887bb486ed3e762f445d09fcac.png"},37548:(t,e,n)=>{"use strict";n.d(e,{Z:()=>r});const r={text:'package com.crispico.leave_management;\n\nimport java.net.UnknownHostException;\n\nimport javax.inject.Inject;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.DependsOn;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.core.env.Environment;\n\nimport com.crispico.foundation.server.ServerUtils;\nimport com.crispico.foundation.server.distributedTracing.DependenciesFinder;\nimport com.crispico.foundation.server.jhipster.generated.JhipsterRuntimeApp;\nimport com.crispico.foundation.server.jhipster.lib.config.JHipsterConstants;\nimport com.crispico.foundation.server.service.IServerFeatureParamsEntityService;\nimport com.crispico.foundation.server.service.settingsEntityService.SettingsCache;\nimport com.crispico.foundation.server.spring.FoundationServerApp;\nimport com.crispico.leave_management.demoMode.DemoModeServiceLeaveManagement;\nimport com.crispico.leave_management.feature_params.LeaveCustomCodeTest;\nimport com.crispico.leave_management.feature_params.LeaveFeatureParamsTest;\nimport com.crispico.leave_management.feature_params.LeaveNewCustomCodeTest;\nimport com.crispico.leave_management.feature_params.LeaveNewFeatureParamsTest;\nimport com.crispico.leave_management.performance_logging.PerformanceLoggingAspect;\nimport com.crispico.leave_management.service.EmployeeService.Color;\nimport com.crispico.leave_management.service.EmployeeService.EmployeeServiceDemoReportSettings;\nimport com.crispico.leave_management.service.EmployeeService.EmployeeServiceHeaderSettings;\nimport com.crispico.leave_management.service.TaskService;\n\nimport brave.Tracer;\nimport graphql.schema.GraphQLSchema;\nimport graphql.schema.idl.SchemaPrinter;\n/**\n * @author Cristian Spiescu\n */\n@FoundationServerApp\n@Import(LeaveManagementScheduledTaskConfig.class)\npublic class LeaveManagementApp extends JhipsterRuntimeApp {\n\t\n\tprotected static class AfterStartup {\n\t\t@Inject\n\t\tprotected IServerFeatureParamsEntityService featureParamsService;\n\n\t\t@Inject\n\t\tprotected LeaveCustomCodeTest leaveCustomCodeTest;\n\n\t\t@Inject\n\t\tprotected LeaveNewCustomCodeTest leaveNewCustomCodeTest;\n\t\t\n\t\t@Inject\n\t\tprotected Environment environment;\n\n\t\t@Inject\n\t\tprotected void postCreate(GraphQLSchema schema) {\n\t\t\tfeatureParamsService.addFeatureParam(LeaveFeatureParamsTest.class);\n\t\t\tfeatureParamsService.addCustomCode(leaveCustomCodeTest);\n\n\t\t\tfeatureParamsService.addFeatureParam(LeaveNewFeatureParamsTest.class);\n\t\t\tfeatureParamsService.addCustomCode(leaveNewCustomCodeTest);\n\n\t\t\t\n\t        SchemaPrinter schemaPrinter = new SchemaPrinter(SchemaPrinter.Options.defaultOptions());\n\t        System.out.println(schemaPrinter.print(schema));\n\t        System.out.println();\n\t\t}\n\t}\n\t\n\t@Autowired\n\tTracer tracer;\n\n\tpublic LeaveManagementApp(Environment env) {\n\t\tsuper(env);\n\t}\n\n\tpublic static void main(String[] args) throws UnknownHostException {\n\t\tJhipsterRuntimeApp.main(LeaveManagementApp.class, args);\n\t}\n\n\t@Bean\n\tprotected AfterStartup afterStartup() {\n\t\treturn new AfterStartup();\n\t}\n\n\t@Bean\n\t@DependsOn("performanceLoggingParameters")\n\t@ConditionalOnProperty(name = "foundation.performance-log.disable-default-aspect", havingValue = "true")\n\tpublic PerformanceLoggingAspect performanceLoggingAspect() {\n\t\tPerformanceLoggingAspect result = new PerformanceLoggingAspect();\n\t\treturn result;\n\t}\n\t\n\t@Bean\n\tpublic SettingsCache<TaskService.CreateDailyTasksSettings> createDailyTasksSettings() {\n\t\tTaskService.CreateDailyTasksSettings defaultValue = new TaskService.CreateDailyTasksSettings();\n\t\tdefaultValue.createInWeekend = false;\n\t\treturn new SettingsCache<>(defaultValue);\n\t}\n\n\t@Bean\n\tpublic SettingsCache<TaskService.TaskSalarySettings> taskSalarySettings() {\n\t\treturn new SettingsCache<>(new TaskService.TaskSalarySettings());\n\t}\n\t\n\t@Bean\n\tpublic SettingsCache<EmployeeServiceDemoReportSettings> employeeServiceDemoReportSettings() {\n\t\treturn new SettingsCache<>(new EmployeeServiceDemoReportSettings());\n\t}\n\t\n\t// #region settings1-bean\n\t@Bean\n\tpublic SettingsCache<EmployeeServiceHeaderSettings> employeeServiceHeaderSettings() {\n\t\treturn new SettingsCache<>(ServerUtils.jsonLike(new EmployeeServiceHeaderSettings(), s -> {\n\t\t\ts.showBasicSettingsButton = false;\n\t\t\ts.settingsButtonColor = Color.blue;\n\t\t\ts.postItMessage = "";\n\t\t}));\n\t}\n\t// #endregion\n\t\n\t@Bean\n\tpublic DependenciesFinder dependenciesFinder() {\n\t\treturn new DependenciesFinder();\n\t}\n\n// CS: am dezactivat zipkin pentru ca aveam multa poluare in consola; @see pom.xml\t\n\t\n//\t@Bean\n//\tpublic Sampler defaultSampler() {\n//\t\treturn Sampler.ALWAYS_SAMPLE;\n//\t}\n//\n//\t@Bean\n//\tpublic JdbcEventListener jdbcEventListner() {\n//\t\treturn new JdbcEventListener() {\n//\n//\t\t\tpublic Map<String, String> result = new TreeMap<>();\n//\t\t\tpublic List<Map<String, String>> results = new ArrayList<Map<String, String>>();\n//\n//\t\t\t@Override\n//\t\t\tpublic void onAfterResultSetGet(ResultSetInformation resultSetInformation, String columnLabel, Object value, SQLException e) {\n//\t\t\t\ttry {\n//\t\t\t\t\tString tableName = resultSetInformation.getResultSet().getMetaData().getTableName(1);\n//\t\t\t\t\tif (!result.containsKey("tableName")) {\n//\t\t\t\t\t\tresult.put("tableName", tableName);\n//\t\t\t\t\t}\n//\t\t\t\t} catch (SQLException e1) {\n//\t\t\t\t\te1.printStackTrace();\n//\t\t\t\t}\n//\t\t\t\tresult.put(convertColumnLabelToColumnName(columnLabel, resultSetInformation), value != null ? value.toString() : null);\n//\t\t\t}\n//\n//\t\t\t@Override\n//\t\t\tpublic void onAfterResultSetNext(ResultSetInformation resultSetInformation, long timeElapsedNanos, boolean hasNext, SQLException e) {\n//\t\t\t\tif (!result.isEmpty()) {\n//\t\t\t\t\tMap<String, String> resultCopy = new TreeMap<String, String>();\n//\t\t\t\t\tresultCopy.putAll(result);\n//\t\t\t\t\tresults.add(resultCopy);\n//\t\t\t\t\tresult.clear();\n//\t\t\t\t}\n//\t\t\t}\n//\n//\t\t\t@Override\n//\t\t\tpublic void onAfterCommit(ConnectionInformation connectionInformation, long timeElapsedNanos, SQLException e) {\n//\t\t\t\tSpan newSpan = tracer.currentSpan();\n//\t\t\t\ttry (Tracer.SpanInScope ws = tracer.withSpanInScope(newSpan.start())) {\n//\t\t\t\t\tnewSpan.tag("Query results", processResults(results));\n//\t\t\t\t} finally {\n//\t\t\t\t\tnewSpan.finish();\n//\t\t\t\t}\n//\t\t\t\tSystem.out.println("Query results: " + processResults(results));\n//\t\t\t\tresults.clear();\n//\t\t\t}\n//\n//\t\t\tpublic String processResults(List<Map<String, String>> results) {\n//\t\t\t\tString tableName = null, resultAsString = "";\n//\t\t\t\tif (results.size() == 0) {\n//\t\t\t\t\treturn "[]";\n//\t\t\t\t}\n//\n//\t\t\t\tCollections.sort(results, new Comparator<Map<String, String>>() {\n//\t\t\t\t\t@Override\n//\t\t\t\t\tpublic int compare(Map<String, String> result1, Map<String, String> result2) {\n//\t\t\t\t\t\tString tableName1 = result1.get("tableName");\n//\t\t\t\t\t\tif (tableName1 == null) {\n//\t\t\t\t\t\t\t// CS: I don\'t know this code; but sometimes it enters here and would give a NPE\n//\t\t\t\t\t\t\t// I think the issue is deeper; because when this happens, the error persist; so\n//\t\t\t\t\t\t\t// the system is in a dubious state. To be investigated.\n//\t\t\t\t\t\t\treturn -1;\n//\t\t\t\t\t\t}\n//\t\t\t\t\t\treturn tableName1.compareTo(result2.get("tableName"));\n//\t\t\t\t\t}\n//\t\t\t\t});\n//\n//\t\t\t\tfor (int i = 0; i < results.size(); i++) {\n//\t\t\t\t\tMap<String, String> result = results.get(i);\n//\n//\t\t\t\t\tString currentTableName = result.get("tableName");\n//\t\t\t\t\tif (currentTableName != "") {\n//\t\t\t\t\t\t// currentTableName can be empty when the query looks like "SELECT COUNT..."\n//\t\t\t\t\t\t// in this case, the table name can not be retrieved from ResultSetMetaData, but this query and its result can be seen on zipkin\n//\t\t\t\t\t\tif (currentTableName != tableName) {\n//\t\t\t\t\t\t\ttableName = currentTableName;\n//\t\t\t\t\t\t\tresultAsString += (i != 0 ? "\\n" : "") + "// " + currentTableName + "\\n " + "[";\n//\t\t\t\t\t\t}\n//\t\t\t\t\t\tresultAsString += result.toString() + (i == results.size() - 1 || (i + 1 < results.size() && results.get(i + 1).get("tableName") != currentTableName) ? "]" : ", \\n");\n//\t\t\t\t\t}\n//\t\t\t\t}\n//\t\t\t\treturn resultAsString;\n//\t\t\t}\n//\n//\t\t\tpublic String convertColumnLabelToColumnName(String columnLabel, ResultSetInformation resultSetInformation) {\n//\t\t\t\ttry {\n//\t\t\t\t\tResultSetMetaData metaData = resultSetInformation.getResultSet().getMetaData();\n//\t\t\t\t\tfor (int i = 1; i <= metaData.getColumnCount(); i++) {\n//\t\t\t\t\t\tif (metaData.getColumnLabel(i).toUpperCase().equals(columnLabel.toUpperCase())) {\n//\t\t\t\t\t\t\treturn metaData.getColumnName(i).toLowerCase();\n//\t\t\t\t\t\t}\n//\t\t\t\t\t}\n//\t\t\t\t} catch (SQLException e) {\n//\t\t\t\t\te.printStackTrace();\n//\t\t\t\t}\n//\t\t\t\treturn columnLabel;\n//\t\t\t}\n//\t\t};\n//\t}\n\t\n// TODO CS/UCS: cand va merge treaba, sa incercam ceva de genul:\n// deci ea ar crea bean-uri dinamic; \n//\t@Bean\n//\tpublic SettingsService settingsService() {\n//\t\treturn new SettingsService(CreateDailyTasksSettings.class, ...);\n//\t}\n\t\n\t// #region demo-mode-bean\n\t@Bean\n\t@Profile(JHipsterConstants.SPRING_PROFILE_TEST)\n\tpublic DemoModeServiceLeaveManagement demoModeService() {\n\t\treturn new DemoModeServiceLeaveManagement();\n\t}\n\t// #endregion\n}\n',path:"leave-management/leave-management-server/src/main/java/com/crispico/leave_management/LeaveManagementApp.java"}},24654:()=>{},62183:()=>{},13024:()=>{},62715:()=>{},13611:()=>{},28353:()=>{},1210:()=>{},43454:()=>{}}]);