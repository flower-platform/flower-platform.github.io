"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8056],{76298:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var t=s(85893),r=s(11151);const i={},o="[Waiting to mature] Referencing steps",c={id:"featurebook/recipes-wip/referencing-steps",title:"[Waiting to mature] Referencing steps",description:"(the recipe is ready; but let's see it mature/a couple of times used successfully before promoting it to an official recipe)",source:"@site/docs/featurebook/recipes-wip/referencing-steps.md",sourceDirName:"featurebook/recipes-wip",slug:"/featurebook/recipes-wip/referencing-steps",permalink:"/docusaurus/docs/featurebook/recipes-wip/referencing-steps",draft:!1,unlisted:!1,editUrl:"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/blob/master/docusaurus/docs/featurebook/recipes-wip/referencing-steps.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"[WIP] Expression needed for action or test is ugly? Consider refactoring for improved testability",permalink:"/docusaurus/docs/featurebook/recipes-wip/refactor-for-testability"},next:{title:'[WIP] Testing expected data only w/ a "count"',permalink:"/docusaurus/docs/featurebook/recipes-wip/testing-expected-data-w-count"}},a={},d=[{value:"E.g.",id:"eg",level:2},{value:"Instructions",id:"instructions",level:2},{value:"Why",id:"why",level:2}];function l(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"waiting-to-mature-referencing-steps",children:"[Waiting to mature] Referencing steps"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"(the recipe is ready; but let's see it mature/a couple of times used successfully before promoting it to an official recipe)"})}),"\n",(0,t.jsx)(n.h2,{id:"eg",children:"E.g."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"    /**\n     * ...\n     * * WHEN1 `(referenced)` login attempt w/ a correct email and password\n     * * THEN1 `(referenced)` a new user was created, based on the email\n     * * THEN2 that user has the role specified by the API\n     * ...\n     */\n    @Scenario()\n    featureLogin1() {\n    }\n\n    /**\n     * * GIVEN something else\n     * * WHEN1 `idem featureLogin1()/WHEN1`\n     * * THEN1 something else\n     * ...\n     */\n    @Scenario()\n    featureLogin2() {\n    }\n"})}),"\n",(0,t.jsx)(n.p,{children:"This renders something like this:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["WHEN1 ",(0,t.jsx)(n.code,{children:"(referenced)"})," login attempt w/ a correct email and password"]}),"\n",(0,t.jsxs)(n.li,{children:["THEN1 ",(0,t.jsx)(n.code,{children:"(referenced)"})," a new user was created, based on the email"]}),"\n",(0,t.jsx)(n.li,{children:"THEN2 that user has the role specified by the API"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"GIVEN something else"}),"\n",(0,t.jsxs)(n.li,{children:["WHEN1 ",(0,t.jsx)(n.code,{children:"idem featureLogin1()/WHEN1"})]}),"\n",(0,t.jsx)(n.li,{children:"THEN1 something else"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"instructions",children:"Instructions"}),"\n",(0,t.jsx)(n.p,{children:"If a step is referenced (from the same scenario, or another scenario):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"THEN1 `(referenced)` ...\n"})}),"\n",(0,t.jsx)(n.p,{children:"If a step references another step, same scenario/another scenario:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"THEN2 `idem THEN1`\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"THEN2 `idem anotherScenario()/THEN2`\n"})}),"\n",(0,t.jsx)(n.h2,{id:"why",children:"Why"}),"\n",(0,t.jsx)(n.p,{children:"It's common to have the same step, used several times."}),"\n",(0,t.jsxs)(n.p,{children:["1/ ",(0,t.jsx)(n.strong,{children:"At write time"}),": DRY (don't repeat yourself). With the advantage: during dev, if I need to modify the step, I modify only once. Otherwise I'd need to do a \"search/replace\" in the file. Not nice, and error prone."]}),"\n",(0,t.jsxs)(n.p,{children:["2/ ",(0,t.jsx)(n.strong,{children:"At read time"}),". It's also common to have (besides several instances of the same step) steps that are more or less similar;  w/ modifications (more or less subtle), that hide details. Remember that the steps are rather long. If the reader sees long phrases repeating, he/she has the reflex to skip them. He/she will also skip the slightly modified ones that hide details."]}),"\n",(0,t.jsxs)(n.p,{children:["3/ Using ",(0,t.jsx)(n.code,{children:"code blocks"})," makes the references stand out. So the reader can relatively quickly map the ",(0,t.jsx)(n.code,{children:"referenced step"})," w/ the ",(0,t.jsx)(n.code,{children:"referencing step"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>o});var t=s(67294);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);