(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5777],{48687:(t,e,n)=>{"use strict";n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>m,default:()=>S,frontMatter:()=>c,metadata:()=>p,toc:()=>d});var r=n(85893),o=n(11151),a=n(93598);const i={text:"package com.crispico.leave_management.demoMode;\n\nimport com.crispico.foundation.testGoodies.DemoModeService;\nimport com.crispico.leave_management.BaseDbPopulator;\nimport com.crispico.leave_management.BaseDbPopulatorSql;\n\n/**\n * @author Cristian Spiescu\n */\n// #region demo-mode-class\npublic class DemoModeServiceLeaveManagement extends DemoModeService {\n\t\n\t@Override\n\tprotected void populateDbForDemo() {\n\t\t// TODO we need to move the code from BaseDbPopulator, here. I didn't do it now, because there are\n\t\t// a lot of branches that will report a conflict\n\t\tBaseDbPopulatorSql populatorSql = tg.create(BaseDbPopulatorSql.class);\n\t\tpopulatorSql.run();\n\n\t\t// TODO #31535, va fi sters atunci\n\t\tBaseDbPopulator populator = tg.create(BaseDbPopulator.class);\n\t\tpopulator.run();\n// #endregion\n\t}\n\n}\n",path:"leave-management/leave-management-server/src/test/java/com/crispico/leave_management/demoMode/DemoModeServiceLeaveManagement.java"};var s=n(37548);const l={text:"spring:\r\n    main:\r\n        # for beans such as nowService\r\n        allow-bean-definition-overriding: true\r\nfoundation:\r\n    security:\r\n        remember-me:\r\n            enabled: true\r\n\r\n    # need to have access to scheduled taks for DemoRunService client TAD test\r\n    scheduled-task-service:\r\n      organizations: DEFAULT\r\n\r\n#region demo-mode-yml\r\ntest-goodies:\r\n    demo-mode:\r\n        # if false, then the service + scheduler is not instantiated\r\n        enabled: true\r\n        # CRON expression; how often should the repopulation happen\r\n        cron-repopulate-db: 0 0 0 * * *\r\n        # users to create on repopulation; if they exist, the password is updated\r\n        users:\r\n            - username: admin\r\n              password: admin\r\n            - username: test\r\n              password: test\r\n#endregion",path:"foundation-jhg-server/src/main/resources/config-foundation/application-test.yml"},c={},m=void 0,p={id:"foundation-server/Demo mode/Instructions for devs",title:"Instructions for devs",description:"We create a class that extends DemoModeService. It has only one method. It is called on app startup and via scheduler. It's purpose: to (re)populate the DB w/ demo data.",source:"@site/docs/foundation-server/Demo mode/Instructions for devs.md",sourceDirName:"foundation-server/Demo mode",slug:"/foundation-server/Demo mode/Instructions for devs",permalink:"/docusaurus/docs/foundation-server/Demo mode/Instructions for devs",draft:!1,unlisted:!1,editUrl:"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/blob/master/docusaurus/docs/foundation-server/Demo mode/Instructions for devs.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Demo mode",permalink:"/docusaurus/docs/foundation-server/Demo mode/"},next:{title:"IEntityWithOrganization",permalink:"/docusaurus/docs/foundation-server/IEntityWithOrganization"}},u={},d=[];function g(t){const e={admonition:"admonition",code:"code",em:"em",p:"p",...(0,o.a)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:[(0,r.jsx)(a.h8,{s:"1"})," We create a class that extends ",(0,r.jsx)(e.code,{children:"DemoModeService"}),". It has only one method. It is called on app startup and via scheduler. It's purpose: to (re)populate the DB w/ demo data."]}),"\n",(0,r.jsx)(a.Tm,{src:i,region:"demo-mode-class"}),"\n",(0,r.jsx)(e.admonition,{type:"tip",children:(0,r.jsxs)(e.p,{children:["Probably your users are ... users, not devs. We recommend to have data that looks good to them. E.g. instead ",(0,r.jsx)(e.em,{children:"User1"}),", ",(0,r.jsx)(e.em,{children:"User2"}),", ",(0,r.jsx)(e.em,{children:"MyUser"})," you might prefer ",(0,r.jsx)(e.em,{children:"John Doe"}),", ",(0,r.jsx)(e.em,{children:"Alex Doyle"}),", etc."]})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(a.h8,{s:"2"})," Instantiate the bean"]}),"\n",(0,r.jsx)(a.Tm,{src:s.Z,region:"demo-mode-bean"}),"\n",(0,r.jsx)(e.admonition,{type:"danger",children:(0,r.jsx)(e.p,{children:"The class should be instantiated ONLY for the demo profile. Don't forget this."})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(a.h8,{s:"3"})," Optional, modify config params"]}),"\n",(0,r.jsx)(e.p,{children:"Below are the available params, together w/ their default config:"}),"\n",(0,r.jsx)(a.sS,{language:"yml",src:l,region:"demo-mode-yml"}),"\n",(0,r.jsx)(e.p,{children:"We consider the above params as being reasonable defaults. But feel free to adjust them. That's why they are configurable \ud83d\ude0a."})]})}function S(t={}){const{wrapper:e}={...(0,o.a)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(g,{...t})}):g(t)}},93598:(t,e,n)=>{"use strict";n.d(e,{sS:()=>p,Tm:()=>u,M_:()=>d,Fb:()=>g,JR:()=>S,lj:()=>c,h8:()=>m});n(67294);class r{static now(){return new Date}static consoleLogJson(t,e){void 0===e&&(e=!0);const n=JSON.stringify(t,(()=>{const t=new WeakSet;return(e,n)=>{if(!e.startsWith("__react")){if("object"==typeof n&&null!==n){if(t.has(n))return;t.add(n)}return n}}})(),2);return e&&console.log(n),n}static substringAfter(t,e,n){const r=n?t.lastIndexOf(e):t.indexOf(e);return r<0?t:t.substring(r+e.length)}static setTimeoutPromise(t,e){return new Promise((n=>setTimeout((()=>{const e=t?.();n(e)}),e)))}}var o=n(9286),a=n(25142),i=n(73981),s=n(91262),l=n(85893);const c=t=>{return(0,l.jsx)(l.Fragment,{children:(0,l.jsxs)("a",{target:"_blank",href:(e=t.children,(e.startsWith("foundation/")?"https://gitlab.xops-online.com/foundation/foundation/-/tree/main/"+r.substringAfter(e,"foundation/"):"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/tree/master/"+e)+(t.lineNumbers?.[0]?`#L${t.lineNumbers[0]}`:"")+(t.lineNumbers?.[1]?`-L${t.lineNumbers[1]}`:"")),children:[r.substringAfter(t.children,"/",!0),t.region&&(0,l.jsxs)("small",{children:["\xa0",(0,l.jsxs)("i",{children:["(region ",t.region,",\xa0",t.lineNumbers[0]===t.lineNumbers[1]?(0,l.jsxs)(l.Fragment,{children:["at line ",t.lineNumbers[0]]}):(0,l.jsxs)(l.Fragment,{children:["between lines [",t.lineNumbers[0],", ",t.lineNumbers[1],"])"]})]})]})]})});var e},m=t=>(0,l.jsx)(a.Z,{circular:!0,color:"blue",children:t.s}),p=t=>{let{src:{text:e,path:n},region:r,...a}=t;const i=new RegExp(`#region\\s*${r}[^\\r\\n]*\\r?\\n(.*?)#endregion`,"s").exec(e);if(!i)throw new Error(`In file = ${n}, cannot find region = ${r}, i.e. a portion like:\n\n#region ${r}\n...\n#endregion`);let s,m=1,p=-1;for(s=0;s<i.index+i[0].length;s++)"\n"===e[s]&&m++,-1===p&&s>=i.index&&(p=m);p++,m--;let u=i[1];u=/(.*)(\r?\n.*?$)/gs.exec(u)[1],u="\n"+u;const d=u.match(/\n(\s)*\S/);let g;if(d&&(g=d[1])){const t=new RegExp(`\\n(${g}*)\\S`,"g");let e,n=-1;for(;null!==(e=t.exec(u));)(n<0||n>e[1].length)&&(n=e[1].length);const r=g.repeat(n);u=u.replace(new RegExp("\\n"+r,"g"),"\n")}return u=u.substring(1),(0,l.jsx)(l.Fragment,{children:(0,l.jsx)(o.Z,{title:(0,l.jsxs)(l.Fragment,{children:["Snippet extracted from ",(0,l.jsx)(c,{region:r,lineNumbers:[p,m],children:n})]}),...a,children:u})})},u=t=>(0,l.jsx)(p,{language:"java",...t}),d=t=>(0,l.jsx)(p,{language:"ts",...t}),g=t=>(0,l.jsx)(s.Z,{children:()=>(0,l.jsx)(i.J6,{recordedTestsUrl:"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/raw/master/leave-management/leave-management-react/public/recordedTests/recordedTest.json",includeCredentialsInJsonRequestRegex:/https:\/\/gitlab\.xops-online\.com\/*/,...t})}),S=t=>(0,l.jsx)(s.Z,{children:()=>(0,l.jsx)(i.J6,{recordedTestsUrl:"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/raw/master/leave-management/leave-management-react/public/recordedTestsServer/recordedTest.json",includeCredentialsInJsonRequestRegex:/https:\/\/gitlab\.xops-online\.com\/*/,...t})})},13411:t=>{function e(t){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}e.keys=()=>[],e.resolve=e,e.id=13411,t.exports=e},37548:(t,e,n)=>{"use strict";n.d(e,{Z:()=>r});const r={text:'package com.crispico.leave_management;\n\nimport java.net.UnknownHostException;\n\nimport javax.inject.Inject;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.core.env.Environment;\n\nimport com.crispico.foundation.server.ServerUtils;\nimport com.crispico.foundation.server.clientErrorLogger.ClientErrorLoggerControllerTadHelper;\nimport com.crispico.foundation.server.distributedTracing.DependenciesFinder;\nimport com.crispico.foundation.server.jhipster.generated.JhipsterRuntimeApp;\nimport com.crispico.foundation.server.jhipster.lib.config.JHipsterConstants;\nimport com.crispico.foundation.server.organizationControllerTadHelper.OrganizationControllerTadHelper;\nimport com.crispico.foundation.server.performance_logging.AbstractPerformanceLoggingAspect;\nimport com.crispico.foundation.server.service.settingsEntityService.SettingsCache;\nimport com.crispico.foundation.server.spring.FoundationServerApp;\nimport com.crispico.leave_management.demoMode.DemoModeServiceLeaveManagement;\nimport com.crispico.leave_management.performance_logging.PerformanceLoggingAspect;\nimport com.crispico.leave_management.service.TaskService;\nimport com.crispico.leave_management.service.employeeService.EmployeeService.Color;\nimport com.crispico.leave_management.service.employeeService.EmployeeService.EmployeeServiceDemoReportSettings;\nimport com.crispico.leave_management.service.employeeService.EmployeeService.EmployeeServiceHeaderSettings;\n\nimport brave.Tracer;\nimport graphql.schema.GraphQLSchema;\nimport graphql.schema.idl.SchemaPrinter;\n/**\n * @author Cristian Spiescu\n */\n@FoundationServerApp\n@Import(LeaveManagementScheduledTaskConfig.class)\npublic class LeaveManagementApp extends JhipsterRuntimeApp {\n\t\n\tprotected static class AfterStartup {\n\t\t\t\t\n\t\t@Inject\n\t\tprotected Environment environment;\n\n\t\t@Inject\n\t\tprotected void postCreate(GraphQLSchema schema) {\t\t\t\n\t        SchemaPrinter schemaPrinter = new SchemaPrinter(SchemaPrinter.Options.defaultOptions());\n\t        System.out.println(schemaPrinter.print(schema));\n\t        System.out.println();\n\t\t}\n\t}\n\t\n\t@Autowired\n\tTracer tracer;\n\n\tpublic LeaveManagementApp(Environment env) {\n\t\tsuper(env);\n\t}\n\n\tpublic static void main(String[] args) throws UnknownHostException {\n\t\tJhipsterRuntimeApp.main(LeaveManagementApp.class, args);\n\t}\n\n\t@Bean\n\tprotected AfterStartup afterStartup() {\n\t\treturn new AfterStartup();\n\t}\n\t\n\t/*\n\t * Override is enough, because the @Bean, @DependsOn and @ConditionalOnProperty annotations from the superclass are inherited\n\t */\n\t@Override\n\tpublic AbstractPerformanceLoggingAspect performanceLoggingAspect() {\n\t\tPerformanceLoggingAspect result = new PerformanceLoggingAspect();\n\t\treturn result;\n\t}\n\t\n\t@Bean\n\tpublic SettingsCache<TaskService.CreateDailyTasksSettings> createDailyTasksSettings() {\n\t\tTaskService.CreateDailyTasksSettings defaultValue = new TaskService.CreateDailyTasksSettings();\n\t\tdefaultValue.createInWeekend = false;\n\t\treturn new SettingsCache<>(defaultValue);\n\t}\n\n\t@Bean\n\tpublic SettingsCache<TaskService.TaskSalarySettings> taskSalarySettings() {\n\t\treturn new SettingsCache<>(new TaskService.TaskSalarySettings());\n\t}\n\t\n\t@Bean\n\tpublic SettingsCache<EmployeeServiceDemoReportSettings> employeeServiceDemoReportSettings() {\n\t\treturn new SettingsCache<>(new EmployeeServiceDemoReportSettings());\n\t}\n\t\n\t// #region settings1-bean\n\t@Bean\n\tpublic SettingsCache<EmployeeServiceHeaderSettings> employeeServiceHeaderSettings() {\n\t\treturn new SettingsCache<>(ServerUtils.jsonLike(new EmployeeServiceHeaderSettings(), s -> {\n\t\t\ts.showBasicSettingsButton = false;\n\t\t\ts.settingsButtonColor = Color.blue;\n\t\t\ts.postItMessage = "";\n\t\t}));\n\t}\n\t// #endregion\n\t\n\t@Bean\n\tpublic DependenciesFinder dependenciesFinder() {\n\t\treturn new DependenciesFinder();\n\t}\n\t\n\t// #region tad-helper-bean\n\t@Bean\n\t@Profile(JHipsterConstants.SPRING_PROFILE_TEST)\n\tpublic ClientErrorLoggerControllerTadHelper clientErrorLoggerControllerTadHelper() {\n\t\treturn new ClientErrorLoggerControllerTadHelper();\n\t}\n\t\n\t@Bean\n\t@Profile(JHipsterConstants.SPRING_PROFILE_TEST)\n\tpublic OrganizationControllerTadHelper organizationControllerTadHelper() {\n\t\treturn new OrganizationControllerTadHelper();\n\t}\n\t// #endregion\n\n// CS: am dezactivat zipkin pentru ca aveam multa poluare in consola; @see pom.xml\t\n\t\n//\t@Bean\n//\tpublic Sampler defaultSampler() {\n//\t\treturn Sampler.ALWAYS_SAMPLE;\n//\t}\n//\n//\t@Bean\n//\tpublic JdbcEventListener jdbcEventListner() {\n//\t\treturn new JdbcEventListener() {\n//\n//\t\t\tpublic Map<String, String> result = new TreeMap<>();\n//\t\t\tpublic List<Map<String, String>> results = new ArrayList<Map<String, String>>();\n//\n//\t\t\t@Override\n//\t\t\tpublic void onAfterResultSetGet(ResultSetInformation resultSetInformation, String columnLabel, Object value, SQLException e) {\n//\t\t\t\ttry {\n//\t\t\t\t\tString tableName = resultSetInformation.getResultSet().getMetaData().getTableName(1);\n//\t\t\t\t\tif (!result.containsKey("tableName")) {\n//\t\t\t\t\t\tresult.put("tableName", tableName);\n//\t\t\t\t\t}\n//\t\t\t\t} catch (SQLException e1) {\n//\t\t\t\t\te1.printStackTrace();\n//\t\t\t\t}\n//\t\t\t\tresult.put(convertColumnLabelToColumnName(columnLabel, resultSetInformation), value != null ? value.toString() : null);\n//\t\t\t}\n//\n//\t\t\t@Override\n//\t\t\tpublic void onAfterResultSetNext(ResultSetInformation resultSetInformation, long timeElapsedNanos, boolean hasNext, SQLException e) {\n//\t\t\t\tif (!result.isEmpty()) {\n//\t\t\t\t\tMap<String, String> resultCopy = new TreeMap<String, String>();\n//\t\t\t\t\tresultCopy.putAll(result);\n//\t\t\t\t\tresults.add(resultCopy);\n//\t\t\t\t\tresult.clear();\n//\t\t\t\t}\n//\t\t\t}\n//\n//\t\t\t@Override\n//\t\t\tpublic void onAfterCommit(ConnectionInformation connectionInformation, long timeElapsedNanos, SQLException e) {\n//\t\t\t\tSpan newSpan = tracer.currentSpan();\n//\t\t\t\ttry (Tracer.SpanInScope ws = tracer.withSpanInScope(newSpan.start())) {\n//\t\t\t\t\tnewSpan.tag("Query results", processResults(results));\n//\t\t\t\t} finally {\n//\t\t\t\t\tnewSpan.finish();\n//\t\t\t\t}\n//\t\t\t\tSystem.out.println("Query results: " + processResults(results));\n//\t\t\t\tresults.clear();\n//\t\t\t}\n//\n//\t\t\tpublic String processResults(List<Map<String, String>> results) {\n//\t\t\t\tString tableName = null, resultAsString = "";\n//\t\t\t\tif (results.size() == 0) {\n//\t\t\t\t\treturn "[]";\n//\t\t\t\t}\n//\n//\t\t\t\tCollections.sort(results, new Comparator<Map<String, String>>() {\n//\t\t\t\t\t@Override\n//\t\t\t\t\tpublic int compare(Map<String, String> result1, Map<String, String> result2) {\n//\t\t\t\t\t\tString tableName1 = result1.get("tableName");\n//\t\t\t\t\t\tif (tableName1 == null) {\n//\t\t\t\t\t\t\t// CS: I don\'t know this code; but sometimes it enters here and would give a NPE\n//\t\t\t\t\t\t\t// I think the issue is deeper; because when this happens, the error persist; so\n//\t\t\t\t\t\t\t// the system is in a dubious state. To be investigated.\n//\t\t\t\t\t\t\treturn -1;\n//\t\t\t\t\t\t}\n//\t\t\t\t\t\treturn tableName1.compareTo(result2.get("tableName"));\n//\t\t\t\t\t}\n//\t\t\t\t});\n//\n//\t\t\t\tfor (int i = 0; i < results.size(); i++) {\n//\t\t\t\t\tMap<String, String> result = results.get(i);\n//\n//\t\t\t\t\tString currentTableName = result.get("tableName");\n//\t\t\t\t\tif (currentTableName != "") {\n//\t\t\t\t\t\t// currentTableName can be empty when the query looks like "SELECT COUNT..."\n//\t\t\t\t\t\t// in this case, the table name can not be retrieved from ResultSetMetaData, but this query and its result can be seen on zipkin\n//\t\t\t\t\t\tif (currentTableName != tableName) {\n//\t\t\t\t\t\t\ttableName = currentTableName;\n//\t\t\t\t\t\t\tresultAsString += (i != 0 ? "\\n" : "") + "// " + currentTableName + "\\n " + "[";\n//\t\t\t\t\t\t}\n//\t\t\t\t\t\tresultAsString += result.toString() + (i == results.size() - 1 || (i + 1 < results.size() && results.get(i + 1).get("tableName") != currentTableName) ? "]" : ", \\n");\n//\t\t\t\t\t}\n//\t\t\t\t}\n//\t\t\t\treturn resultAsString;\n//\t\t\t}\n//\n//\t\t\tpublic String convertColumnLabelToColumnName(String columnLabel, ResultSetInformation resultSetInformation) {\n//\t\t\t\ttry {\n//\t\t\t\t\tResultSetMetaData metaData = resultSetInformation.getResultSet().getMetaData();\n//\t\t\t\t\tfor (int i = 1; i <= metaData.getColumnCount(); i++) {\n//\t\t\t\t\t\tif (metaData.getColumnLabel(i).toUpperCase().equals(columnLabel.toUpperCase())) {\n//\t\t\t\t\t\t\treturn metaData.getColumnName(i).toLowerCase();\n//\t\t\t\t\t\t}\n//\t\t\t\t\t}\n//\t\t\t\t} catch (SQLException e) {\n//\t\t\t\t\te.printStackTrace();\n//\t\t\t\t}\n//\t\t\t\treturn columnLabel;\n//\t\t\t}\n//\t\t};\n//\t}\n\t\n// TODO CS/UCS: cand va merge treaba, sa incercam ceva de genul:\n// deci ea ar crea bean-uri dinamic; \n//\t@Bean\n//\tpublic SettingsService settingsService() {\n//\t\treturn new SettingsService(CreateDailyTasksSettings.class, ...);\n//\t}\n\t\n\t// #region demo-mode-bean\n\t@Bean\n\t@Profile(JHipsterConstants.SPRING_PROFILE_TEST)\n\tpublic DemoModeServiceLeaveManagement demoModeService() {\n\t\treturn new DemoModeServiceLeaveManagement();\n\t}\n\t// #endregion\n}\n',path:"leave-management/leave-management-server/src/main/java/com/crispico/leave_management/LeaveManagementApp.java"}},24654:()=>{},62183:()=>{},13024:()=>{},62715:()=>{},13611:()=>{},28353:()=>{},1210:()=>{},43454:()=>{}}]);