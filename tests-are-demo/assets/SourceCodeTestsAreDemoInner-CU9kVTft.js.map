{"version":3,"file":"SourceCodeTestsAreDemoInner-CU9kVTft.js","sources":["../../src/appTestingTadItself/reporterFromSlaveToMaster/ReporterFromSlaveToMasterTestsAreDemoInner2.ts","../../src/appTestingTadItself/reporterFromSlaveToMaster/ReporterFromSlaveToMasterTestsAreDemoInner.ts","../../src/appTestingTadItself/sourceCode/SourceCode2TestsAreDemoInner.tsx","../../src/appTestingTadItself/sourceCode/SourceCodeTestsAreDemoInner.tsx"],"sourcesContent":["/**\n * We have this separate file, to have an error stack trace that has 2 lines (i.e. for 2 files).\n */\nexport function throwError(message: string) {\n    throw new Error(message);\n}","import { Scenario } from \"../../lib\";\nimport { throwError } from \"./ReporterFromSlaveToMasterTestsAreDemoInner2\";\n\nexport const ReporterFromSlaveToMasterTestsAreDemoInnerName = \"ReporterFromSlaveToMasterTestsAreDemoInner\";\nexport class ReporterFromSlaveToMasterTestsAreDemoInner {\n\n    /**\n     * We are testing that the error shows the correct file, line number and function name. Hence avoid editing this\n     * file in a way that would change these. Or, if you edit, please update the corresponding test.\n     */\n    @Scenario(\"This is the 'inner' test; see the 'outer' test for info\")\n    async innerTest() {\n        let dummy = 1;\n        throwError(\"Some error\");\n        dummy = 2;\n    }\n}","import React from 'react'; \nimport { tad } from \"../../lib\";\n\n/**\n * We have this separate file, to have an other file in source code, for \"whenOtherFile\" test.\n */\nexport async function aFunctionFromAnotherFile() {\n    await tad.showSpotlight(\"Other file stop.\");\n}","import React from 'react';\nimport { Scenario, tad } from \"../../lib\";\nimport { aFunctionFromAnotherFile } from \"./SourceCode2TestsAreDemoInner\";\n\n/**\n * Please avoid modifying this file, because it's used during testing.\n * But if you do, please modify the EXPECTED_... family of constants from the file SourceCodeTestsAreDemo.\n */\nexport const SourceCodeTestsAreDemoInnerName = \"SourceCodeTestsAreDemoInner\";\nexport class SourceCodeTestsAreDemoInner {\n\n    @Scenario(\"inner\")\n    async inner() {\n        await tad.showSpotlight(\"First stop\");\n        await tad.showSpotlight(\"Second stop\");\n\n        /* \n         * These lines are empty on purpose, to test the scroll feature.\n         * We add a lot of them hoping to be robust in case different browsers\n         * render w/ slightly different amount of pixels.\n         * \n         * \n         * \n         * \n         * \n         * \n         * \n         * \n         * \n         * \n         * \n         * \n         * \n         * \n         */\n        await tad.showSpotlight(\"Third stop\");\n        await aFunctionFromAnotherFile();\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}"],"names":["throwError","message","__name","ReporterFromSlaveToMasterTestsAreDemoInnerName","_ReporterFromSlaveToMasterTestsAreDemoInner","ReporterFromSlaveToMasterTestsAreDemoInner","__decorateClass","Scenario","aFunctionFromAnotherFile","tad","SourceCodeTestsAreDemoInnerName","_SourceCodeTestsAreDemoInner","SourceCodeTestsAreDemoInner"],"mappings":"iKAGO,SAASA,EAAWC,EAAiB,CAClC,MAAA,IAAI,MAAMA,CAAO,CAC3B,CAFgBC,EAAAF,EAAA,0MCAT,MAAMG,EAAiD,6CACjDC,EAAN,MAAMA,CAA2C,CAOpD,MAAM,WAAY,CAEdJ,EAAW,YAAY,CAE3B,CACJ,EAZwDE,EAAAE,EAAA,8CAAjD,IAAMC,EAAND,EAOGE,EAAA,CADLC,EAAS,yDAAyD,CAAA,EAN1DF,EAOH,UAAA,WAAA,ECLV,eAAsBG,GAA2B,CACvC,MAAAC,EAAI,cAAc,kBAAkB,CAC9C,CAFsBP,EAAAM,EAAA,sNCEf,MAAME,EAAkC,8BAClCC,EAAN,MAAMA,CAA4B,CAGrC,MAAM,OAAQ,CACJ,MAAAF,EAAI,cAAc,YAAY,EAC9B,MAAAA,EAAI,cAAc,aAAa,EAqB/B,MAAAA,EAAI,cAAc,YAAY,EACpC,MAAMD,EAAyB,CACnC,CAqBJ,EAjDyCN,EAAAS,EAAA,+BAAlC,IAAMC,EAAND,EAGGL,EAAA,CADLC,EAAS,OAAO,CAAA,EAFRK,EAGH,UAAA,OAAA"}