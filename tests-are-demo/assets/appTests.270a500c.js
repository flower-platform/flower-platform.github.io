import{c as d,s as n,a as l,T as s,b as u,R as h,d as g}from"./index.e39bea13.js";import{c as w,t as e}from"./TestsAreDemoFunctions.32242885.js";const{testids:t,scenarios:o}=s;describe("Todos",()=>{before(async()=>{w(h.createElement(g,null)),await e.waitForCommunicationFinished()}),it([o.rendererTodos,o.rendererTodo].join(";"),async()=>{let a=e.screenCapturing.getByTestId(t.todoItem+"_0");e.cc("`Todo.priority` -> color of the top border"),await e.assertWaitable.include(a.className,d),e.cc("`Todo.text`");let i=e.withinCapturing(a).getByTestId(t.todoItemCheckboxLabel);await e.assertWaitable.equal(i.textContent,n[0].text),e.cc("`Todo.done`: when `true`, we 'line through' the text"),await e.assertWaitable.equal(i.style.textDecoration,"line-through"),e.cc("`Todo.done`: when `true` we check the checkbox"),await e.assertWaitable.isTrue(e.withinCapturing(a).getByRole("checkbox").checked),e.demoForEndUserHide(),a=e.screenCapturing.getByTestId(t.todoItem+"_2"),e.cc("`Todo.priority` -> color of the top border"),await e.assertWaitable.include(a.className,l),e.cc("`Todo.text`"),i=e.withinCapturing(a).getByTestId(t.todoItemCheckboxLabel),await e.assertWaitable.equal(i.textContent,n[2].text),e.cc("`Todo.done`: when `false`, we don't 'line through' the text"),await e.assertWaitable.notEqual(i.style.textDecoration,"line-through"),e.cc("`Todo.done`: and we uncheck the checkbox"),await e.assertWaitable.isFalse(e.withinCapturing(a).getByRole("checkbox").checked),e.demoForEndUserShow(),e.cc("Total number of Todos"),await e.assertWaitable.equal(e.screenCapturing.getByTestId(t.total).textContent,"6"),e.cc("Number of Todos w/ priority = Low"),await e.assertWaitable.equal(e.screenCapturing.getByTestId(t.totalLow).textContent,"1"),e.cc("Number of Todos w/ priority = Normal"),await e.assertWaitable.equal(e.screenCapturing.getByTestId(t.totalNormal).textContent,"3"),e.cc("Number of Todos w/ priority = High"),await e.assertWaitable.equal(e.screenCapturing.getByTestId(t.totalHigh).textContent,"2")}),it([o.whenAddThenForm,o.formTodo].join(";"),async()=>{e.cc("Let's add a new Todo"),await e.userEventWaitable.click(e.screenCapturing.getByTestId(s.testids.add)),e.cc("Please observe that this text field is already focused. So you can directly start typing, w/o needing to click here first");const a=e.withinCapturing(e.screenCapturing.getByTestId(t.inputText)).getByRole("textbox");e.demoForEndUserHideNext(),await e.assertWaitable.equal(document.activeElement,a),await e.userEventWaitable.type(a,"My task"),await e.userEventWaitable.click(e.screenCapturing.getByTestId(s.testids.save)),e.cc("The newly added Todo appears at the bottom of the list");let i=e.screenCapturing.getByTestId(t.todoItem+"_6"),r=e.withinCapturing(i).getByTestId(t.todoItemCheckboxLabel);await e.assertWaitable.equal(r.textContent,"My task")}),it(o.whenCheckbox,async()=>{let a=e.screenCapturing.getByTestId(t.todoItem+"_1"),i=e.withinCapturing(a).getByTestId(t.todoItemCheckboxLabel);e.cc("When we solve the Todo, we click on the text or checkbox"),await e.userEventWaitable.click(i),e.cc("The checkbox becomes checked, and the text is 'line-through'"),await e.assertWaitable.isTrue(e.withinCapturing(a).getByRole("checkbox").checked),e.demoForEndUserHide(),await e.userEventWaitable.click(i),e.cc("Toggled back from done -> not done"),await e.assertWaitable.isFalse(e.withinCapturing(a).getByRole("checkbox").checked)}),it([o.whenUp,o.whenDown].join(";"),async()=>{e.cc(`We may move the Todo up. Now '${n[1].text}' is the second`);let a=e.screenCapturing.getByTestId(t.todoItem+"_1");await e.userEventWaitable.click(e.withinCapturing(a).getByTestId(t.up)),a=e.screenCapturing.getByTestId(t.todoItem+"_0"),e.cc(`And after now it moved up, so '${n[1].text}' is the first`),await e.assertWaitable.equal(e.withinCapturing(a).getByTestId(t.todoItemCheckboxLabel).textContent,n[1].text),await e.userEventWaitable.click(e.withinCapturing(a).getByTestId(t.down)),a=e.screenCapturing.getByTestId(t.todoItem+"_0"),e.cc("Element [0] moved down and is now element [1], as in the initial setup"),await e.assertWaitable.equal(e.withinCapturing(a).getByTestId(t.todoItemCheckboxLabel).textContent,n[0].text)}),it([o.whenDoubleClickThenForm,o.formTodo].join(";"),async()=>{e.demoForEndUserHide(),await e.userEventWaitable.dblClick(e.screenCapturing.getByTestId(t.todoItem+"_1")),await e.userEventWaitable.click(e.screenCapturing.getByTestId(t.cancel)),await e.assertWaitable.notExists(e.screenCapturing.queryByTestId(t.form))}),it.only([o.whenEditThenForm,o.formTodo].join(";"),async()=>{e.cc("A Todo may be edited");let a=e.screenCapturing.getByTestId(t.todoItem+"_1");await e.userEventWaitable.click(e.withinCapturing(a).getByTestId(t.edit));const i=e.withinCapturing(e.screenCapturing.getByTestId(t.inputText)).getByRole("textbox");await e.userEventWaitable.type(i,"; some updates"),e.cc("We may check/uncheck for the editor as well"),await e.userEventWaitable.click(e.screenCapturing.getByTestId(t.formCheckbox)),e.cc("We also have the notion of priority");const r=e.screenCapturing.getByTestId(t.formPriority);await e.userEventWaitable.click(e.withinCapturing(r).getByRole("button",{name:/low/i})),await e.userEventWaitable.click(e.screenCapturing.getByTestId(s.testids.save)),a=e.screenCapturing.getByTestId(t.todoItem+"_1"),e.cc("The Todo was updated");const c=e.withinCapturing(a).getByTestId(t.todoItemCheckboxLabel);await e.assertWaitable.equal(c.textContent,n[1].text+"; some updates"),e.demoForEndUserHide(),await e.assertWaitable.include(a.className,u),await e.assertWaitable.equal(c.style.textDecoration,"line-through"),await e.assertWaitable.isTrue(e.withinCapturing(a).getByRole("checkbox").checked)}),it(o.whenDelete,async()=>{e.cc("A Todo may be deleted"),e.demoForEndUserHide();let a=e.screenCapturing.getByTestId(t.todoItem+"_0");await e.userEventWaitable.click(e.withinCapturing(a).getByTestId(t.delete)),await e.userEventWaitable.click(e.screenCapturing.getByTestId(t.deleteNo)),e.cc("The Todo wasn't deleted"),await e.assertWaitable.equal(e.withinCapturing(a).getByTestId(t.todoItemCheckboxLabel).textContent,n[0].text),e.demoForEndUserShow(),await e.userEventWaitable.click(e.withinCapturing(a).getByTestId(t.delete)),await e.userEventWaitable.click(e.screenCapturing.getByTestId(t.deleteYes)),e.cc("The Todo was deleted. So the second element (index 1) became element the first element (index 0)"),a=e.screenCapturing.getByTestId(t.todoItem+"_0"),await e.assertWaitable.include(e.withinCapturing(a).getByTestId(t.todoItemCheckboxLabel).textContent,n[1].text)})});
