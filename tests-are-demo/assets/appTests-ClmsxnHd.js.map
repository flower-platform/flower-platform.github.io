{"version":3,"file":"appTests-ClmsxnHd.js","sources":["../../src/app/EmployeeDashboardNoDecoratorsTestsAreDemo.tsx","../../src/app/EmployeeDashboardTestsAreDemo.tsx","../../src/app/todos/TodosTestsAreDemo.tsx","../../src/app/appTests.tsx"],"sourcesContent":["import { Comment, Scenario } from \"../lib\";\n\nexport class EmployeeDashboardNoDecoratorsTestsAreDemo {\n\n    annotation() {\n        Comment(`\n            If your project doesn't support TypeScript decorators, we offer a fallback solution, which we name \"pseudo\" annotations.\n\n            Add functions that named \"annotation...\". If the name is just \"annotation\", then we consider it as being associated to the class.\n            Otherwise, e.g. \"annotation1\", we consider it as being associated with the next function.\n\n            Within such a \"pseudo\" annotation function, we expect you to invoke directly the annotation functions / decorators. We built them\n            in such a way to support this dual working mode.\n        `)\n    }\n    \n    annotation1() {\n        Scenario(\"WHEN click on 'Brodcast message', THEN a popup with textbox opens, AND WHEN message is written and 'Send' is clicked, THEN an email is sent to all employees\");\n    }\n    whenClickBroadcastNotification() { };\n\n    annotation2() {\n        Comment(\"The suffix after 'annotation' is not important. Probably the simplest solution is to name them 'annotation1', 'annotation2', etc.\");\n        Comment(\"Multiple comments are supported as well.\");\n        Scenario(\"WHEN something, THEN something else\");\n    }\n    whenSomething() { };\n}","import { ReactNode, useState } from \"react\";\nimport { Comment, DemoComponent, ITestsAreDemoTest, Scenario } from \"../lib\";\nimport { Container, Message } from \"semantic-ui-react\";\n\nexport const MessageInContainer = (props: { children: ReactNode }) => <Container><p /><Message info>{props.children}</Message></Container>\n\n@Comment(\"This is a fictional test, used to demonstrate various details of the existing annotations\")\n@Comment(`@Comment is a decorator meant for TestAreDemo classes and its functions (scenarios).\nWe also call these decorators: annotations, like in Java. And they exist also in Java. We tried\nto make them as similar as possible (the TypeScript variants vs the Java variants).`)\nexport class EmployeeDashboardTestsAreDemo {\n\n    @DemoComponent()\n    demo = () => () => <MessageInContainer>\n        This test: 1/ is not applied on a particular component and 2/ it doesn't contain testing logic. It's used as a showcase\n        for the annotation capabilities.\n    </MessageInContainer>\n\n    @DemoComponent(\"Another demo component\")\n    demo1 = () => () => <MessageInContainer>Another demo component, with a name.</MessageInContainer>\n\n    /**\n     * This is a typedoc **comment** w/ `Markdown` formatting.\n     * \n     * ```js\n     * // some code\n     * console.log(\"something\");\n     * ```\n     */\n    // Will not be included (and skipped) in the descriptor.\n\n    // idem\n    @Scenario(\"RENDERER for an overview of the employees\")\n    render() { }\n\n    @Comment(`\n        This is a comment that has multiple lines. Each line from the code\n        is rendered as a new line in the UI. The goal is to try to have a similar/familiar\n        layout between the file/code and what's rendered in the browser.\n\n        Empty new lines are also permitted. But not the trailing ones (start or end), like the one below.\n\n    `)\n    @Comment(\"Here we have multiple comments. This is the first.\")\n    @Comment(\"Second.\")\n    @Comment(\"Third and last.\")\n    @Scenario(\"WHEN click on 'New holiday', THEN the Holiday form opens, AND some data is prefilled based on the current logged in user\")\n    whenClickNewHoliday() { }\n\n}","import { tad } from \"../../lib\";\nimport { DemoComponent, Scenario } from \"../../lib/decorators\";\nimport { render } from \"../../lib/reactTestingLibraryCustomized\";\nimport { Todos, colorHigh, colorLow, colorNormal, entities, fields, someTodos, todosTestids as testids } from \"./Todos\";\n\nexport class TodosTestsAreDemo {\n\n    /**\n     * @img main.png\n     * \n     * 1) A row = one Todo. Priority -> color of the top border. You can use the checkbox to toggle \"done/not done\".\n     * 2) Some buttons for one row/Todo. ⬆️/⬇️ move the Todo up/down.\n     * 3) Totals. Serves also as legend for priority <-> color.\n     * \n     * @img form.png \n     */\n    @Scenario()\n    _quickInstructions() {\n    }\n\n    @DemoComponent()\n    demo = () => () => <Todos />;\n\n    async before() {\n        // TODO experimental; we use this in only 2 places for the moment\n        await tad.miniDb.clear()\n            .populate(\"Todo\", 1, 3);\n\n        render(<Todos />);\n        await tad.waitForCommunicationFinished();\n    }\n\n    /**\n     * * THEN1 `Todo.priority` -> color of the top border\n     * * THEN2 `Todo.text`\n     * * THEN3 `Todo.done`: when `true`, we 'line through' the text\n     * * THEN4 `Todo.done`: when `true` we **CHECK** the checkbox\n     * * THEN5 idem THEN1\n     * * THEN6 idem THEN2\n     * * THEN7 related to THEN3; `Todo.done`: when `false`, we **DON'T** 'line through' the text\n     * * THEN8 related to THEN4; `Todo.done`: and we **UNCHECK** the checkbox\n     * * THEN9 Total number of Todos\n     * * THEN10 Number of Todos w/ priority = Low\n     * * THEN11 Number of Todos w/ priority = Normal\n     * * THEN12 Number of Todos w/ priority = High\n     */\n    @Scenario()\n    async whenScreenTodosShows() {\n        let item = tad.screenCapturing.getByTestId(testids.todoItem + \"_0\")\n        tad.ref(\"THEN1\");\n        await tad.assertWaitable.include(item.className, tad.miniDb.getDerived(entities.Todo, 1, fields.Todo.priority, colorHigh));\n        tad.ref(\"THEN2\");\n        let label = tad.withinCapturing(item).getByTestId(testids.todoItemCheckboxLabel);\n        await tad.assertWaitable.equal(label.textContent, tad.miniDb.get(entities.Todo, 1, fields.Todo.text)); // or maybe: tad.miniDb.get(entities.Todo, 1, e => e.text)\n        tad.ref(\"THEN3\");\n        await tad.assertWaitable.equal(label.style.textDecoration, tad.miniDb.getDerived(entities.Todo, 1, fields.Todo.done, \"line-through\"));\n        tad.ref(\"THEN4\");\n        await tad.assertWaitable.equal(tad.withinCapturing(item).getByRole<HTMLInputElement>('checkbox').checked, tad.miniDb.getDerived(entities.Todo, 1, fields.Todo.done, true));\n\n        tad.demoForEndUserHide();\n        item = tad.screenCapturing.getByTestId(testids.todoItem + \"_2\")\n        tad.ref(\"THEN5\");\n        await tad.assertWaitable.include(item.className, colorNormal);\n        tad.ref(\"THEN6\");\n        label = tad.withinCapturing(item).getByTestId(testids.todoItemCheckboxLabel);\n        await tad.assertWaitable.equal(label.textContent, tad.miniDb.get(entities.Todo, 3, fields.Todo.text));\n        tad.ref(\"THEN7\");\n        await tad.assertWaitable.notEqual(label.style.textDecoration, \"line-through\");\n        tad.ref(\"THEN8\");\n        await tad.assertWaitable.isFalse(tad.withinCapturing(item).getByRole<HTMLInputElement>('checkbox').checked);\n        tad.demoForEndUserShow();\n\n        tad.ref(\"THEN9\");\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(testids.total).textContent, \"6\")\n        tad.ref(\"THEN10\");\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(testids.totalLow).textContent, \"1\")\n        tad.ref(\"THEN11\");\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(testids.totalNormal).textContent, \"3\")\n        tad.ref(\"THEN12\");\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(testids.totalHigh).textContent, \"2\")\n    }\n\n    /**\n     * * THEN the form opens\n     * * THEN1 first text field is already focused. So that people can directly start typing, w/o needing to click here first\n     * ---\n     * * WHEN2 type and save\n     * * THEN2 The newly added Todo appears at the bottom of the list\n     */\n    @Scenario()\n    async andWhenButtonAddClicked() {\n        tad.ref(\"WHEN\");\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.add));\n\n        tad.ref(\"THEN\");\n        // implicit test; not testing explicit open of form; if this doesn't work, the next steps will fail\n\n        await this.createNewTodo();\n\n        tad.ref(\"THEN2\");\n        let item = tad.screenCapturing.getByTestId(testids.todoItem + \"_6\")\n        let label = tad.withinCapturing(item).getByTestId(testids.todoItemCheckboxLabel);\n        await tad.assertWaitable.equal(label.textContent, \"My task\");\n    }\n\n    // I created this helper function UNDERNEATH the calling function to see how the screenshots are arranged in the MD report\n    private async createNewTodo() {\n        const textbox = tad.withinCapturing(tad.screenCapturing.getByTestId(testids.inputText)).getByRole('textbox');\n        tad.demoForEndUserHideNext(); // hiding this check because the object from the verification is ugly and not meaningful\n\n        tad.ref(\"THEN1\");\n        await tad.assertWaitable.equal(document.activeElement, textbox);\n\n        await this.anotherDummyHelperFunction();\n        await this.anotherDummyHelperFunction();\n\n        tad.ref(\"WHEN2\");\n        await tad.userEventWaitable.type(textbox, \"My task\");\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.save));\n    }\n\n    // this doeasn't test anything; it's here to illustrate 2 screenshots that belong to the same line\n    private async anotherDummyHelperFunction() {\n        const textbox = tad.withinCapturing(tad.screenCapturing.getByTestId(testids.inputText)).getByRole('textbox');\n        await tad.assertWaitable.isTrue(true);\n    }\n\n    /**\n     * * WHEN cf. title, because we have solved a todo\n     * * THEN1 The checkbox becomes checked, and the text is 'line-through'\n     * ---\n     * * WHEN2 clicked again\n     * * THEN2 Toggled back from done -> not done\n     */\n    @Scenario()\n    async andWhenCheckboxClicked() {\n        let item = tad.screenCapturing.getByTestId(testids.todoItem + \"_1\");\n        let label = tad.withinCapturing(item).getByTestId(testids.todoItemCheckboxLabel);\n\n        tad.ref(\"WHEN\")\n        await tad.userEventWaitable.click(label);\n        tad.ref(\"THEN1\");\n        await tad.assertWaitable.isTrue(tad.withinCapturing(item).getByRole<HTMLInputElement>('checkbox').checked);\n\n        tad.demoForEndUserHide();\n        tad.ref(\"WHEN2\");\n        await tad.userEventWaitable.click(label);\n        tad.ref(\"THEN2\");\n        await tad.assertWaitable.isFalse(tad.withinCapturing(item).getByRole<HTMLInputElement>('checkbox').checked);\n    }\n\n    private whenUpItem!: HTMLElement;\n\n    /**\n     * * THEN the Todo slides up\n     */\n    @Scenario()\n    async whenButtonUpClicked() {\n        tad.ref(\"WHEN\");\n        let item = tad.screenCapturing.getByTestId(testids.todoItem + \"_1\");\n        await tad.userEventWaitable.click(tad.withinCapturing(item).getByTestId(testids.up));\n        item = tad.screenCapturing.getByTestId(testids.todoItem + \"_0\");\n        tad.ref(\"THEN\");\n        await tad.assertWaitable.equal(tad.withinCapturing(item).getByTestId(testids.todoItemCheckboxLabel).textContent, \"Repair the bike\");\n\n        this.whenUpItem = item;\n    }\n\n    /**\n     * * THEN the Todo slides down\n     */\n    @Scenario()\n    async whenButtonDownClicked() {\n        let item = this.whenUpItem;\n\n        tad.ref(\"WHEN\");\n        await tad.userEventWaitable.click(tad.withinCapturing(item).getByTestId(testids.down));\n        item = tad.screenCapturing.getByTestId(testids.todoItem + \"_0\");\n        tad.ref(\"THEN\");\n        await tad.assertWaitable.equal(tad.withinCapturing(item).getByTestId(testids.todoItemCheckboxLabel).textContent, \"Buy groceries for next week\");\n    }\n\n    /**\n     * * THEN the form opens\n     * ---\n     * * WHEN2 press \"Cancel\" within the form\n     * * THEN2 the form closes\n     */\n    @Scenario()\n    async whenDoubleClick() {\n        tad.demoForEndUserHide();\n        tad.ref(\"WHEN\");\n        await tad.userEventWaitable.dblClick(tad.screenCapturing.getByTestId(testids.todoItem + \"_1\"));\n        tad.ref(\"THEN\");\n        // implicitly tested below\n        tad.ref(\"WHEN2\");\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.cancel));\n        tad.ref(\"THEN2\");\n        await tad.assertWaitable.notExists(tad.screenCapturing.queryByTestId(testids.form));\n    }\n\n    /**\n     * * THEN the form opens\n     * * WHEN1 type\n     * * WHEN2 use the check/uncheck from the editor as well (it's also possible to check/uncheck from the main screen)\n     * * WHEN3 priority\n     * ---\n     * * WHEN4 save the form\n     * * THEN1 see the modification cf. WHEN1\n     * * THEN2A see the modification cf. WHEN2\n     * * THEN2B see the modification cf. WHEN2\n     * * THEN3 see the modification cf. WHEN3\n     */\n    @Scenario()\n    async whenButtonEditClick() {\n        tad.ref(\"WHEN\");\n        let item = tad.screenCapturing.getByTestId(testids.todoItem + \"_1\");\n        await tad.userEventWaitable.click(tad.withinCapturing(item).getByTestId(testids.edit));\n\n        tad.ref(\"THEN\");\n        // tested implicitly; if the form doesn't open, the next steps fail\n\n        tad.ref(\"WHEN1\")\n        const textbox = tad.withinCapturing(tad.screenCapturing.getByTestId(testids.inputText)).getByRole('textbox');\n        await tad.userEventWaitable.type(textbox, \"; some updates\");\n        tad.ref(\"WHEN2\");\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.formCheckbox));\n        tad.ref(\"WHEN3\");\n        const group = tad.screenCapturing.getByTestId(testids.formPriority);\n        await tad.userEventWaitable.click(tad.withinCapturing(group).getByRole('button', { name: /low/i }));\n        tad.ref(\"WHEN4\");\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.save));\n\n        item = tad.screenCapturing.getByTestId(testids.todoItem + \"_1\");\n        tad.ref(\"THEN1\");\n        const label = tad.withinCapturing(item).getByTestId(testids.todoItemCheckboxLabel);\n        await tad.assertWaitable.equal(label.textContent, someTodos[1].text + \"; some updates\");\n        tad.demoForEndUserHide();\n        tad.ref(\"THEN2A\");\n        await tad.assertWaitable.equal(label.style.textDecoration, \"line-through\");\n        tad.ref(\"THEN2B\");\n        await tad.assertWaitable.isTrue(tad.withinCapturing(item).getByRole<HTMLInputElement>('checkbox').checked);\n        tad.ref(\"THEN3\");\n        await tad.assertWaitable.include(item.className, colorLow);\n    }\n\n    /**\n     * * WHEN1 click 'no' on the confirm popup\n     * * THEN1 the Todo was not removed\n     * ---\n     * * WHEN2 click again on the 'delete' button\n     * * WHEN3 click on 'yes', to confirm\n     * * THEN3 the Todo is removed\n     */\n    @Scenario()\n    async whenButtonDeleteClicked() {\n        tad.demoForEndUserHide();\n        tad.ref(\"WHEN\");\n        let item = tad.screenCapturing.getByTestId(testids.todoItem + \"_0\");\n        await tad.userEventWaitable.click(tad.withinCapturing(item).getByTestId(testids.delete));\n\n        tad.ref(\"WHEN1\");\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.deleteNo));\n        tad.ref(\"THEN1\");\n        await tad.assertWaitable.equal(tad.withinCapturing(item).getByTestId(testids.todoItemCheckboxLabel).textContent, someTodos[0].text);\n        tad.demoForEndUserShow();\n\n        tad.ref(\"WHEN2\");\n        await tad.userEventWaitable.click(tad.withinCapturing(item).getByTestId(testids.delete));\n        tad.ref(\"WHEN3\");\n        await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.deleteYes));\n        tad.ref(\"THEN3\");\n        item = tad.screenCapturing.getByTestId(testids.todoItem + \"_0\");\n        await tad.assertWaitable.include(tad.withinCapturing(item).getByTestId(testids.todoItemCheckboxLabel).textContent, someTodos[1].text); // include instead of equals, because we appended something in a step above\n    }\n\n}\n","import { DemoComponent, tad } from \"../lib\";\nimport { MiniDb } from \"../lib/miniDb/MiniDb\";\nimport { EmployeeDashboardNoDecoratorsTestsAreDemo } from \"./EmployeeDashboardNoDecoratorsTestsAreDemo\";\nimport { EmployeeDashboardTestsAreDemo, MessageInContainer } from \"./EmployeeDashboardTestsAreDemo\";\nimport { TodosTestsAreDemo } from \"./todos/TodosTestsAreDemo\";\n\n// TODO experimental\ntad.miniDb = new class extends MiniDb {\n    async populate(entityName: string, ...ids: any[]): Promise<MiniDb> {\n        for (let id of ids) {\n            const row = await fetch(\"https://my.server.com/getTodosForUser/1234/\" + id).then(r => r.json());\n            this.addRow(entityName, id, row);\n        }\n        return this;\n    }\n}();\n\ntad.addTests(\n    EmployeeDashboardTestsAreDemo,\n    EmployeeDashboardNoDecoratorsTestsAreDemo,\n    TodosTestsAreDemo\n);\n// tad.getTestsAreDemoSlave()?.master.setState({ testsToRun: {\n//     TodosTestsAreDemo: {\n//         screenTodos: true\n//     }\n// }});"],"names":["_EmployeeDashboardNoDecoratorsTestsAreDemo","Comment","Scenario","__name","EmployeeDashboardNoDecoratorsTestsAreDemo","MessageInContainer","props","jsxs","Container","jsx","Message","EmployeeDashboardTestsAreDemo","_a","__publicField","__decorateClass","DemoComponent","_TodosTestsAreDemo","Todos","tad","render","item","testids","entities","fields","colorHigh","label","colorNormal","textbox","group","someTodos","colorLow","TodosTestsAreDemo","MiniDb","entityName","ids","id","row","r"],"mappings":"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"}