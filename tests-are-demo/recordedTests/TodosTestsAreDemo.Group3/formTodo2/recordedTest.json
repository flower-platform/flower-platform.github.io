{"slides":[{"screenshot":"Todos_form_TodoForm__onChangeText","sourceFile":"TodosTestsAreDemo.tsx","sourceLine":161},{"screenshot":"Todos_form_TodoForm__onChangeDone","sourceFile":"TodosTestsAreDemo.tsx","sourceLine":164},{"screenshot":"Todos_form_TodoForm__onChangePriority","sourceFile":"TodosTestsAreDemo.tsx","sourceLine":167},{"screenshot":"TodoForm__onSave","sourceFile":"TodosTestsAreDemo.tsx","sourceLine":168},{"screenshot":"Todos_todoItem_1_TodoItem_1_onToggle","sourceFile":"TodosTestsAreDemo.tsx","sourceLine":173},{"screenshot":"Todos_todoItem_1_TodoItem_1_onToggle_REP1","sourceFile":"TodosTestsAreDemo.tsx","sourceLine":175},{"screenshot":"Todos_todoItem_1_TodoItem_1_onToggle_REP2","sourceFile":"TodosTestsAreDemo.tsx","sourceLine":176},{"screenshot":"Todos_todoItem_1__LAP","sourceFile":"TodosTestsAreDemo.tsx","sourceLine":177}],"sourceFiles":{"TodosTestsAreDemo.tsx":"import React from 'react'; import { Utils } from \"../../copied/Utils\";\nimport { tad } from \"../../lib\";\nimport { Comment, Only, Scenario } from \"../../lib/decorators\";\nimport { render } from \"../../lib/reactTestingLibraryCustomized\";\nimport { uiApiTodoForm } from \"./TodoForm\";\nimport { uiApiTodoItem } from \"./TodoItem\";\nimport { Priority, Todos, colorHigh, colorLow, colorNormal, entities, fields, someTodos, todosTestids as testids, uiApiTodos } from \"./Todos\";\n\nexport class TodosTestsAreDemo {\n\n    async before() {\n        // TODO experimental; we use this in only 2 places for the moment\n        await tad.miniDb.clear()\n            .populate(\"Todo\", 1, 3);\n\n        render(<Todos />);\n        await tad.waitForCommunicationFinished();\n    }\n\n    @Comment(\"Todos (func comp)\")\n    @Scenario(\"SCREEN Todos\")\n    async screenTodos() {\n        let item = tad.screenCapturing.getByTestId(testids.todoItem + \"_0\")\n        tad.cc(\"`Todo.priority` -> color of the top border\");\n        await tad.assertWaitable.include(item.className, tad.miniDb.getDerived(entities.Todo, 1, fields.Todo.priority, colorHigh));\n        tad.cc(\"`Todo.text`\");\n        let label = tad.screenCapturing.getByTestId(uiApiTodoItem(0).testids.onToggle);\n        await tad.assertWaitable.equal(label.textContent, tad.miniDb.get(entities.Todo, 1, fields.Todo.text)); // or maybe: tad.miniDb.get(entities.Todo, 1, e => e.text)\n        tad.cc(\"`Todo.done`: when `true`, we 'line through' the text\");\n        await tad.assertWaitable.equal(label.style.textDecoration, tad.miniDb.getDerived(entities.Todo, 1, fields.Todo.done, \"line-through\"));\n        tad.cc(\"`Todo.done`: when `true` we check the checkbox\");\n        await tad.assertWaitable.equal(tad.withinCapturing(item).getByRole<HTMLInputElement>('checkbox').checked, tad.miniDb.getDerived(entities.Todo, 1, fields.Todo.done, true));\n\n        tad.demoForEndUserHide();\n        item = tad.screenCapturing.getByTestId(testids.todoItem + \"_2\")\n        tad.cc(\"`Todo.priority` -> color of the top border\");\n        await tad.assertWaitable.include(item.className, colorNormal);\n        tad.cc(\"`Todo.text`\");\n        label = tad.screenCapturing.getByTestId(uiApiTodoItem(2).testids.onToggle);\n        await tad.assertWaitable.equal(label.textContent, tad.miniDb.get(entities.Todo, 3, fields.Todo.text));\n        tad.cc(\"`Todo.done`: when `false`, we don't 'line through' the text\");\n        await tad.assertWaitable.notEqual(label.style.textDecoration, \"line-through\");\n        tad.cc(\"`Todo.done`: and we uncheck the checkbox\");\n        await tad.assertWaitable.isFalse(tad.withinCapturing(item).getByRole<HTMLInputElement>('checkbox').checked);\n        tad.demoForEndUserShow();\n\n        tad.cc(\"Total number of Todos\");\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(testids.total).textContent, \"6\")\n        tad.cc(\"Number of Todos w/ priority = Low\");\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(testids.totalLow).textContent, \"1\")\n        tad.cc(\"Number of Todos w/ priority = Normal\");\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(testids.totalNormal).textContent, \"3\")\n        tad.cc(\"Number of Todos w/ priority = High\");\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(testids.totalHigh).textContent, \"2\")\n    }\n\n    group1() {\n        class Group1 {\n\n            @Scenario(\"WHEN click on Add, THEN the form opens\")\n            async whenAddThenForm() {\n                tad.cc(\"Let's add a new Todo\");\n                await uiApiTodos().dispatcher.onAdd();\n            }\n\n            @Scenario(\"FORM for a Todo; test #1\")\n            async formTodo1() {\n                tad.cc(\"Please observe that this text field is already focused. So you can directly start typing, w/o needing to click here first\");\n                await this.createNewTodo();\n\n                tad.cc(\"The newly added Todo appears at the bottom of the list\");\n                let label = tad.screenCapturing.getByTestId(uiApiTodoItem(6).testids.onToggle);\n                await tad.assertWaitable.equal(label.textContent, \"My task\");\n            }\n\n            // I created this helper function UNDERNEATH the calling function to see how the screenshots are arranged in the MD report\n            private async createNewTodo() {\n                const textbox = tad.withinCapturing(tad.screenCapturing.getByTestId(uiApiTodoForm().testids.onChangeText)).getByRole('textbox');\n                tad.demoForEndUserHideNext(); // hiding this check because the object from the verification is ugly and not meaningful\n\n                await tad.assertWaitable.equal(document.activeElement, textbox);\n\n                await this.anotherDummyHelperFunction();\n                await this.anotherDummyHelperFunction();\n\n                // TODO: crapa in step by step, caci e spotlight-ul de \"will type\", \"was typed\", si atunci incearca si uiapi sa arate cate un spotlight pt fiecare caracter\n                // nu stiu de ce crapa in modul normal; nu vad erori in consola\n                // await tad.userEventWaitable.type(textbox, \"My task\");\n                await uiApiTodoForm().dispatcher.onChangeText(\"My task\");\n                await uiApiTodoForm().dispatcher.onSave();\n            }\n\n            // this doeasn't test anything; it's here to illustrate 2 screenshots that belong to the same line\n            private async anotherDummyHelperFunction() {\n                const textbox = tad.withinCapturing(tad.screenCapturing.getByTestId(uiApiTodoForm().testids.onChangeText)).getByRole('textbox');\n                await tad.assertWaitable.isTrue(true);\n            }\n        }\n        return Group1;\n    }\n\n    @Comment(\"TodoItem (func comp)\")\n    @Scenario(\"WHEN click on checkbox or label, THEN toggle 'done'\")\n    async whenCheckbox() {\n        let item = tad.screenCapturing.getByTestId(testids.todoItem + \"_1\");\n\n        tad.cc(\"When we solve the Todo, we click on the text or checkbox\")\n        await uiApiTodoItem(1).dispatcher.onToggle();\n        tad.cc(\"The checkbox becomes checked, and the text is 'line-through'\");\n        await tad.assertWaitable.isTrue(tad.withinCapturing(item).getByRole<HTMLInputElement>('checkbox').checked);\n\n        tad.demoForEndUserHide();\n        await uiApiTodoItem(1).dispatcher.onToggle();\n        tad.cc(\"Toggled back from done -> not done\");\n        await tad.assertWaitable.isFalse(tad.withinCapturing(item).getByRole<HTMLInputElement>('checkbox').checked);\n    }\n\n    group2() {\n        class Group2 {\n\n            @Scenario(\"WHEN click on UP, THEN the Todo slides up\")\n            async whenUp() {\n                tad.cc(`We may move the Todo up. Now 'Repair the bike' is the second`);\n                await uiApiTodoItem(1).dispatcher.onUp();\n                tad.cc(`And after clicking, it moved up, so 'Repair the bike' is the first`);\n                await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(uiApiTodoItem(0).testids.onToggle).textContent, \"Repair the bike\");\n            }\n\n            @Scenario(\"WHEN click on DOWN, THEN the Todo slides down\")\n            async whenDown() {\n                await uiApiTodoItem(0).dispatcher.onDown();\n                tad.cc(\"Element [0] moved down and is now element [1], as in the initial setup\");\n                await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(uiApiTodoItem(0).testids.onToggle).textContent, \"Buy groceries for next week\");\n            }\n        }\n        return Group2;\n    }\n\n    @Scenario(\"WHEN double click on a Todo, THEN the form opens\")\n    async whenDoubleClick() {\n        tad.demoForEndUserHide();\n        await tad.userEventWaitable.dblClick(tad.screenCapturing.getByTestId(testids.todoItem + \"_1\"));\n        await tad.screenCapturing.findByTestId(testids.form); \n        \n        await uiApiTodoForm().dispatcher.onClose();\n        await tad.assertWaitable.notExists(tad.screenCapturing.queryByTestId(testids.form));\n    }\n\n    group3() {\n        class Group3 {\n\n            @Scenario(\"WHEN click on Edit, THEN the form opens\")\n            async whenEditThenForm() {\n                tad.cc(\"A Todo may be edited\");\n                await uiApiTodoItem(1).dispatcher.onEdit();\n            }\n\n            @Comment(\"TodoForm (func comp)\")\n            @Scenario(\"FORM for a Todo; test #2\")\n            async formTodo2() {\n                await uiApiTodoForm().dispatcher.onChangeText(\"Repair the bike; some updates\");\n\n                tad.cc(\"We may check/uncheck for the editor as well\");\n                await uiApiTodoForm().dispatcher.onChangeDone();\n\n                tad.cc(\"We also have the notion of priority\");\n                await uiApiTodoForm().dispatcher.onChangePriority(Priority.LOW);\n                await uiApiTodoForm().dispatcher.onSave();\n\n                let item = tad.screenCapturing.getByTestId(testids.todoItem + \"_1\");\n                tad.cc(\"The Todo was updated\");\n                const label = tad.screenCapturing.getByTestId(uiApiTodoItem(1).testids.onToggle);\n                await tad.assertWaitable.equal(label.textContent, someTodos[1].text + \"; some updates\");\n                tad.demoForEndUserHide();\n                await tad.assertWaitable.include(item.className, colorLow);\n                await tad.assertWaitable.equal(label.style.textDecoration, \"line-through\");\n                await tad.assertWaitable.isTrue(tad.withinCapturing(item).getByRole<HTMLInputElement>('checkbox').checked);\n            }\n\n        }\n        return Group3;\n    }\n\n    @Comment(\"TodoItem again\")\n    @Scenario(\"WHEN click on DELETE, THEN confirm, AND WHEN 'yes', THEN the Todo is removed\")\n    async whenDelete() {\n        tad.cc(\"A Todo may be deleted\");\n\n        tad.demoForEndUserHide();\n        await uiApiTodoItem(0).dispatcher.onDelete();\n        await uiApiTodoItem(0).dispatcher.onDeleteNo();\n\n        tad.cc(\"The Todo wasn't deleted\");\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(uiApiTodoItem().testids.onToggle).textContent, someTodos[0].text);\n        tad.demoForEndUserShow();\n\n        await uiApiTodoItem(0).dispatcher.onDelete();\n        await uiApiTodoItem(0).dispatcher.onDeleteYes();\n\n        tad.cc(\"The Todo was deleted. So the second element (index 1) became element the first element (index 0)\");\n        await tad.assertWaitable.include(tad.screenCapturing.getByTestId(uiApiTodoItem(0).testids.onToggle).textContent, someTodos[1].text); // include instead of equals, because we appended something in a step above\n    }\n\n    @Scenario(\"\")\n    async uiApiSampleScript() {\n        await uiApiTodos().dispatcher.onAdd();\n        await uiApiTodoForm().dispatcher.onChangeText(\"salut\");\n        await uiApiTodoForm().dispatcher.onChangeDone();\n        await uiApiTodoForm().dispatcher.onSave();\n\n        await uiApiTodos().dispatcher.onAdd();\n        await uiApiTodoForm().dispatcher.onClose();\n    }\n}\n"},"duration":879}