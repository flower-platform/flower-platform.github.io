{"slides":[{"screenshot":"TestsAreDemoMaster_code_TestsAreDemoMaster_line_1","sourceFile":"http://localhost:3000/src/appTestingTadItself/sourceCode/SourceCodeTestsAreDemo.tsx","sourceLine":161},{"screenshot":"TestsAreDemoMaster_code_TestsAreDemoMaster_line_15","sourceFile":"http://localhost:3000/src/appTestingTadItself/sourceCode/SourceCodeTestsAreDemo.tsx","sourceLine":163},{"screenshot":"TestsAreDemoMaster_nextStep","sourceFile":"http://localhost:3000/src/appTestingTadItself/sourceCode/SourceCodeTestsAreDemo.tsx","sourceLine":165},{"screenshot":"TestsAreDemoMaster_code_TestsAreDemoMaster_line_35","sourceFile":"http://localhost:3000/src/appTestingTadItself/sourceCode/SourceCodeTestsAreDemo.tsx","sourceLine":168},{"screenshot":"TestsAreDemoMaster_code_TestsAreDemoMaster_line_36","sourceFile":"http://localhost:3000/src/appTestingTadItself/sourceCode/SourceCodeTestsAreDemo.tsx","sourceLine":171},{"screenshot":"TestsAreDemoMaster_lineNumber","sourceFile":"http://localhost:3000/src/appTestingTadItself/sourceCode/SourceCodeTestsAreDemo.tsx","sourceLine":173}],"sourceFiles":{"http://localhost:3000/src/appTestingTadItself/sourceCode/SourceCodeTestsAreDemo.tsx":"import React from 'react'; import { Utils } from \"../../copied/Utils\";\nimport { Scenario, ScenarioOptions, tad } from \"../../lib\";\nimport { CURRENT_LINE_BACKGROUND, sourceCodeTestIds } from \"../../lib/SourceCode\";\nimport { LOCAL_STORAGE_CURRENT_TEST_CLASS, LOCAL_STORAGE_MENU_STATE, LOCAL_STORAGE_STEP_BY_STEP, LOCAL_STORAGE_TAB_STATE, LOCAL_STORAGE_TESTS_TO_RUN, TabState, testsAreDemoMasterTestids as testids } from \"../../lib/TestsAreDemoMaster\";\nimport { BaseTestsAreDemoForTestingTadItself } from \"../BaseTestsAreDemoForTestingTadItself\";\nimport { TestsAreDemoMasterCustomForTests } from \"../TestsAreDemoMasterCustomForTests\";\nimport { SourceCodeTestsAreDemoInnerName } from \"./SourceCodeTestsAreDemoInner\";\n\nconst EXPECTED_FULL_CONTENT = `1import React from 'react';\n2import { Scenario, tad } from \"../../lib\";\n3import { aFunctionFromAnotherFile } from \"./SourceCode2TestsAreDemoInner\";\n4\n5/**\n6 * Please avoid modifying this file, because it's used during testing.\n7 * But if you do, please modify the EXPECTED_... family of constants from the file SourceCodeTestsAreDemo.\n8 */\n9export const SourceCodeTestsAreDemoInnerName = \"SourceCodeTestsAreDemoInner\";\n10export class SourceCodeTestsAreDemoInner {\n11\n12    @Scenario(\"inner\")\n13    async inner() {\n14        await tad.showSpotlight(\"First stop\");\n15        await tad.showSpotlight(\"Second stop\");\n16\n17        /* \n18         * These lines are empty on purpose, to test the scroll feature.\n19         * We add a lot of them hoping to be robust in case different browsers\n20         * render w/ slightly different amount of pixels.\n21         * \n22         * \n23         * \n24         * \n25         * \n26         * \n27         * \n28         * \n29         * \n30         * \n31         * \n32         * \n33         * \n34         * \n35         */\n36        await tad.showSpotlight(\"Third stop\");\n37        await aFunctionFromAnotherFile();\n38    }\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59}`;\n\nconst EXPECTED_TESTID1 = sourceCodeTestIds.line + \"_1\";\nconst EXPECTED_TESTID2 = sourceCodeTestIds.line + \"_14\";\nconst EXPECTED_TESTID3 = sourceCodeTestIds.line + \"_15\";\nconst EXPECTED_TESTID4 = sourceCodeTestIds.line + \"_35\";\nconst EXPECTED_TESTID5 = sourceCodeTestIds.line + \"_36\";\nconst EXPECTED_TESTID6 = sourceCodeTestIds.line + \"_15\";\nconst EXPECTED_FILE_NAME = \"SourceCodeTestsAreDemoInner.tsx\";\n\nconst EXPECTED_FULL_OTHER_CONTENT = `1import React from 'react'; \n2import { tad } from \"../../lib\";\n3\n4/**\n5 * We have this separate file, to have an other file in source code, for \"whenOtherFile\" test.\n6 */\n7export async function aFunctionFromAnotherFile() {\n8    await tad.showSpotlight(\"Other file stop.\");\n9}`;\n\nconst EXPECTED_OTHER_TESTID1 = sourceCodeTestIds.line + \"_1\";\nconst EXPECTED_OTHER_TESTID2 = sourceCodeTestIds.line + \"_8\";\n\nconst EXPECTED_OTHER_FILE_NAME = \"SourceCode2TestsAreDemoInner.tsx\";\n\nlet stepByStepValue: string, menuState: string, tabState: string, currentTestClass: string, testsToRun: string;\n\nexport class SourceCodeTestsAreDemo extends BaseTestsAreDemoForTestingTadItself {\n\n    async before() {\n        stepByStepValue = localStorage.getItem(LOCAL_STORAGE_STEP_BY_STEP) as string;\n        menuState = localStorage.getItem(LOCAL_STORAGE_MENU_STATE) as string;\n        tabState = localStorage.getItem(LOCAL_STORAGE_TAB_STATE) as string;\n        currentTestClass = localStorage.getItem(LOCAL_STORAGE_CURRENT_TEST_CLASS) as string;\n        testsToRun = localStorage.getItem(LOCAL_STORAGE_TESTS_TO_RUN) as string;\n        localStorage.setItem(LOCAL_STORAGE_TAB_STATE, TabState.SRC.toString());\n        localStorage.setItem(LOCAL_STORAGE_STEP_BY_STEP, \"true\");\n        localStorage.setItem(LOCAL_STORAGE_TESTS_TO_RUN, JSON.stringify({ SourceCodeTestsAreDemoInner: { inner: true } }));\n        localStorage.setItem(LOCAL_STORAGE_MENU_STATE, JSON.stringify({ SourceCodeTestsAreDemoInner: { inner: true } }));\n\n        this.renderTadMaster(SourceCodeTestsAreDemoInnerName);\n        tad.waitForCommunicationFinishedNextTimeoutTemp(3000);\n        await tad.waitForCommunicationFinished();\n        tad.getObjectViaCheat(TestsAreDemoMasterCustomForTests).run(true);\n    }\n\n    async after() {\n        localStorage.setItem(LOCAL_STORAGE_STEP_BY_STEP, stepByStepValue!);\n        localStorage.setItem(LOCAL_STORAGE_MENU_STATE, menuState!);\n        localStorage.setItem(LOCAL_STORAGE_TESTS_TO_RUN, testsToRun!);\n        localStorage.setItem(LOCAL_STORAGE_MENU_STATE, menuState!);\n        localStorage.setItem(LOCAL_STORAGE_TAB_STATE, tabState!);\n    }\n\n    @ScenarioOptions({ linkWithNextScenario: true })\n    @Scenario(\"WHEN execution is halted (i.e. spotlight shown and waiting to press 'Next step', THEN the source code is shown, AND current line is highlighted\")\n    async whenSpotlightThenHighlight() {\n        await this.waitUntilNextStepAvailable();\n        tad.cc(\"The file name is \" + EXPECTED_FILE_NAME);\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(sourceCodeTestIds.fileName).textContent, EXPECTED_FILE_NAME);\n        tad.cc(\"We verify that the source code has correctly loaded\");\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(sourceCodeTestIds.code).textContent, EXPECTED_FULL_CONTENT);\n        tad.cc(\"The first line isn't selected\");\n        await tad.assertWaitable.notEqual(tad.screenCapturing.getByTestId(EXPECTED_TESTID1).style.backgroundColor, CURRENT_LINE_BACKGROUND);\n        tad.cc(\"The current line is selected\");\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(EXPECTED_TESTID2).style.backgroundColor, CURRENT_LINE_BACKGROUND);\n        const currentLineNumber = Utils.substringAfter(EXPECTED_TESTID2, \"_\", true);\n        tad.cc(\"The current line number is \" + currentLineNumber);\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(sourceCodeTestIds.lineNumber).textContent, currentLineNumber);\n    }\n\n    @ScenarioOptions({ linkWithNextScenario: true })\n    @Scenario(\"WHEN clicked on 'Next step', AND the next line is pretty NEAR to the previous one, AND halted, THEN the new line is highlighted, AND no scroll is performed\")\n    async whenSpotlightThenHighlight2() {\n        await this.clickOnNextStep();\n        tad.cc(\"The previous line isn't selected\");\n        await tad.assertWaitable.notEqual(tad.screenCapturing.getByTestId(EXPECTED_TESTID2).style.backgroundColor, CURRENT_LINE_BACKGROUND);\n        tad.cc(\"The current line is selected\");\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(EXPECTED_TESTID3).style.backgroundColor, CURRENT_LINE_BACKGROUND);\n        const currentLineNumber = Utils.substringAfter(EXPECTED_TESTID3, \"_\", true);\n        tad.cc(\"The current line number is \" + currentLineNumber);\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(sourceCodeTestIds.lineNumber).textContent, currentLineNumber);\n        tad.cc(\"We verify if no scroll is performed, the first line is in view\");\n        await tad.assertWaitable.exists(tad.screenCapturing.getByTestId(EXPECTED_TESTID1));\n    }\n\n    @ScenarioOptions({ linkWithNextScenario: true })\n    @Scenario(\"WHEN clicked on 'Next step', AND next line is FAR from the previous one, AND halted, THEN highlight, AND scroll is performed so that the next line is visible\")\n    async whenFarLineThenScrollAndHighlight() {\n        // we do a trick to make scrolling independent of browser height: we force it small; and later, we'll restore\n        const maxHeight = document.getElementById(\"SyntaxHighlighter\")!.style.maxHeight;\n        document.getElementById(\"SyntaxHighlighter\")!.style.maxHeight = tad.screenCapturing.getByTestId(EXPECTED_TESTID6).offsetTop + \"px\";\n        const currentLineNumber = Utils.substringAfter(EXPECTED_TESTID1, \"_\", true);\n        tad.cc(\"The first visible line is \" + currentLineNumber);\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(EXPECTED_TESTID1).querySelector(\".linenumber\")!.textContent, currentLineNumber);\n        tad.cc(\"The previous line is \" + Utils.substringAfter(EXPECTED_TESTID3, \"_\", true));\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(EXPECTED_TESTID3).style.backgroundColor, CURRENT_LINE_BACKGROUND);\n\n        await this.clickOnNextStep();\n        const firstLineNumber = Utils.substringAfter(EXPECTED_TESTID4, \"_\", true);\n        tad.cc(\"The first visible line is \" + firstLineNumber + \", it means that the scroll was performed\");\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(EXPECTED_TESTID4).querySelector(\".linenumber\")!.textContent, firstLineNumber);\n        const secondLineNumber = Utils.substringAfter(EXPECTED_TESTID5, \"_\", true);\n        tad.cc(\"The second line is \" + secondLineNumber + \" it means the scroll have an offset of line on scroll\");\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(EXPECTED_TESTID5).style.backgroundColor, CURRENT_LINE_BACKGROUND);\n        tad.cc(\"The current line number is \" + secondLineNumber);\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(sourceCodeTestIds.lineNumber).textContent, secondLineNumber);\n\n        document.getElementById(\"SyntaxHighlighter\")!.style.maxHeight = maxHeight;\n    }\n\n    @Scenario(\"WHEN 'Next step', AND the new line is in a different file, AND halted, THEN a new source code is shown, AND highlight\")\n    async whenOtherFile() {\n        await this.clickOnNextStep();\n        tad.cc(\"The file name is \" + EXPECTED_OTHER_FILE_NAME);\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(sourceCodeTestIds.fileName).textContent, EXPECTED_OTHER_FILE_NAME);\n        const code = tad.screenCapturing.getByTestId(sourceCodeTestIds.code);\n\n        tad.cc(\"We check if the source code is different from the first file\");\n        await tad.assertWaitable.notEqual(code.textContent, EXPECTED_FULL_CONTENT);\n        tad.cc(\"We verify that the source code has correctly loaded\");\n        await tad.assertWaitable.equal(code.textContent, EXPECTED_FULL_OTHER_CONTENT);\n\n        tad.cc(\"The first line isn't selected\");\n        await tad.assertWaitable.notEqual(tad.screenCapturing.getByTestId(EXPECTED_OTHER_TESTID1).style.backgroundColor, CURRENT_LINE_BACKGROUND);\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(EXPECTED_OTHER_TESTID2).style.backgroundColor, CURRENT_LINE_BACKGROUND);\n        const currentLineNumber = Utils.substringAfter(EXPECTED_OTHER_TESTID2, \"_\", true);\n        tad.cc(\"The current line number is \" + currentLineNumber);\n        await tad.assertWaitable.equal(tad.screenCapturing.getByTestId(sourceCodeTestIds.lineNumber).textContent, currentLineNumber);\n        // finish run\n        tad.demoForEndUserHideNext();\n        await this.clickOnNextStep(false);\n    }\n}"},"duration":1011}