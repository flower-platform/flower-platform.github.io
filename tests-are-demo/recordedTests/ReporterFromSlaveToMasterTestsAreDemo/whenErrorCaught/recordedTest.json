{"slides":[{"screenshot":"TestsAreDemoMasterCustomForTestsWithSpy","sourceFile":"http://localhost:3000/src/appTestingTadItself/reporterFromSlaveToMaster/ReporterFromSlaveToMasterTestsAreDemo.tsx","sourceLine":77}],"sourceFiles":{"http://localhost:3000/src/appTestingTadItself/reporterFromSlaveToMaster/ReporterFromSlaveToMasterTestsAreDemo.tsx":"import React from 'react'; import Sinon, { SinonSpy } from \"sinon\";\nimport { Scenario, tad } from \"../../lib\";\nimport { ReporterFromSlaveToMaster } from \"../../lib/ReporterFromSlaveToMaster\";\nimport { LOCAL_STORAGE_AUTO_RUN, LOCAL_STORAGE_CURRENT_TEST_CLASS, LOCAL_STORAGE_MENU_STATE, LOCAL_STORAGE_TESTS_TO_RUN, MenuState } from \"../../lib/TestsAreDemoMaster\";\nimport { BaseTestsAreDemoForTestingTadItself } from \"../BaseTestsAreDemoForTestingTadItself\";\nimport { TestsAreDemoMasterCustomForTests } from \"../TestsAreDemoMasterCustomForTests\";\nimport { ReporterFromSlaveToMasterTestsAreDemoInnerName } from \"./ReporterFromSlaveToMasterTestsAreDemoInner\";\n\nclass TestsAreDemoMasterCustomForTestsWithSpy extends TestsAreDemoMasterCustomForTests {\n\n    spy!: SinonSpy;\n\n    ended: boolean = false;\n\n    onMochaReporterCreated(reporter: Mocha.reporters.Base, runner: Mocha.Runner, options: Mocha.MochaOptions): ReporterFromSlaveToMaster {\n        const that = this;\n        const result = new class extends ReporterFromSlaveToMaster {\n\n            async onTestFail(test: Mocha.Test, err: any): Promise<void> {\n                await super.onTestFail(test, err);\n                that.ended = true;\n            }\n\n        }(this, reporter, runner, options);\n        this.spy = Sinon.spy(result, \"consoleLog\");\n        return result;\n    }\n    render(): JSX.Element {\n        return <div data-testid=\"TestsAreDemoMasterCustomForTestsWithSpy\">\n        {super.render()}\n        </div>\n    }\n}\nlet autoRunValue: string, currentTestClass: string, testsToRun: string, menuState: string;\nexport class ReporterFromSlaveToMasterTestsAreDemo extends BaseTestsAreDemoForTestingTadItself {\n\n    async before() {\n        autoRunValue = localStorage.getItem(LOCAL_STORAGE_AUTO_RUN) as string;\n        currentTestClass = localStorage.getItem(LOCAL_STORAGE_CURRENT_TEST_CLASS) as string;\n        testsToRun = localStorage.getItem(LOCAL_STORAGE_TESTS_TO_RUN) as string;\n        menuState = localStorage.getItem(LOCAL_STORAGE_MENU_STATE) as string;\n        localStorage.setItem(LOCAL_STORAGE_MENU_STATE, MenuState.TAD.toString());\n        localStorage.setItem(LOCAL_STORAGE_AUTO_RUN, \"false\");\n        localStorage.setItem(LOCAL_STORAGE_CURRENT_TEST_CLASS, JSON.stringify({ ReporterFromSlaveToMasterTestsAreDemoInner: { innerTest: true } }));\n        localStorage.setItem(LOCAL_STORAGE_TESTS_TO_RUN, JSON.stringify({ ReporterFromSlaveToMasterTestsAreDemoInner: { innerTest: true } }));\n\n    }\n\n    async after() {\n        localStorage.setItem(LOCAL_STORAGE_AUTO_RUN, autoRunValue!);\n        localStorage.setItem(LOCAL_STORAGE_CURRENT_TEST_CLASS, currentTestClass!);\n        localStorage.setItem(LOCAL_STORAGE_TESTS_TO_RUN, testsToRun!);\n        localStorage.setItem(LOCAL_STORAGE_MENU_STATE, menuState!);\n    }\n\n    @Scenario(\"WHEN an error is caught by the reporter (containing a stack trace relative to the minified source being seen by the browser), \" +\n        \"THEN it is decoded (using source map) and printed to console, showing function names and line numbers relative to the original source code\")\n    async whenErrorCaught() {\n        this.renderTadMaster(ReporterFromSlaveToMasterTestsAreDemoInnerName, TestsAreDemoMasterCustomForTestsWithSpy);\n        tad.waitForCommunicationFinishedNextTimeoutTemp(2500);\n        await tad.waitForCommunicationFinished();\n        const comp = tad.getObjectViaCheat(TestsAreDemoMasterCustomForTestsWithSpy);\n        comp.run(true);\n        await tad.waitForWhile(() => !comp.ended);\n        const spy = comp.spy;\n        tad.screenCapturing.findByTestId(\"TestsAreDemoMasterCustomForTestsWithSpy\");\n        // The URL from the exception contains a part that is specific to the machine used for build; hence\n        // we want to remove this, to be able to test.\n        // E.g. in mode dev: http://localhost:3000/home/poweruser/git/foundation-jhipster-gwt/foundation-react/packages/tests-are-demo/src/lib/TestsAreDemoFunctions.tsx:117:29\n        // E.g. in mode build: http://localhost:????/src/lib/...\n        // Combining he 2 cases, we want to obtain: src/lib/TestsAreDemoFunctions.tsx\n        const regex = /(http:.*\\/((?=src)))|(:\\d+:\\d+)|\\s/g;\n\n        const expected = `Error: Some error\nat throwError (src/appTestingTadItself/reporterFromSlaveToMaster/ReporterFromSlaveToMasterTestsAreDemoInner2.ts) [throw new Error(message);]\nat ReporterFromSlaveToMasterTestsAreDemoInner.innerTest (src/appTestingTadItself/reporterFromSlaveToMaster/ReporterFromSlaveToMasterTestsAreDemoInner.ts) [throwError(\"Some error\");]`;\n        await tad.assertWaitable.equal(spy.args[spy.args.length - 2][0].replaceAll(regex, \"\"), expected.replaceAll(/\\s/g, \"\"));\n    }\n}\n"},"duration":2783}