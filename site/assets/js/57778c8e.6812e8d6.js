"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[822],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),m=d(n),h=o,u=m["".concat(l,".").concat(h)]||m[h]||p[h]||i;return n?a.createElement(u,s(s({ref:t},c),{},{components:n})):a.createElement(u,s({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=m;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:o,s[1]=r;for(var d=2;d<i;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3598:(e,t,n)=>{n.d(t,{l:()=>i});var a=n(7294);class o{static now(){return new Date}static consoleLogJson(e,t){void 0===t&&(t=!0);const n=JSON.stringify(e,(()=>{const e=new WeakSet;return(t,n)=>{if(!t.startsWith("__react")){if("object"==typeof n&&null!==n){if(e.has(n))return;e.add(n)}return n}}})(),2);return t&&console.log(n),n}static substringAfter(e,t,n){const a=n?e.lastIndexOf(t):e.indexOf(t);return a<0?e:e.substring(a+t.length)}static setTimeoutPromise(e,t){return new Promise((n=>setTimeout((()=>{const t=null==e?void 0:e();n(t)}),t)))}}const i=e=>a.createElement(a.Fragment,null,a.createElement("a",{target:"_blank",href:"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/tree/master/"+e.children},o.substringAfter(e.children,"/",!0)))},1696:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>y,contentTitle:()=>T,default:()=>E,frontMatter:()=>b,metadata:()=>w,toc:()=>N});var a=n(7462),o=n(7294),i=n(3905),s=n(3598),r=n(6010),l=n(2389),d=n(7392),c=n(7094),p=n(2466);const m="tabList__CuJ",h="tabItem_LNqP";function u(e){var t;const{lazy:n,block:i,defaultValue:s,values:l,groupId:u,className:g}=e,f=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=l??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,d.l)(k,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const T=null===s?s:s??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==T&&!k.some((e=>e.value===T)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${T}" but none of its children has the corresponding value. Available values are: ${k.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:w,setTabGroupChoices:y}=(0,c.U)(),[N,v]=(0,o.useState)(T),E=[],{blockElementScrollPositionUntilNextRender:x}=(0,p.o5)();if(null!=u){const e=w[u];null!=e&&e!==N&&k.some((t=>t.value===e))&&v(e)}const C=e=>{const t=e.currentTarget,n=E.indexOf(t),a=k[n].value;a!==N&&(x(t),v(a),null!=u&&y(u,String(a)))},D=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=E.indexOf(e.currentTarget)+1;n=E[t]??E[0];break}case"ArrowLeft":{const t=E.indexOf(e.currentTarget)-1;n=E[t]??E[E.length-1];break}}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,r.Z)("tabs-container",m)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":i},g)},k.map((e=>{let{value:t,label:n,attributes:i}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>E.push(e),onKeyDown:D,onFocus:C,onClick:C},i,{className:(0,r.Z)("tabs__item",h,null==i?void 0:i.className,{"tabs__item--active":N===t})}),n??t)}))),n?(0,o.cloneElement)(f.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function g(e){const t=(0,l.Z)();return o.createElement(u,(0,a.Z)({key:String(t)},e))}const f="tabItem_Ymn6";function k(e){let{children:t,hidden:n,className:a}=e;return o.createElement("div",{role:"tabpanel",className:(0,r.Z)(f,a),hidden:n},t)}const b={description:"The recommended workflow for using Tests Are Demo",sidebar_position:20},T="Tutorial",w={unversionedId:"tests-are-demo/tutorial",id:"tests-are-demo/tutorial",title:"Tutorial",description:"The recommended workflow for using Tests Are Demo",source:"@site/docs/tests-are-demo/tutorial.md",sourceDirName:"tests-are-demo",slug:"/tests-are-demo/tutorial",permalink:"/site/docs/tests-are-demo/tutorial",draft:!1,editUrl:"https://gitlab.xops-online.com/foundation/foundation-jhipster-gwt/-/tree/master/foundation-react/packages/site/docs/docs/tests-are-demo/tutorial.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{description:"The recommended workflow for using Tests Are Demo",sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"Demo",permalink:"/site/docs/tests-are-demo/demo"},next:{title:"React Gantt",permalink:"/site/docs/category/react-gantt"}},y={},N=[{value:"Intro",id:"intro",level:2},{value:"Create the files and start an empty test",id:"create-the-files-and-start-an-empty-test",level:2},{value:"Define the scenarios",id:"define-the-scenarios",level:2},{value:"Implement scenario #1",id:"implement-scenario-1",level:2},{value:"Step 1: Add <code>data-testid</code> (if not existing)",id:"step-1-add-data-testid-if-not-existing",level:3},{value:"Step 2a: Copy code snippet (perform action)",id:"step-2a-copy-code-snippet-perform-action",level:3},{value:"Step 2b: Paste (and adapt) code snippet",id:"step-2b-paste-and-adapt-code-snippet",level:3},{value:"Step 3: Copy/paste code snippet (verify)",id:"step-3-copypaste-code-snippet-verify",level:3},{value:"Iterate: #4, #5, etc.",id:"iterate-4-5-etc",level:3},{value:"Polish the demo for the end user",id:"polish-the-demo-for-the-end-user",level:3},{value:"Iterate: scenario #2, #3, etc.",id:"iterate-scenario-2-3-etc",level:2}],v={toc:N};function E(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,a.Z)({},v,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tutorial"},"Tutorial"),(0,i.kt)("h2",{id:"intro"},"Intro"),(0,i.kt)("p",null,"We present the recommended workflow for using Tests Are Demo. "),(0,i.kt)("p",null,"For this tutorial, we suppose that we are developing ",(0,i.kt)(s.l,{mdxType:"GitLink"},"foundation-react/packages/tests-are-demo/src/app/todos/Todos.tsx"),", a component that is managing things to do. It looks like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(6138).Z,width:"760",height:"611"})),(0,i.kt)("p",null,"While developing this component, we used Tests Are Demo in ",(0,i.kt)(s.l,{mdxType:"GitLink"},"foundation-react/packages/tests-are-demo/src/app/todos/TodosTest.tsx"),". This tutorial shows the steps we followed to create this file. "),(0,i.kt)("p",null,'This is the result/the "demo" part (in TestsAre',(0,i.kt)("strong",{parentName:"p"},"Demo"),"):"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(9177).Z,width:"804",height:"872"})),(0,i.kt)("h2",{id:"create-the-files-and-start-an-empty-test"},"Create the files and start an empty test"),(0,i.kt)("p",null,"We created the 2 files below (click on tabs):"),(0,i.kt)(g,{mdxType:"Tabs"},(0,i.kt)(k,{value:"meta",label:"TodosMeta.ts",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { createMeta } from "@famiprog-foundation/tests-are-demo";\n\nexport const TodosMeta = createMeta("Todos", {\n    scenarios: {\n    },\n\n    testids: {\n    }\n});\n')),(0,i.kt)("p",null,"This file will eventually look like this: ",(0,i.kt)(s.l,{mdxType:"GitLink"},"foundation-react/packages/tests-are-demo/src/app/todos/TodosMeta.ts"))),(0,i.kt)(k,{value:"test",label:"TodosTest.tsx",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { render } from "@famiprog-foundation/tests-are-demo";\nimport { tad } from "@famiprog-foundation/tests-are-demo";\nimport { TodosMeta } from "./TodosMeta";\n\nconst { testids, scenarios } = TodosMeta;\n\ndescribe("Todos", () => {\n\n    before(async () => {\n        render(<Todos />);\n        await tad.waitForCommunicationFinished();\n    })\n\n    it("empty", async () => {\n        console.log("Hello world");\n    })\n}\n')),(0,i.kt)("p",null,"This file will eventually look like this: ",(0,i.kt)(s.l,{mdxType:"GitLink"},"foundation-react/packages/tests-are-demo/src/app/todos/TodosTest.tsx")),(0,i.kt)("admonition",{title:"temp",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"We currently use the ",(0,i.kt)("inlineCode",{parentName:"p"},"render()")," exported by Tests Are Demo. We will find a way to let people use the original ",(0,i.kt)("inlineCode",{parentName:"p"},"render()"),", or one customized by themselves.")))),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Notice that we use ",(0,i.kt)("inlineCode",{parentName:"p"},"Todos")," in various places in code + file name prefix. ",(0,i.kt)("inlineCode",{parentName:"p"},"Todos")," ==  ",(0,i.kt)("strong",{parentName:"p"},"main component")," name == its file name (the component can be a class or function)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Then")," include the test in the ",(0,i.kt)(s.l,{mdxType:"GitLink"},"foundation-react/packages/tests-are-demo/src/app/appTests.ts"),". E.g.:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="appTests.ts"',title:'"appTests.ts"'},'// import "./myFeature/MyFeatureTest";\nimport "./todos/TodosTest";\n// import "./yourFeature/YourFeatureTest";\n')),(0,i.kt)("admonition",{title:"Temp",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Comment the other tests, while working on ",(0,i.kt)("inlineCode",{parentName:"p"},"TodosTest"),". Don't forget to uncomment before commit.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Then")," go to your usual URL, e.g. ","[http://localhost:3000?Tests Are Demo]","(http://localhost:3000?Tests Are Demo). Notice the ",(0,i.kt)("inlineCode",{parentName:"p"},"?Tests Are Demo"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"Todos")," component should render, and you should see in the console ",(0,i.kt)("em",{parentName:"p"},"Hello world")," printed."),(0,i.kt)("h2",{id:"define-the-scenarios"},"Define the scenarios"),(0,i.kt)("p",null,"A very good intellectual exercise is to define the scenarios that we want to implement, ",(0,i.kt)("strong",{parentName:"p"},"before")," doing the actual implementation. This adds structure to our thinking, and defines clearly our development road map."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="TodosMeta.ts"',title:'"TodosMeta.ts"'},'export const TodosMeta = createMeta("Todos", {\n    scenarios: {\n        // highlight-start\n        // Todos (func comp)\n        rendererTodos: "RENDERER for a list of Todos",\n        rendererTodo: "RENDERER for a Todo",\n        whenAddThenForm: "WHEN click on Add, THEN the form opens",\n\n        // TodoItem (func comp)\n        whenCheckbox: "WHEN click on checkbox or label, THEN toggle \'done\'",\n        // highlight-end\n        ...\n        // highlight-start\n        // DRAFT: click on del, verify alert open, click no, verify record still there, \n        // click again on del, click yes, verify the record is not there\n        whenDelete: "WHEN click on DELETE, THEN confirm, AND WHEN \'yes\', THEN the Todo is removed", \n        // highlight-end\n        ...\n\n        // highlight-start\n        // TodoForm (func comp)\n        formTodo: "FORM for a Todo"\n        // highlight-end\n')),(0,i.kt)("p",null,"Explanation (click on tabs):"),(0,i.kt)(g,{mdxType:"Tabs"},(0,i.kt)(k,{value:"scen",label:"Scenarios",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'export const TodosMeta = createMeta("Todos", {\n    scenarios: {\n        ...\n        // highlight-next-line\n        whenAddThenForm: "WHEN click on Add, THEN the form opens",\n        ...\n        // highlight-next-line\n        whenCheckbox: "WHEN click on checkbox or label, THEN toggle \'done\'",\n        ...\n')),(0,i.kt)("p",null,'The scenario is a string (we will discuss the format below). And it has a field name, which should be rather short (although when we\'ll reference it, the "auto complete" of the IDE will do most of the typing).')),(0,i.kt)(k,{value:"desc",label:"Draft for scenario content",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'export const TodosMeta = createMeta("Todos", {\n    scenarios: {\n        ...\n        // highlight-start\n        // click on del, verify alert open, click no, verify record still there, click again on del,\n        // click yes, verify the record is not there\n        // highlight-end\n        whenDelete: "WHEN click on DELETE, THEN confirm, AND WHEN \'yes\', THEN the Todo is removed", \n        ...\n')),(0,i.kt)("p",null,"For a lot of scenarios, the title (almost) fully describes the feature. But there are scenarios that contain\nsmall (and important) details. In this case, we write them down in a comment/draft, to avoid forgetting them. Once we do the\nimplementation + test, we'll delete this comment/draft, because the small (and important) details will be visible in the test."),(0,i.kt)("p",null,"Let's look at the example below. We have a confirmation/alert of type \"Do you really want to delete?\". It's obvious that if we click on no,\nnothing should happen, and the alert should close. So we ",(0,i.kt)("strong",{parentName:"p"},"don't want to pollute")," the scenario title with such a detail. But ",(0,i.kt)("strong",{parentName:"p"},"testing")," (and implementing)\nthe detail is important. "),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"One would be amazed how often we saw regressions related to (more or less) similar things. And believe us, an user will get really mad if e.g. he/she spends say 15 minutes\nin an editor, and then hits by mistake ",(0,i.kt)("inlineCode",{parentName:"p"},"F5")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Back"),', and the dev forgot to implement a "leave page" handler + alert.'))),(0,i.kt)(k,{value:"categ",label:"Group by component name",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'export const TodosMeta = createMeta("Todos", {\n    scenarios: {\n        // highlight-next-line\n        // Todos (func comp)\n        rendererTodos: "RENDERER for a list of Todos",\n        ...\n\n        // highlight-next-line\n        // TodoItem (func comp)\n        whenCheckbox: "WHEN click on checkbox or label, THEN toggle \'done\'",\n        ...\n\n        // highlight-next-line\n        // TodoForm (func comp)\n        formTodo: "FORM for a Todo"\n        ...\n')))),(0,i.kt)("p",null,"Often the file holds the main component + some additional smaller components (functions or classes). It's nice to group the scenarios by component name."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},'We noticed in practice that this "think about the scenarios before writing the code" has as side effect the creation of a mental structure of the code. This may also include quite soon, the identification of the sub components to use. E.g. check / uncheck a Todo => checkboxes => we need a renderer for each Todo => let\'s name it ',(0,i.kt)("inlineCode",{parentName:"p"},"TodoItem"),".")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"For the title of the scenario, we use keywords inspired from ",(0,i.kt)("a",{parentName:"p",href:"https://cucumber.io/"},"Cucumber"),", a BDD (behavior driven development) technology. E.g.:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'// default format\nGIVEN something, WHEN something, THEN something\n\n// Rule of thumb to decide between GIVEN and WHEN:\n// GIVEN -> the code for this step will prepare some data (via mocking\n// or via copy into BD), in order to recreate a state that happens in practice\n// WHEN -> the code for this step will simulate an user action\n// NOTE: In many cases we have only WHEN + THEN; or sometimes also GIVEN + THEN\nGIVEN a paid invoice, THEN a green sticker labeled "PAID" appears in the top right corner\nWHEN click on UP, THEN the Todo slides up\n\n// we may use AND\nWHEN click on Delete, AND click on "yes, I confirm", THEN ...\n// purists will say that tests should be super small. But in practice sometimes it\'s easier to have\n// 1 longer test (w/o exagerating), than to have 2 smaller ones\nWHEN click on Delete, THEN alert appears, AND WHEN click on "yes, I confirm", THEN ...\n\n// these are sort of shortcuts. It\'s obvious what they mean. \n// Renderers and forms/editors need to be tested, but it would be incredibly\n// awkward to say (and repeat for each field) things such as: \n// GIVEN a Todo w/ text = "Buy bread", THEN the label shows "Buy bread". \nRENDERER for a Todo\nFORM for a Todo\n')),(0,i.kt)("admonition",{title:"Convention for uniformity and readability",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Please respect the casing (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"WHEN")," and not ",(0,i.kt)("inlineCode",{parentName:"p"},"When")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"when"),"), and the comma (",(0,i.kt)("inlineCode",{parentName:"p"},","),") before the key words (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"... something, THEN something else"),").")),(0,i.kt)("h2",{id:"implement-scenario-1"},"Implement scenario #1"),(0,i.kt)("p",null,"We like ",(0,i.kt)("strong",{parentName:"p"},"BDD")," (behavior driven development) which is a type of TDD (test driven development) or TFD (test first development). BDD and the ",(0,i.kt)("span",{style:{color:"red"}},"RED"),"/",(0,i.kt)("span",{style:{color:"green"}},"GREEN")," practice (cf.  Cucumber doc) is quite good for developing server code. E.g.: we define the structure, we write all the tests first, we run test #1 => it fails (it's ",(0,i.kt)("span",{style:{color:"red"}},"RED"),"), we implement, we run => test passes (it's ",(0,i.kt)("span",{style:{color:"green"}},"GREEN"),"). And we iterate w/ test #2, #3 and so on. When all is ",(0,i.kt)("span",{style:{color:"green"}},"GREEN")," => the job is done. "),(0,i.kt)("p",null,"However we find that:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This approach is not reasonable for UI development. "),(0,i.kt)("li",{parentName:"ul"},"It's a good compromise: the fact that we define the scenarios before the code, and then for each scenario => we implement + test.")),(0,i.kt)("p",null,"So the scenarios were defined, and now we take them one by one and we implement + test them, cf. below."),(0,i.kt)("p",null,'We\'ll focus on the "delete" scenario. The implementation is straight forward: a "Delete" button on each line. On click => an alert asking for confirmation. On confirm => the corresponding element is removed from the list.'),(0,i.kt)("h3",{id:"step-1-add-data-testid-if-not-existing"},"Step 1: Add ",(0,i.kt)("inlineCode",{parentName:"h3"},"data-testid")," (if not existing)"),(0,i.kt)("p",null,"A test is basically a repetition of these operations:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"select a DOM element. We use ",(0,i.kt)("a",{parentName:"li",href:"https://testing-library.com/docs/react-testing-library/intro"},"React Testing Library"),"."),(0,i.kt)("li",{parentName:"ul"},"perform an action (on it). We use  ",(0,i.kt)("a",{parentName:"li",href:"https://testing-library.com/docs/user-event/intro"},"user-event")," (related to React Testing Library)."),(0,i.kt)("li",{parentName:"ul"},"verify something (on it or on another selected DOM element). We use ",(0,i.kt)("a",{parentName:"li",href:"https://mochajs.org/"},"Mocha"),".")),(0,i.kt)("p",null,"For the ",(0,i.kt)("em",{parentName:"p"},"demo"),' part, Tests Are Demo intercepts/wraps these 3 categories of functions. When selecting a DOM element, Tests Are Demo captures/remembers it. When performing an action or verification, Tests Are Demo will show a spotlight and a popup (focused around the captured element) and will wait for the user clicking on "Next" step.'),(0,i.kt)("p",null,"React Testing Library currently recommends avoiding to (over)use the ",(0,i.kt)("inlineCode",{parentName:"p"},"data-testid")," attribute for selecting DOM elements. Our experience has taught us the contrary. Hence we begin by adding a ",(0,i.kt)("inlineCode",{parentName:"p"},"data-testid")," in our code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="TodosMeta.ts"',title:'"TodosMeta.ts"'},'export const TodosMeta = createMeta("Todos", {\n    ...\n    testids: {\n        // highlight-next-line\n        todoItem: "",\n        ...\n        // TodoItem\n        // highlight-next-line\n        delete: "", deleteYes: "", deleteNo: "",\n        ...\n    }\n});\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Todos.tsx"',title:'"Todos.tsx"'},'const TodoItem = ({ todo, ...props }: TodoItemProps) => {\n  ...\n  // highlight-next-line\n  return (<Segment data-testid={testids.todoItem + "_" + props.index} onDoubleClick={props.onEdit} ...>\n    ...\n    <div>\n        ...\n        // highlight-next-line\n        <Button data-testid={testids.delete} onClick={() => setModalOpen(true)} basic icon="delete" color="red" content="Delete" />\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"testids.delete")," == ",(0,i.kt)("inlineCode",{parentName:"p"},'"Todos_delete"'),". We use ",(0,i.kt)("inlineCode",{parentName:"p"},"TodosMeta.testids"),", to have type checking and autocomplete. This way:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"we cannot misspell (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"Todos_delete")," vs ",(0,i.kt)("inlineCode",{parentName:"li"},"Todos_delte"),"); misspelling would be eventually discovered anyway (because the test wouldn't pass), but w/ additional cost"),(0,i.kt)("li",{parentName:"ul"},"we have traceability from the implementation <-> test (via CTRL + click)")),(0,i.kt)("admonition",{title:"For uniformity",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Always keep ",(0,i.kt)("inlineCode",{parentName:"p"},"data-testid")," as the first property of a component. And BTW, did you notice, in ",(0,i.kt)("inlineCode",{parentName:"p"},"TodosMeta.ts")," that we grouped (+ comment) the testids by component? And arranged the fields in sort of a space saving manner?")),(0,i.kt)("h3",{id:"step-2a-copy-code-snippet-perform-action"},"Step 2a: Copy code snippet (perform action)"),(0,i.kt)("p",null,"Now that the ",(0,i.kt)("inlineCode",{parentName:"p"},"data-testid"),"s are there, we need to write code that uses them. Tests Are Demo has a handy feature (the ",(0,i.kt)("inlineCode",{parentName:"p"},"Inspect testid")," button):"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(4029).Z,width:"1382",height:"260"}),"  "),(0,i.kt)("p",null,"And then:"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(9412).Z,width:"1255",height:"219"}),"  "),(0,i.kt)("h3",{id:"step-2b-paste-and-adapt-code-snippet"},"Step 2b: Paste (and adapt) code snippet"),(0,i.kt)("p",null,"Paste the snippet within the test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="TodosTest.tsx"',title:'"TodosTest.tsx"'},'it(scenarios.whenDelete, async () => {\n    let item = tad.screenCapturing.getByTestId(testids.todoItem + "_0");\n    await tad.userEventWaitable.click(tad.withinCapturing(item).getByTestId(testids.delete));\n}\n')),(0,i.kt)("p",null,"After running the test (w/ the option ",(0,i.kt)("strong",{parentName:"p"},'"Step by step" = ON')," ","[default]","), we have this result:"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(3450).Z,width:"801",height:"210"}),"  "),(0,i.kt)("p",null,'Let\'s explain what is happening, and start by comparing "plain" React Testing Library code with Tests Are Demo code:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'// normal React Testing Library code\nlet item = screen.getByTestId(testids.todoItem + "_0");\n// Tests Are Demo code\nlet item = tad.screenCapturing.getByTestId(testids.todoItem + "_0");\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"tad.screenCapturing()")," is a wrapper around ",(0,i.kt)("inlineCode",{parentName:"p"},"screen"),'. All the functions behave identically, except that they capture and remember the DOM element that was selected. Hence the suffix "Capturing". We grouped all TAD functions into ',(0,i.kt)("inlineCode",{parentName:"p"},"tad"),', to make our lib "content assist" friendly. I.e. type ',(0,i.kt)("inlineCode",{parentName:"p"},"tad.")," and see what are the available functions, w/o needing to go to the doc."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// normal React Testing Library code\nuserEvent.click(within(item).getByTestId(testids.delete));\n// Tests Are Demo code\nawait tad.userEventWaitable.click(tad.withinCapturing(item).getByTestId(testids.delete));\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"tad.userEventWaitable()")," is also a wrapper. It captures the action that will be performed (the function name, e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"click"),'), it displays a "spotlight" around the last captured element (e.g. the "Delete" button), it shows a popup saying "Will perform click", and then waits (for the user to do something, e.g. click on "Next"). Hence the suffix "Waitable" and the function being async. We chose this suffix so that people can remember that they also need to use ',(0,i.kt)("inlineCode",{parentName:"p"},"await"),". "),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},'In this case, we used the pasted code snippet "as-is". No modifications/adaptations were needed, which is rather rare. Normally a bit of adaptation is needed to the pasted snippet. So please consider this copy/paste workflow as an aid, not a bullet proof mechanism!')),(0,i.kt)("p",null,"Regarding the ",(0,i.kt)("strong",{parentName:"p"},"name of the test"),", i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"scenarios.whenDelete"),". Again, we leverage typing. E.g. a scenario may be tested in several tests. Hence we achieve traceability (via CTRL + click). We also have the case where a test covers several scenarios, e.g.:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'it([scenarios.whenEditThenForm, scenarios.formTodo].join(";"), async () => {\n')),(0,i.kt)("h3",{id:"step-3-copypaste-code-snippet-verify"},"Step 3: Copy/paste code snippet (verify)"),(0,i.kt)("p",null,"We apply the same process to obtain a snippet for verification:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="TodosTest.tsx"',title:'"TodosTest.tsx"'},'it(scenarios.whenDelete, async () => {\n    let item = tad.screenCapturing.getByTestId(testids.todoItem + "_0");\n    await tad.userEventWaitable.click(tad.withinCapturing(item).getByTestId(testids.delete));\n    \n    // highlight-start\n    await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.deleteNo));\n    tad.cc("The Todo wasn\'t deleted");\n    await tad.assertWaitable.equal(tad.withinCapturing(item).getByTestId(testids.todoItemCheckboxLabel).textContent, someTodos[0].text);\n    // highlight-end\n})\n')),(0,i.kt)("p",null,"We have the result:"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(3881).Z,width:"441",height:"275"}),"  "),(0,i.kt)("p",null,'We added a new "perform action" line, simulating clicking on "No" (in the alert that\'s opened after clicking on "Delete"). And then a ',(0,i.kt)("strong",{parentName:"p"},'"verification"')," line. Here we have the same interception mechanism, but applied this time to ",(0,i.kt)("inlineCode",{parentName:"p"},"assert")," from Mocha. "),(0,i.kt)("p",null,"If the first lines were quite readable, this particular verification line is not straight forward. Meaning that just by reading it, it's not clear what we want to achieve actually. Hence the need for a ",(0,i.kt)("strong",{parentName:"p"},"comment"),", i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"tad.cc()")," which is an alias for ",(0,i.kt)("inlineCode",{parentName:"p"},"tad.currentComment()"),". We use comments this way (instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"// this way"),"), so that they can be displayed in the UI."),(0,i.kt)("h3",{id:"iterate-4-5-etc"},"Iterate: #4, #5, etc."),(0,i.kt)("p",null,"To finish the test/scenario, we iterate between:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"step 1: add ",(0,i.kt)("inlineCode",{parentName:"li"},"data-testid")," (if needed)"),(0,i.kt)("li",{parentName:"ul"},"step 2: copy/paste/adapt code for ",(0,i.kt)("strong",{parentName:"li"},"performing actions"),","),(0,i.kt)("li",{parentName:"ul"},"step 3: copy/paste/adapt code for ",(0,i.kt)("strong",{parentName:"li"},"verification"),".")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},'We recommend keeping "Auto run after page load" = true (default). Probably you are running Tests Are Demo inside a toolchain (such as ',(0,i.kt)("a",{parentName:"p",href:"https://vitejs.dev/"},"Vite")," or ",(0,i.kt)("a",{parentName:"p",href:"https://create-react-app.dev/"},"Create React App"),") that has auto-refresh or hot module reload (HMR) enabled. Hence when you save, the browser will refresh and the test will run again. This is convenient.")),(0,i.kt)("h3",{id:"polish-the-demo-for-the-end-user"},"Polish the demo for the end user"),(0,i.kt)("p",null,'The "slide show"/visual test steps are practically a demo of our component or app. They are meaningful for a dev that looks at the demo. But they are also (almost) meaningful for an end user. However, when presenting the demo to and user, a bit of additional polishing may be needed.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="TodosTest.tsx"',title:'"TodosTest.tsx"'},'it(scenarios.whenDelete, async () => {\n    // highlight-next-line\n    tad.cc("A Todo may be deleted");\n    \n    // highlight-next-line\n    tad.demoForEndUserHide();\n    let item = tad.screenCapturing.getByTestId(testids.todoItem + "_0");\n    await tad.userEventWaitable.click(tad.withinCapturing(item).getByTestId(testids.delete));\n    \n    await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.deleteNo));\n    tad.cc("The Todo wasn\'t deleted");\n    await tad.assertWaitable.equal(tad.withinCapturing(item).getByTestId(testids.todoItemCheckboxLabel).textContent, someTodos[0].text);\n    // highlight-next-line\n    tad.demoForEndUserShow();\n    \n    await tad.userEventWaitable.click(tad.withinCapturing(item).getByTestId(testids.delete));\n    await tad.userEventWaitable.click(tad.screenCapturing.getByTestId(testids.deleteYes));\n    // highlight-next-line\n    tad.cc("The Todo was deleted. So the second element (index 1) became element the first element (index 0)");\n    item = tad.screenCapturing.getByTestId(testids.todoItem + "_0");\n    await tad.assertWaitable.include(tad.withinCapturing(item).getByTestId(testids.todoItemCheckboxLabel).textContent, someTodos[1].text); // include instead of equals, because we appended something in a step above\n})\n')),(0,i.kt)("p",null,"Some ways to polish:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"by adding additional comments. Such as providing some context or intro at the beginning of the scenario, or adding text to mark the transition from the previous scenario."),(0,i.kt)("li",{parentName:"ul"},'by hiding steps which would bore the end user. E.g. here we don\'t want to show that we test clicking on the "No" button of the "Do you want to delete?" dialog.'),(0,i.kt)("li",{parentName:"ul"},'by rephrasing a comment using a language suitable for the end user. E.g. here we used both "first element" (in "user language") and "index 0" (in dev language).')),(0,i.kt)("h2",{id:"iterate-scenario-2-3-etc"},"Iterate: scenario #2, #3, etc."),(0,i.kt)("p",null,"We finished implementing and testing the first scenario/feature. And we also have a nice demo for it. It's time to do a bit of cleaning in ",(0,i.kt)("inlineCode",{parentName:"p"},"TodosMeta"),". We remove the draft comments, because now this content is contained in the test, which is the ",(0,i.kt)("strong",{parentName:"p"},"single source of truth")," regarding how the feature works. We don't want to have comments in several places that we need to maintain (e.g. maybe in the future the alert will have a third orange button that does something new)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="TodosMeta.ts"',title:'"TodosMeta.ts"'},' export const TodosMeta = createMeta("Todos", {\n     scenarios: {\n         ...\n         // highlight-start\n-        // click on del, verify alert open, click no, verify record still there, click again on del,\n-        // click yes, verify the record is not there\n         // highlight-end\n         whenDelete: "WHEN click on DELETE, THEN confirm, AND WHEN \'yes\', THEN the Todo is removed", \n         ...\n')))}E.isMDXComponent=!0},9177:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/anim-33b0f8dbbf4baf5127f85f483e40919f.gif"},3450:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/del-click-d682acfbbc970ba43142ad1f03679b41.png"},4029:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/inspect1-32edd4de97c7230dc4a1f62ae82abcbc.png"},9412:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/inspect2-cc522bf72c254864b6599424562ef35d.png"},6138:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/todos-16317d6bf7316ff60eb768bc8f67ee0e.png"},3881:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/verify-not-deleted-8ed05663ea8ae42c3db53e158e5f3560.png"}}]);